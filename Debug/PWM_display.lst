
PWM_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a28  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08008a28  0c008a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  08008a28  0c008a28  00010a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  4 .data         000002bc  20000000  0c008a30  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008a0  200002c0  0c008cec  000182c0  2**3
                  ALLOC
  6 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  7 .debug_aranges 00001040  00000000  00000000  000182c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001ffc3  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003874  00000000  00000000  000392c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007901  00000000  00000000  0003cb37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00004d14  00000000  00000000  00044438  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000b80c  00000000  00000000  0004914c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008b20  00000000  00000000  00054958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000df0  00000000  00000000  0005d478  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000f16  00000000  00000000  0005e268  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 91 3e 00 08 55 3f 00 08 b1 02 00 08     .....>..U?......
 800005c:	b1 02 00 08 d9 3f 00 08 00 00 00 00 00 00 00 00     .....?..........
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 49 3b 00 08 b1 02 00 08 b1 02 00 08     ....I;..........
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 09 3e 00 08 b1 02 00 08     .........>......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008a30 	.word	0x0c008a30
 800024c:	20000000 	.word	0x20000000
 8000250:	000002bc 	.word	0x000002bc
 8000254:	0c008cec 	.word	0x0c008cec
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008a30 	.word	0x0c008a30
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008a30 	.word	0x0c008a30
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200002c0 	.word	0x200002c0
 800027c:	0000089c 	.word	0x0000089c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08006211 	.word	0x08006211
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08004019 	.word	0x08004019

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f002 ff73 	bl	80031b0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f002 ffdb 	bl	8003284 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f002 ffba 	bl	8003270 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <XMC_ERU_Enable+0x20>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d103      	bne.n	80003c0 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003bc:	f000 f970 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40044000 	.word	0x40044000

080003cc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	460b      	mov	r3, r1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3204      	adds	r2, #4
 80003ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4619      	mov	r1, r3
 80003fc:	23f8      	movs	r3, #248	; 0xf8
 80003fe:	408b      	lsls	r3, r1
 8000400:	43db      	mvns	r3, r3
 8000402:	ea02 0103 	and.w	r1, r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1d02      	adds	r2, r0, #4
 800040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4619      	mov	r1, r3
 8000418:	2303      	movs	r3, #3
 800041a:	408b      	lsls	r3, r1
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <XMC_GPIO_Init+0x144>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d003      	beq.n	8000434 <XMC_GPIO_Init+0x68>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	4a39      	ldr	r2, [pc, #228]	; (8000514 <XMC_GPIO_Init+0x148>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d10a      	bne.n	800044a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	401a      	ands	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	661a      	str	r2, [r3, #96]	; 0x60
 8000448:	e042      	b.n	80004d0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	b25b      	sxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	da3c      	bge.n	80004d0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	409a      	lsls	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	08db      	lsrs	r3, r3, #3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3210      	adds	r2, #16
 8000476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4619      	mov	r1, r3
 8000484:	2307      	movs	r3, #7
 8000486:	408b      	lsls	r3, r1
 8000488:	43db      	mvns	r3, r3
 800048a:	ea02 0103 	and.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	08db      	lsrs	r3, r3, #3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3210      	adds	r2, #16
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	7a1b      	ldrb	r3, [r3, #8]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0307 	and.w	r3, r3, #7
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	f100 0210 	add.w	r2, r0, #16
 80004cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3204      	adds	r2, #4
 80004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	ea42 0103 	orr.w	r1, r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	1d02      	adds	r2, r0, #4
 8000502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	48028e00 	.word	0x48028e00
 8000514:	48028f00 	.word	0x48028f00

08000518 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <XMC_SCU_GetMirrorStatus+0x14>)
 800051e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	50004000 	.word	0x50004000

08000530 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000538:	f7ff fecc 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <XMC_SCU_lDelay+0x3c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <XMC_SCU_lDelay+0x40>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9a      	lsrs	r2, r3, #18
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e003      	b.n	800055e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000556:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3f7      	bcc.n	8000556 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000ffc0 	.word	0x2000ffc0
 8000570:	431bde83 	.word	0x431bde83

08000574 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800057a:	685b      	ldr	r3, [r3, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	50004074 	.word	0x50004074

0800058c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60d3      	str	r3, [r2, #12]
}
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	50004074 	.word	0x50004074

080005a8 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f891 	bl	80006d8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005b6:	f000 fa53 	bl	8000a60 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00a      	beq.n	80005d8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005c2:	f000 fa8b 	bl	8000adc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005c6:	bf00      	nop
 80005c8:	f000 fa76 	bl	8000ab8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f083 0301 	eor.w	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f7      	bne.n	80005c8 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a5b      	ldrb	r3, [r3, #9]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f8f5 	bl	80007cc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005e2:	bf00      	nop
 80005e4:	f7ff ff98 	bl	8000518 <XMC_SCU_GetMirrorStatus>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1fa      	bne.n	80005e4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7a1b      	ldrb	r3, [r3, #8]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa0e 	bl	8000a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7c1b      	ldrb	r3, [r3, #16]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f903 	bl	8000808 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7c5b      	ldrb	r3, [r3, #17]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f926 	bl	8000858 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7c9b      	ldrb	r3, [r3, #18]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f90d 	bl	8000830 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7cdb      	ldrb	r3, [r3, #19]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f930 	bl	8000880 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	799b      	ldrb	r3, [r3, #6]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00a      	beq.n	800063e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000628:	f000 fa90 	bl	8000b4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800062c:	bf00      	nop
 800062e:	f000 fab5 	bl	8000b9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000632:	4603      	mov	r3, r0
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f7      	bne.n	800062e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d109      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	799b      	ldrb	r3, [r3, #6]
 800064a:	f083 0301 	eor.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d017      	beq.n	8000684 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000654:	f000 fac6 	bl	8000be4 <XMC_SCU_CLOCK_DisableSystemPll>
 8000658:	e014      	b.n	8000684 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800065a:	f000 fab3 	bl	8000bc4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	8899      	ldrh	r1, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800066a:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000670:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	462a      	mov	r2, r5
 800067e:	4623      	mov	r3, r4
 8000680:	f000 fac0 	bl	8000c04 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800068c:	d103      	bne.n	8000696 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800068e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000692:	f000 f821 	bl	80006d8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000696:	f7ff fe1d 	bl	80002d4 <SystemCoreClockUpdate>
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bdb0      	pop	{r4, r5, r7, pc}

080006a0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	0f1b      	lsrs	r3, r3, #28
 80006ac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006b4:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006c4:	4413      	add	r3, r2
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	601a      	str	r2, [r3, #0]
}
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	50004414 	.word	0x50004414

080006d8 <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006e0:	4906      	ldr	r1, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	50004600 	.word	0x50004600

08000700 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	50004600 	.word	0x50004600

08000728 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	50004600 	.word	0x50004600

08000750 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800076a:	f023 0301 	bic.w	r3, r3, #1
 800076e:	60d3      	str	r3, [r2, #12]
 8000770:	e007      	b.n	8000782 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000772:	4a06      	ldr	r2, [pc, #24]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	60d3      	str	r3, [r2, #12]
  }
}
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	50004710 	.word	0x50004710

08000790 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079a:	bf00      	nop
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800079e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f8      	bne.n	800079c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004000 	.word	0x50004000
 80007c8:	50004300 	.word	0x50004300

080007cc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007d6:	bf00      	nop
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f8      	bne.n	80007d8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	50004000 	.word	0x50004000
 8000804:	50004300 	.word	0x50004300

08000808 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800081e:	4313      	orrs	r3, r2
 8000820:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	50004600 	.word	0x50004600

08000830 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000846:	4313      	orrs	r3, r2
 8000848:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	50004600 	.word	0x50004600

08000858 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800086e:	4313      	orrs	r3, r2
 8000870:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	50004600 	.word	0x50004600

08000880 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000896:	4313      	orrs	r3, r2
 8000898:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	50004600 	.word	0x50004600

080008a8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008be:	4313      	orrs	r3, r2
 80008c0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	50004600 	.word	0x50004600

080008d0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008d8:	4906      	ldr	r1, [pc, #24]	; (80008f4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	50004600 	.word	0x50004600

080008f8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800090e:	4313      	orrs	r3, r2
 8000910:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	50004600 	.word	0x50004600

08000920 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	6053      	str	r3, [r2, #4]
}
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	50004600 	.word	0x50004600

08000940 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094e:	f023 0302 	bic.w	r3, r3, #2
 8000952:	6153      	str	r3, [r2, #20]
}
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	50004710 	.word	0x50004710

08000960 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800096a:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000976:	bf00      	nop
 8000978:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f9      	beq.n	8000978 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000990:	491e      	ldr	r1, [pc, #120]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800099e:	4313      	orrs	r3, r2
 80009a0:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009a2:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	f023 0310 	bic.w	r3, r3, #16
 80009b8:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009c6:	bf00      	nop
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f9      	beq.n	80009c8 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80009e0:	bf00      	nop
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f9      	bne.n	80009e2 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009f8:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 80009fc:	2208      	movs	r2, #8
 80009fe:	60da      	str	r2, [r3, #12]
}
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	50004710 	.word	0x50004710
 8000a10:	50004160 	.word	0x50004160

08000a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a28:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10e      	bne.n	8000a4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a3a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f7ff fd77 	bl	8000530 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a4c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f7ff fd6e 	bl	8000530 <XMC_SCU_lDelay>
}
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	50004710 	.word	0x50004710

08000a60 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d109      	bne.n	8000a84 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a76:	bf00      	nop
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f9      	beq.n	8000a78 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00a      	beq.n	8000aa6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a96:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a98:	bf00      	nop
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f9      	bne.n	8000a9a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	50004200 	.word	0x50004200
 8000ab4:	50004400 	.word	0x50004400

08000ab8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf0c      	ite	eq
 8000ac8:	2301      	moveq	r3, #1
 8000aca:	2300      	movne	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	50004300 	.word	0x50004300

08000adc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ae0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ae4:	f7ff fd52 	bl	800058c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000af2:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000af4:	bf00      	nop
 8000af6:	f7ff fd3d 	bl	8000574 <XMC_SCU_INTERUPT_GetEventStatus>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f8      	beq.n	8000af6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b08:	f7ff fd40 	bl	800058c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b12:	bf00      	nop
 8000b14:	f7ff fd2e 	bl	8000574 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f8      	beq.n	8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b22:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b26:	f7ff fd31 	bl	800058c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b36:	bf00      	nop
 8000b38:	f7ff fd1c 	bl	8000574 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f8      	beq.n	8000b38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	50004300 	.word	0x50004300

08000b4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b5c:	4d0d      	ldr	r5, [pc, #52]	; (8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b66:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b6a:	f002 fb81 	bl	8003270 <OSCHP_GetFrequency>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b72:	fba3 2302 	umull	r2, r3, r3, r2
 8000b76:	0d1b      	lsrs	r3, r3, #20
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b7c:	4323      	orrs	r3, r4
 8000b7e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b82:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b8a:	6053      	str	r3, [r2, #4]
}
 8000b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	50004710 	.word	0x50004710
 8000b94:	50004700 	.word	0x50004700
 8000b98:	6b5fca6b 	.word	0x6b5fca6b

08000b9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000ba8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	50004710 	.word	0x50004710

08000bc4 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bc8:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	f023 0302 	bic.w	r3, r3, #2
 8000bd6:	6053      	str	r3, [r2, #4]
}
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	50004710 	.word	0x50004710

08000be4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000be8:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	6053      	str	r3, [r2, #4]
}
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	50004710 	.word	0x50004710

08000c04 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60ba      	str	r2, [r7, #8]
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4603      	mov	r3, r0
 8000c10:	81fb      	strh	r3, [r7, #14]
 8000c12:	460b      	mov	r3, r1
 8000c14:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fd99 	bl	8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c1e:	7b7b      	ldrb	r3, [r7, #13]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	f040 808b 	bne.w	8000d3c <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d109      	bne.n	8000c40 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c2c:	f002 fb20 	bl	8003270 <OSCHP_GetFrequency>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c34:	fba3 2302 	umull	r2, r3, r3, r2
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	059b      	lsls	r3, r3, #22
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e002      	b.n	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c40:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c44:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	fb02 f203 	mul.w	r2, r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4a4b      	ldr	r2, [pc, #300]	; (8000d88 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	0d9b      	lsrs	r3, r3, #22
 8000c62:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c64:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c70:	bf00      	nop
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f9      	beq.n	8000c72 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c7e:	4a43      	ldr	r2, [pc, #268]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c8a:	4940      	ldr	r1, [pc, #256]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8c:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c92:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	3a01      	subs	r2, #1
 8000c98:	0212      	lsls	r2, r2, #8
 8000c9a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ca2:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000caa:	4313      	orrs	r3, r2
 8000cac:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cae:	4a37      	ldr	r2, [pc, #220]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb8:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cba:	4a34      	ldr	r2, [pc, #208]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f023 0310 	bic.w	r3, r3, #16
 8000cc4:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000cc6:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc8:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cd2:	bf00      	nop
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f9      	beq.n	8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cec:	bf00      	nop
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f9      	bne.n	8000cee <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	0d9b      	lsrs	r3, r3, #22
 8000d06:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d08:	6a3a      	ldr	r2, [r7, #32]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d202      	bcs.n	8000d16 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d10:	6938      	ldr	r0, [r7, #16]
 8000d12:	f000 f845 	bl	8000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	095b      	lsrs	r3, r3, #5
 8000d22:	0d9b      	lsrs	r3, r3, #22
 8000d24:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d26:	6a3a      	ldr	r2, [r7, #32]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d202      	bcs.n	8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d2e:	6938      	ldr	r0, [r7, #16]
 8000d30:	f000 f836 	bl	8000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d34:	6a38      	ldr	r0, [r7, #32]
 8000d36:	f000 f833 	bl	8000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d3a:	e01c      	b.n	8000d76 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d3c:	4913      	ldr	r1, [pc, #76]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d4e:	bf00      	nop
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f9      	beq.n	8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d68:	bf00      	nop
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f9      	beq.n	8000d6a <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d78:	2205      	movs	r2, #5
 8000d7a:	60da      	str	r2, [r3, #12]
}
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	aaaaaaab 	.word	0xaaaaaaab
 8000d8c:	50004710 	.word	0x50004710
 8000d90:	f08080ff 	.word	0xf08080ff
 8000d94:	88888889 	.word	0x88888889
 8000d98:	b60b60b7 	.word	0xb60b60b7
 8000d9c:	50004160 	.word	0x50004160

08000da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000da8:	490b      	ldr	r1, [pc, #44]	; (8000dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000db8:	4313      	orrs	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000dbc:	bf00      	nop
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f9      	beq.n	8000dbe <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000dca:	2032      	movs	r0, #50	; 0x32
 8000dcc:	f7ff fbb0 	bl	8000530 <XMC_SCU_lDelay>
}
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	50004710 	.word	0x50004710

08000ddc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	60da      	str	r2, [r3, #12]
}
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <XMC_CCU4_lDeassertReset+0x4c>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d103      	bne.n	8000e10 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f7ff fc49 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e0e:	e016      	b.n	8000e3e <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <XMC_CCU4_lDeassertReset+0x50>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d103      	bne.n	8000e20 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000e18:	2008      	movs	r0, #8
 8000e1a:	f7ff fc41 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e1e:	e00e      	b.n	8000e3e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <XMC_CCU4_lDeassertReset+0x54>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d103      	bne.n	8000e30 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000e28:	2010      	movs	r0, #16
 8000e2a:	f7ff fc39 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000e2e:	e006      	b.n	8000e3e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <XMC_CCU4_lDeassertReset+0x58>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d102      	bne.n	8000e3e <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <XMC_CCU4_lDeassertReset+0x5c>)
 8000e3a:	f7ff fc31 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	4000c000 	.word	0x4000c000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	40014000 	.word	0x40014000
 8000e50:	48004000 	.word	0x48004000
 8000e54:	10000001 	.word	0x10000001

08000e58 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f7ff fd5d 	bl	8000920 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffc6 	bl	8000df8 <XMC_CCU4_lDeassertReset>
#endif
}
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop

08000e74 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ffe9 	bl	8000e58 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa8 	bl	8000ddc <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e98:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	039b      	lsls	r3, r3, #14
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	795b      	ldrb	r3, [r3, #5]
 8000ec6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	051a      	lsls	r2, r3, #20
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	795b      	ldrb	r3, [r3, #5]
 8000ee6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	795b      	ldrb	r3, [r3, #5]
 8000ef6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f34:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000f46:	78fa      	ldrb	r2, [r7, #3]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2b0b      	cmp	r3, #11
 8000f6c:	d836      	bhi.n	8000fdc <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000fa5 	.word	0x08000fa5
 8000f78:	08000fa5 	.word	0x08000fa5
 8000f7c:	08000faf 	.word	0x08000faf
 8000f80:	08000faf 	.word	0x08000faf
 8000f84:	08000fdd 	.word	0x08000fdd
 8000f88:	08000fdd 	.word	0x08000fdd
 8000f8c:	08000fdd 	.word	0x08000fdd
 8000f90:	08000fdd 	.word	0x08000fdd
 8000f94:	08000fb9 	.word	0x08000fb9
 8000f98:	08000fc5 	.word	0x08000fc5
 8000f9c:	08000fd1 	.word	0x08000fd1
 8000fa0:	08000fd1 	.word	0x08000fd1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
      break;
 8000fac:	e01b      	b.n	8000fe6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000fae:	230c      	movs	r3, #12
 8000fb0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
      break;
 8000fb6:	e016      	b.n	8000fe6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000fb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fbc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	617b      	str	r3, [r7, #20]
      break;
 8000fc2:	e010      	b.n	8000fe6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000fc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fc8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	617b      	str	r3, [r7, #20]
      break;
 8000fce:	e00a      	b.n	8000fe6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000fd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fd4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	617b      	str	r3, [r7, #20]
      break;
 8000fda:	e004      	b.n	8000fe6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
	  break;
 8000fe4:	bf00      	nop
  }

  if (mask != 0)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ff2:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8000ffe:	78ba      	ldrb	r2, [r7, #2]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102e:	60da      	str	r2, [r3, #12]
}
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <XMC_CCU8_lDeassertReset+0x30>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d103      	bne.n	800106c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001064:	2080      	movs	r0, #128	; 0x80
 8001066:	f7ff fb1b 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
 800106a:	e007      	b.n	800107c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <XMC_CCU8_lDeassertReset+0x34>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d103      	bne.n	800107c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001074:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001078:	f7ff fb12 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020000 	.word	0x40020000
 8001088:	40024000 	.word	0x40024000

0800108c <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001094:	2010      	movs	r0, #16
 8001096:	f7ff fc43 	bl	8000920 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffda 	bl	8001054 <XMC_CCU8_lDeassertReset>
#endif
}
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop

080010a8 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffe9 	bl	800108c <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb0 	bl	8001020 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010cc:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	039b      	lsls	r3, r3, #14
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	601a      	str	r2, [r3, #0]
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffa4 	bl	800103c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	7b5b      	ldrb	r3, [r3, #13]
 8001100:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	051a      	lsls	r2, r3, #20
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	7b1b      	ldrb	r3, [r3, #12]
 8001110:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	7b1b      	ldrb	r3, [r3, #12]
 8001120:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	7b5b      	ldrb	r3, [r3, #13]
 8001130:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f083 0214 	eor.w	r2, r3, #20
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop

08001158 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));

  gctrl = module->GCTRL;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	0c1b      	lsrs	r3, r3, #16
 800116c:	43db      	mvns	r3, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
 800119c:	4613      	mov	r3, r2
 800119e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) || \
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f023 0303 	bic.w	r3, r3, #3
 80011ac:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	60fb      	str	r3, [r7, #12]

  if (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 80011c2:	78bb      	ldrb	r3, [r7, #2]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d104      	bne.n	80011d2 <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e003      	b.n	80011da <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	615a      	str	r2, [r3, #20]
}
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	4613      	mov	r3, r2
 80011fa:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f023 030c 	bic.w	r3, r3, #12
 8001208:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001226:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	4313      	orrs	r3, r2
 8001230:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	615a      	str	r2, [r3, #20]
}
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800125c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	031b      	lsls	r3, r3, #12
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	605a      	str	r2, [r3, #4]
}
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001290:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	01db      	lsls	r3, r3, #7
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	615a      	str	r2, [r3, #20]
}
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	4608      	mov	r0, r1
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	70fb      	strb	r3, [r7, #3]
 80012be:	460b      	mov	r3, r1
 80012c0:	70bb      	strb	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	707b      	strb	r3, [r7, #1]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) || \
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80012d2:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	049b      	lsls	r3, r3, #18
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 80012ea:	78bb      	ldrb	r3, [r7, #2]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d104      	bne.n	80012fa <XMC_CCU8_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e003      	b.n	8001302 <XMC_CCU8_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001300:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == true)
 8001302:	7e3b      	ldrb	r3, [r7, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <XMC_CCU8_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e003      	b.n	800131a <XMC_CCU8_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001318:	60fb      	str	r3, [r7, #12]
  }

  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8001320:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 8001322:	787b      	ldrb	r3, [r7, #1]
 8001324:	06db      	lsls	r3, r3, #27
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	615a      	str	r2, [r3, #20]
}
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001354:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	039b      	lsls	r3, r3, #14
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]
}
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001388:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	605a      	str	r2, [r3, #4]
}
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013bc:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	029b      	lsls	r3, r3, #10
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	605a      	str	r2, [r3, #4]
}
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
}
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
 8001414:	4613      	mov	r3, r2
 8001416:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if (synch_with_pwm == true)
 800143a:	78bb      	ldrb	r3, [r7, #2]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e003      	b.n	8001452 <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001450:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d104      	bne.n	8001462 <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e003      	b.n	800146a <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001468:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	615a      	str	r2, [r3, #20]
}
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;
#else
  ins = slice->INS;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001494:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	049b      	lsls	r3, r3, #18
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4313      	orrs	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80014a8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	051b      	lsls	r3, r3, #20
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014bc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	789b      	ldrb	r3, [r3, #2]
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	789b      	ldrb	r3, [r3, #2]
 80014d6:	061b      	lsls	r3, r3, #24
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80014e4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	78db      	ldrb	r3, [r3, #3]
 80014ea:	06db      	lsls	r3, r3, #27
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80014f8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	075b      	lsls	r3, r3, #29
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800150c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4313      	orrs	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001520:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4313      	orrs	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	601a      	str	r2, [r3, #0]
#endif
}
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	460b      	mov	r3, r1
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	3b01      	subs	r3, #1
 8001552:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3310      	adds	r3, #16
 8001562:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	461a      	mov	r2, r3
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	3316      	adds	r3, #22
 800158a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	789b      	ldrb	r3, [r3, #2]
 80015a0:	461a      	mov	r2, r3
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	3319      	adds	r3, #25
 80015b6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	461a      	mov	r2, r3
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]
#endif
}
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001646:	883a      	ldrh	r2, [r7, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c
 800164c:	e002      	b.n	8001654 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800164e:	883a      	ldrh	r2, [r7, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop

08001660 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
 800166c:	4613      	mov	r3, r2
 800166e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b0b      	cmp	r3, #11
 8001674:	d83b      	bhi.n	80016ee <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <XMC_CCU8_SLICE_SetInterruptNode+0x1c>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	080016ad 	.word	0x080016ad
 8001680:	080016ad 	.word	0x080016ad
 8001684:	080016b7 	.word	0x080016b7
 8001688:	080016b7 	.word	0x080016b7
 800168c:	080016c1 	.word	0x080016c1
 8001690:	080016c1 	.word	0x080016c1
 8001694:	080016ef 	.word	0x080016ef
 8001698:	080016ef 	.word	0x080016ef
 800169c:	080016cb 	.word	0x080016cb
 80016a0:	080016d7 	.word	0x080016d7
 80016a4:	080016e3 	.word	0x080016e3
 80016a8:	080016e3 	.word	0x080016e3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 80016ac:	2303      	movs	r3, #3
 80016ae:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
      break;
 80016b4:	e020      	b.n	80016f8 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 80016b6:	230c      	movs	r3, #12
 80016b8:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 80016ba:	2302      	movs	r3, #2
 80016bc:	613b      	str	r3, [r7, #16]
      break;
 80016be:	e01b      	b.n	80016f8 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 80016c0:	2330      	movs	r3, #48	; 0x30
 80016c2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 80016c4:	2304      	movs	r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
      break;
 80016c8:	e016      	b.n	80016f8 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 80016d0:	2308      	movs	r3, #8
 80016d2:	613b      	str	r3, [r7, #16]
      break;
 80016d4:	e010      	b.n	80016f8 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 80016d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016da:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 80016dc:	230a      	movs	r3, #10
 80016de:	613b      	str	r3, [r7, #16]
      break;
 80016e0:	e00a      	b.n	80016f8 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 80016e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016e6:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 80016e8:	230c      	movs	r3, #12
 80016ea:	613b      	str	r3, [r7, #16]
      break;
 80016ec:	e004      	b.n	80016f8 <XMC_CCU8_SLICE_SetInterruptNode+0x98>
	  
	default:
	  mask = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
	  pos = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
	  break;
 80016f6:	bf00      	nop
  }

  if (mask != 0)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d013      	beq.n	8001726 <XMC_CCU8_SLICE_SetInterruptNode+0xc6>
  {
    srs = slice->SRS;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001704:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	43db      	mvns	r3, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8001710:	78ba      	ldrb	r2, [r7, #2]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	460b      	mov	r3, r1
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7fe fe1c 	bl	80003a8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001774:	7afb      	ldrb	r3, [r7, #11]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4619      	mov	r1, r3
 800177a:	230f      	movs	r3, #15
 800177c:	408b      	lsls	r3, r1
 800177e:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8001780:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	7af9      	ldrb	r1, [r7, #11]
 8001788:	0089      	lsls	r1, r1, #2
 800178a:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 800178c:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 8001792:	7afa      	ldrb	r2, [r7, #11]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3204      	adds	r2, #4
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop

080017a8 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
 80017b4:	4613      	mov	r3, r2
 80017b6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 80017b8:	78fa      	ldrb	r2, [r7, #3]
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	b2d9      	uxtb	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	f001 0103 	and.w	r1, r1, #3
 80017ca:	0109      	lsls	r1, r1, #4
 80017cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80017d0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80017d4:	4301      	orrs	r1, r0
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
    const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80017ee:	783b      	ldrb	r3, [r7, #0]
 80017f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800181e:	b2db      	uxtb	r3, r3
 8001820:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001822:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos) |
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
                ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800185e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800189c:	2001      	movs	r0, #1
 800189e:	f7fe feff 	bl	80006a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
#if (UC_SERIES == XMC14)
  XMC_SCU_CLOCK_SetAdcClockSrc(XMC_SCU_CLOCK_ADCCLKSRC_48MHZ);
#endif

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 80018ae:	f7ff fff3 	bl	8001898 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    XMC_UNUSED_ARG(conv_type);
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f240 731f 	movw	r3, #1823	; 0x71f
 8001914:	4013      	ands	r3, r2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	3128      	adds	r1, #40	; 0x28
 800191c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001920:	e007      	b.n	8001932 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8001926:	4013      	ands	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	3128      	adds	r1, #40	; 0x28
 800192e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	071f0000 	.word	0x071f0000

08001940 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800194e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e017      	b.n	800198e <XMC_VADC_GLOBAL_StartupCalibration+0x4e>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <XMC_VADC_GLOBAL_StartupCalibration+0x60>)
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800196e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <XMC_VADC_GLOBAL_StartupCalibration+0x48>
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001976:	e000      	b.n	800197a <XMC_VADC_GLOBAL_StartupCalibration+0x3a>
      {
        __NOP();
 8001978:	bf00      	nop
      while ((group_ptr->ARBCFG & (uint32_t)VADC_G_ARBCFG_CALS_Msk) == 0)
      {
        __NOP();
      }
#endif
      while ((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f7      	bne.n	8001978 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d9e4      	bls.n	800195e <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	0800836c 	.word	0x0800836c

080019a4 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  uint32_t node;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d903      	bls.n	80019be <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	3b04      	subs	r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e001      	b.n	80019c2 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019c8:	f023 020f 	bic.w	r2, r3, #15
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	2300      	movs	r3, #0
 8001a00:	f000 f828 	bl	8001a54 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f000 f821 	bl	8001a54 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	6899      	ldr	r1, [r3, #8]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f000 f81a 	bl	8001a54 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	2201      	movs	r2, #1
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f000 f813 	bl	8001a54 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr, config->emux_config);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	f7ff fecc 	bl	80017e4 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                   const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b08d      	sub	sp, #52	; 0x34
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71fb      	strb	r3, [r7, #7]

  /*
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d113      	bne.n	8001a92 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001a6e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001a78:	231f      	movs	r3, #31
 8001a7a:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001a7c:	7a3b      	ldrb	r3, [r7, #8]
 8001a7e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001a86:	7a7b      	ldrb	r3, [r7, #9]
 8001a88:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	76fb      	strb	r3, [r7, #27]
 8001a90:	e013      	b.n	8001aba <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001a92:	2318      	movs	r3, #24
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001a96:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001aa0:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001aa4:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001aa6:	7abb      	ldrb	r3, [r7, #10]
 8001aa8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	3228      	adds	r2, #40	; 0x28
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001ad0:	7efa      	ldrb	r2, [r7, #27]
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	3228      	adds	r2, #40	; 0x28
 8001afc:	6979      	ldr	r1, [r7, #20]
 8001afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001b02:	3734      	adds	r7, #52	; 0x34
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1e:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]
 8001b52:	e009      	b.n	8001b68 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	4a39      	ldr	r2, [pc, #228]	; (8001c3c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe89 	bl	8001874 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
#endif

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	3301      	adds	r3, #1
 8001b66:	75fb      	strb	r3, [r7, #23]
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d9f2      	bls.n	8001b54 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }

  conv_start_mask = (uint32_t) 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b84:	613b      	str	r3, [r7, #16]
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]
 8001b8a:	e021      	b.n	8001bd0 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	4a2b      	ldr	r2, [pc, #172]	; (8001c3c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b98:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba0:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    /* Program the start mode */
    reg |= conv_start_mask;
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }

  for (i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	75fb      	strb	r3, [r7, #23]
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d9da      	bls.n	8001b8c <XMC_VADC_GLOBAL_BackgroundInit+0x48>

  }
#endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d107      	bne.n	8001c14 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	75fb      	strb	r3, [r7, #23]
 8001c18:	e009      	b.n	8001c2e <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fe14 	bl	8001850 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for (i = (uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d9f2      	bls.n	8001c1a <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

}
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800836c 	.word	0x0800836c

08001c40 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  prio  = (uint32_t)config->channel_priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7a1b      	ldrb	r3, [r3, #8]
 8001c50:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c58:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4013      	ands	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7a5b      	ldrb	r3, [r3, #9]
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db29      	blt.n	8001cde <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10a      	bne.n	8001caa <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8001c94:	2308      	movs	r3, #8
 8001c96:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c9e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ca8:	e00c      	b.n	8001cc4 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cba:	f023 021f 	bic.w	r2, r3, #31
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	7a52      	ldrb	r2, [r2, #9]
 8001cce:	b251      	sxtb	r1, r2
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	3280      	adds	r2, #128	; 0x80
 8001cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001cfe:	3724      	adds	r7, #36	; 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <_sbrk+0x5c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_sbrk+0x5c>)
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <_sbrk+0x60>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x5c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3303      	adds	r3, #3
 8001d28:	f023 0303 	bic.w	r3, r3, #3
 8001d2c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <_sbrk+0x5c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <_sbrk+0x64>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <_sbrk+0x5c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <_sbrk+0x5c>)
 8001d46:	6013      	str	r3, [r2, #0]
    return (base);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	e006      	b.n	8001d5a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001d4c:	f004 fa5a 	bl	8006204 <__errno>
 8001d50:	4602      	mov	r2, r0
 8001d52:	230c      	movs	r3, #12
 8001d54:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002c0 	.word	0x200002c0
 8001d68:	20000b60 	.word	0x20000b60
 8001d6c:	2000ffc0 	.word	0x2000ffc0

08001d70 <_init>:

/* Init */
void _init(void)
{}
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <delay_ms>:

////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls

void delay_ms(long unsigned int i)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	while(i--)
 8001d84:	e000      	b.n	8001d88 <delay_ms+0xc>
	{
		__NOP();
 8001d86:	bf00      	nop
////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls

void delay_ms(long unsigned int i)
{
	while(i--)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1e5a      	subs	r2, r3, #1
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <delay_ms+0xa>
	{
		__NOP();
	}
}
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <lcd_enable>:


static void lcd_enable( void )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	PORT2->OUT &= ~(0x00000400);    // Enable auf 0 setzen
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <lcd_enable+0x28>)
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <lcd_enable+0x28>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001daa:	6013      	str	r3, [r2, #0]
    delay_ms( LCD_ENABLE_US );  // kurze Pause us
 8001dac:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8001db0:	f7ff ffe4 	bl	8001d7c <delay_ms>
    PORT2->OUT |= 0x00000400;     // Enable auf 1 setzen
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <lcd_enable+0x28>)
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <lcd_enable+0x28>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	48028200 	.word	0x48028200

08001dc8 <buffer_enable>:

static void buffer_enable( void )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	PORT2->OUT |= 0x00000040;
 8001dcc:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <buffer_enable+0x28>)
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <buffer_enable+0x28>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd6:	6013      	str	r3, [r2, #0]
	delay_ms( LCD_ENABLE_US );  // kurze Pause us
 8001dd8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8001ddc:	f7ff ffce 	bl	8001d7c <delay_ms>
	PORT2->OUT &= ~(0x00000040);
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <buffer_enable+0x28>)
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <buffer_enable+0x28>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	48028200 	.word	0x48028200

08001df4 <lcd_out>:

////////////////////////////////////////////////////////////////////////////////
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
    data &= 0xF0;                       // obere 4 Bit maskieren
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f023 030f 	bic.w	r3, r3, #15
 8001e04:	71fb      	strb	r3, [r7, #7]

    LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske l�schen
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <lcd_out+0x38>)
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <lcd_out+0x38>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 030f 	bic.w	r3, r3, #15
 8001e10:	6013      	str	r3, [r2, #0]
    LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
 8001e12:	4906      	ldr	r1, [pc, #24]	; (8001e2c <lcd_out+0x38>)
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <lcd_out+0x38>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	0912      	lsrs	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
    lcd_enable();
 8001e22:	f7ff ffbb 	bl	8001d9c <lcd_enable>
}
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	48028300 	.word	0x48028300

08001e30 <lcd_init>:

////////////////////////////////////////////////////////////////////////////////
// Initialisierung: muss ganz am Anfang des Programms aufgerufen werden.
void lcd_init( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0



    // verwendete Pins auf Ausgang schalten

	PORT3->IOCR0=0x80808080;
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <lcd_init+0x88>)
 8001e38:	f04f 3280 	mov.w	r2, #2155905152	; 0x80808080
 8001e3c:	611a      	str	r2, [r3, #16]
	PORT3->IOCR4=0x00000080;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <lcd_init+0x88>)
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	615a      	str	r2, [r3, #20]
	PORT2->IOCR8=0x00800000;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <lcd_init+0x8c>)
 8001e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e4a:	619a      	str	r2, [r3, #24]
	PORT2->IOCR4=0x00800000;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <lcd_init+0x8c>)
 8001e4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e52:	615a      	str	r2, [r3, #20]

	/*uint32_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
                   (1<<LCD_RS) |                // R/S Leitung
                   (1<<LCD_EN);                 // Enable Leitung
    LCD_DDR |= pins;*/
 uint32_t pins=0x0000001F;
 8001e54:	231f      	movs	r3, #31
 8001e56:	607b      	str	r3, [r7, #4]
    // initial alle Ausg�nge auf Null
    LCD_PORT &= ~pins;
 8001e58:	4917      	ldr	r1, [pc, #92]	; (8001eb8 <lcd_init+0x88>)
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <lcd_init+0x88>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4013      	ands	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
    //PORT1->OUT|=0x00008000;
    // warten auf die Bereitschaft des LCD
    delay_ms( LCD_BOOTUP_MS );
 8001e66:	4816      	ldr	r0, [pc, #88]	; (8001ec0 <lcd_init+0x90>)
 8001e68:	f7ff ff88 	bl	8001d7c <delay_ms>

    // Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
    lcd_out( LCD_SOFT_RESET );
 8001e6c:	2030      	movs	r0, #48	; 0x30
 8001e6e:	f7ff ffc1 	bl	8001df4 <lcd_out>
    delay_ms( LCD_SOFT_RESET_MS1 );
 8001e72:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <lcd_init+0x94>)
 8001e74:	f7ff ff82 	bl	8001d7c <delay_ms>

    lcd_enable();
 8001e78:	f7ff ff90 	bl	8001d9c <lcd_enable>
    delay_ms( LCD_SOFT_RESET_MS2 );
 8001e7c:	f645 10d8 	movw	r0, #23000	; 0x59d8
 8001e80:	f7ff ff7c 	bl	8001d7c <delay_ms>

    lcd_enable();
 8001e84:	f7ff ff8a 	bl	8001d9c <lcd_enable>
    delay_ms( LCD_SOFT_RESET_MS3 );
 8001e88:	f645 10d8 	movw	r0, #23000	; 0x59d8
 8001e8c:	f7ff ff76 	bl	8001d7c <delay_ms>

    // 4-bit Modus aktivieren
    lcd_out( LCD_SET_FUNCTION |
 8001e90:	2020      	movs	r0, #32
 8001e92:	f7ff ffaf 	bl	8001df4 <lcd_out>
             LCD_FUNCTION_4BIT );
    delay_ms( LCD_SET_4BITMODE_MS );
 8001e96:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <lcd_init+0x94>)
 8001e98:	f7ff ff70 	bl	8001d7c <delay_ms>

    // 4-bit Modus / 2 Zeilen / 5x7
    lcd_command( LCD_SET_FUNCTION |
 8001e9c:	2028      	movs	r0, #40	; 0x28
 8001e9e:	f000 f833 	bl	8001f08 <lcd_command>
                 LCD_FUNCTION_4BIT |
                 LCD_FUNCTION_2LINE |
                 LCD_FUNCTION_5X7 );

    // Display ein / Cursor aus / Blinken aus
    lcd_command( LCD_SET_DISPLAY |
 8001ea2:	200c      	movs	r0, #12
 8001ea4:	f000 f830 	bl	8001f08 <lcd_command>
                 LCD_DISPLAY_ON |
                 LCD_CURSOR_OFF |
                 LCD_BLINKING_OFF);

    // Cursor inkrement / kein Scrollen
    lcd_command( LCD_SET_ENTRY |
 8001ea8:	2006      	movs	r0, #6
 8001eaa:	f000 f82d 	bl	8001f08 <lcd_command>
                 LCD_ENTRY_INCREASE |
                 LCD_ENTRY_NOSHIFT );

    lcd_clear();
 8001eae:	f000 f84b 	bl	8001f48 <lcd_clear>
}
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	48028300 	.word	0x48028300
 8001ebc:	48028200 	.word	0x48028200
 8001ec0:	00057288 	.word	0x00057288
 8001ec4:	0001c138 	.word	0x0001c138

08001ec8 <lcd_data>:

////////////////////////////////////////////////////////////////////////////////
// Sendet ein Datenbyte an das LCD
void lcd_data( uint8_t data )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
    LCD_PORT |= (1<<LCD_RS);    // RS auf 1 setzen
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <lcd_data+0x3c>)
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <lcd_data+0x3c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f043 0310 	orr.w	r3, r3, #16
 8001edc:	6013      	str	r3, [r2, #0]
    buffer_enable();
 8001ede:	f7ff ff73 	bl	8001dc8 <buffer_enable>
    lcd_out( data );            // zuerst die oberen,
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff85 	bl	8001df4 <lcd_out>
    lcd_out( data<<4 );         // dann die unteren 4 Bit senden
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff7f 	bl	8001df4 <lcd_out>

    delay_ms( LCD_WRITEDATA_US );//us
 8001ef6:	f240 404c 	movw	r0, #1100	; 0x44c
 8001efa:	f7ff ff3f 	bl	8001d7c <delay_ms>
}
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	48028300 	.word	0x48028300

08001f08 <lcd_command>:

////////////////////////////////////////////////////////////////////////////////
// Sendet einen Befehl an das LCD
void lcd_command( uint8_t data )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
    LCD_PORT &= ~(1<<LCD_RS);    // RS auf 0 setzen
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <lcd_command+0x3c>)
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <lcd_command+0x3c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0310 	bic.w	r3, r3, #16
 8001f1c:	6013      	str	r3, [r2, #0]
    buffer_enable();
 8001f1e:	f7ff ff53 	bl	8001dc8 <buffer_enable>
    lcd_out( data );             // zuerst die oberen,
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff65 	bl	8001df4 <lcd_out>
    lcd_out( data<<4 );           // dann die unteren 4 Bit senden
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <lcd_out>

    delay_ms( LCD_COMMAND_US ); //us
 8001f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3a:	f7ff ff1f 	bl	8001d7c <delay_ms>
}
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	48028300 	.word	0x48028300

08001f48 <lcd_clear>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur L�schung des Displays
void lcd_clear( void )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
    lcd_command( LCD_CLEAR_DISPLAY );
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7ff ffdb 	bl	8001f08 <lcd_command>
    delay_ms( LCD_CLEAR_DISPLAY_MS );
 8001f52:	f24b 30b0 	movw	r0, #46000	; 0xb3b0
 8001f56:	f7ff ff11 	bl	8001d7c <delay_ms>
}
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <lcd_home>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
    lcd_command( LCD_CURSOR_HOME );
 8001f60:	2002      	movs	r0, #2
 8001f62:	f7ff ffd1 	bl	8001f08 <lcd_command>
    delay_ms( LCD_CURSOR_HOME_MS );
 8001f66:	f24b 30b0 	movw	r0, #46000	; 0xb3b0
 8001f6a:	f7ff ff07 	bl	8001d7c <delay_ms>
}
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <lcd_setcursor>:

////////////////////////////////////////////////////////////////////////////////
// Setzt den Cursor in Spalte x (0..15) Zeile y (1..4)

void lcd_setcursor( uint8_t x, uint8_t y )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	460a      	mov	r2, r1
 8001f7a:	71fb      	strb	r3, [r7, #7]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	71bb      	strb	r3, [r7, #6]
    uint8_t data;

    switch (y)
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d002      	beq.n	8001f8c <lcd_setcursor+0x1c>
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d004      	beq.n	8001f94 <lcd_setcursor+0x24>
        case 2:    // 2. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
            break;

        default:
            return;                                   // f�r den Fall einer falschen Zeile
 8001f8a:	e00b      	b.n	8001fa4 <lcd_setcursor+0x34>
    uint8_t data;

    switch (y)
    {
        case 1:    // 1. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	3b80      	subs	r3, #128	; 0x80
 8001f90:	73fb      	strb	r3, [r7, #15]
            break;
 8001f92:	e003      	b.n	8001f9c <lcd_setcursor+0x2c>

        case 2:    // 2. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	3b40      	subs	r3, #64	; 0x40
 8001f98:	73fb      	strb	r3, [r7, #15]
            break;
 8001f9a:	bf00      	nop

        default:
            return;                                   // f�r den Fall einer falschen Zeile
    }

    lcd_command( data );
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffb2 	bl	8001f08 <lcd_command>
}
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop

08001fac <lcd_string>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    while( *data != '\0' )
 8001fb4:	e006      	b.n	8001fc4 <lcd_string+0x18>
        lcd_data( *data++ );
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff82 	bl	8001ec8 <lcd_data>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
    while( *data != '\0' )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f4      	bne.n	8001fb6 <lcd_string+0xa>
        lcd_data( *data++ );
}
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop

08001fd4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60da      	str	r2, [r3, #12]
}
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	60da      	str	r2, [r3, #12]
}
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
}
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	611a      	str	r2, [r3, #16]
}
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	611a      	str	r2, [r3, #16]
}
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d009      	beq.n	8002114 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8f8 	bl	8002300 <TIMER_CCU4_lInit>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop

08002120 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00c      	beq.n	800214c <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff6b 	bl	800201c <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e001      	b.n	8002150 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop

0800215c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f81d 	bl	80021a4 <TIMER_GetTimerStatus>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d011      	beq.n	8002194 <TIMER_Stop+0x38>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff53 	bl	8002034 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800218e:	2300      	movs	r3, #0
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e001      	b.n	8002198 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop

080021a4 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff18 	bl	8001ff4 <XMC_CCU4_SLICE_IsTimerRunning>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	0000      	movs	r0, r0
	...

080021d8 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffdc 	bl	80021a4 <TIMER_GetTimerStatus>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d079      	beq.n	80022ec <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d874      	bhi.n	80022ec <TIMER_SetTimeInterval+0x114>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d36f      	bcc.n	80022ec <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002210:	e002      	b.n	8002218 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3301      	adds	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	f1c2 020f 	rsb	r2, r2, #15
 8002222:	fa23 f202 	lsr.w	r2, r3, r2
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3f2      	bcc.n	8002212 <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002232:	2b00      	cmp	r3, #0
 8002234:	d15a      	bne.n	80022ec <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	b2d9      	uxtb	r1, r3
 800224c:	7913      	ldrb	r3, [r2, #4]
 800224e:	f361 0303 	bfi	r3, r1, #0, #4
 8002252:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	461a      	mov	r2, r3
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	fb02 fe01 	mul.w	lr, r2, r1
 8002268:	fb00 f603 	mul.w	r6, r0, r3
 800226c:	4476      	add	r6, lr
 800226e:	fba0 2302 	umull	r2, r3, r0, r2
 8002272:	18f1      	adds	r1, r6, r3
 8002274:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	69c9      	ldr	r1, [r1, #28]
 800227a:	7909      	ldrb	r1, [r1, #4]
 800227c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8002280:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002282:	f1c1 0620 	rsb	r6, r1, #32
 8002286:	f1a1 0020 	sub.w	r0, r1, #32
 800228a:	fa22 f401 	lsr.w	r4, r2, r1
 800228e:	fa03 f606 	lsl.w	r6, r3, r6
 8002292:	4334      	orrs	r4, r6
 8002294:	fa23 f000 	lsr.w	r0, r3, r0
 8002298:	4304      	orrs	r4, r0
 800229a:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	a315      	add	r3, pc, #84	; (adr r3, 80022f8 <TIMER_SetTimeInterval+0x120>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f003 fce0 	bl	8005c6c <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80022b0:	b292      	uxth	r2, r2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d905      	bls.n	80022ca <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fe1d 	bl	8000f1c <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f858 	bl	8002398 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	05f5e100 	.word	0x05f5e100
 80022fc:	00000000 	.word	0x00000000

08002300 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fe9d 	bl	800304c <GLOBAL_CCU4_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e1b      	ldrb	r3, [r3, #24]
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7ff fe56 	bl	8001fd4 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fdbc 	bl	8000eb0 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f82d 	bl	8002398 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00f      	beq.n	8002368 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002352:	4610      	mov	r0, r2
 8002354:	2100      	movs	r1, #0
 8002356:	461a      	mov	r2, r3
 8002358:	f7fe fdfe 	bl	8000f58 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	4618      	mov	r0, r3
 8002362:	2100      	movs	r1, #0
 8002364:	f7ff fea8 	bl	80020b8 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe6d 	bl	800204c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe47 	bl	800201c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7ff fe5a 	bl	8002064 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	4618      	mov	r0, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	f7ff fe62 	bl	8002080 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7ff fe67 	bl	800209c <XMC_CCU4_EnableShadowTransfer>
}
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60da      	str	r2, [r3, #12]
}
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	045b      	lsls	r3, r3, #17
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	615a      	str	r2, [r3, #20]
}
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop

08002418 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	60da      	str	r2, [r3, #12]
}
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	611a      	str	r2, [r3, #16]
}
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	611a      	str	r2, [r3, #16]
}
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <XMC_CCU8_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return ((uint16_t) slice->PR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	b29b      	uxth	r3, r3
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7f1b      	ldrb	r3, [r3, #28]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 809a 	bne.w	8002612 <PWM_CCU8_Init+0x14e>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fd82 	bl	8002ff0 <GLOBAL_CCU8_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 80024f0:	7dbb      	ldrb	r3, [r7, #22]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8089 	bne.w	800260a <PWM_CCU8_Init+0x146>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fded 	bl	80010e4 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	885b      	ldrh	r3, [r3, #2]
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7ff f87c 	bl	8001614 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8002524:	889b      	ldrh	r3, [r3, #4]
 8002526:	4610      	mov	r0, r2
 8002528:	2100      	movs	r1, #0
 800252a:	461a      	mov	r2, r3
 800252c:	f7ff f880 	bl	8001630 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8002538:	88db      	ldrh	r3, [r3, #6]
 800253a:	4610      	mov	r0, r2
 800253c:	2101      	movs	r1, #1
 800253e:	461a      	mov	r2, r3
 8002540:	f7ff f876 	bl	8001630 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	78db      	ldrb	r3, [r3, #3]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <PWM_CCU8_Init+0xa4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <PWM_CCU8_Init+0xb6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe fdef 	bl	8001158 <XMC_CCU8_SetMultiChannelShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7ff ff79 	bl	800247c <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff ff71 	bl	800247c <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7ff f8c2 	bl	8001730 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f957 	bl	8002860 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f834 	bl	8002620 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f8f5 	bl	80027a8 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	7b1b      	ldrb	r3, [r3, #12]
 80025d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <PWM_CCU8_Init+0x152>
      {
        status = PWM_CCU8_Start(handle_ptr);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa1e 	bl	8002a40 <PWM_CCU8_Start>
 8002604:	4603      	mov	r3, r0
 8002606:	75fb      	strb	r3, [r7, #23]
 8002608:	e005      	b.n	8002616 <PWM_CCU8_Init+0x152>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
 8002610:	e001      	b.n	8002616 <PWM_CCU8_Init+0x152>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 8002612:	2302      	movs	r3, #2
 8002614:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8002616:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU8_Init() api */
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8002630:	7c5b      	ldrb	r3, [r3, #17]
 8002632:	4610      	mov	r0, r2
 8002634:	2100      	movs	r1, #0
 8002636:	461a      	mov	r2, r3
 8002638:	f7ff f812 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8002644:	7c9b      	ldrb	r3, [r3, #18]
 8002646:	4610      	mov	r0, r2
 8002648:	2102      	movs	r1, #2
 800264a:	461a      	mov	r2, r3
 800264c:	f7ff f808 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8002658:	7cdb      	ldrb	r3, [r3, #19]
 800265a:	4610      	mov	r0, r2
 800265c:	2103      	movs	r1, #3
 800265e:	461a      	mov	r2, r3
 8002660:	f7fe fffe 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 800266c:	7d1b      	ldrb	r3, [r3, #20]
 800266e:	4610      	mov	r0, r2
 8002670:	2104      	movs	r1, #4
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe fff4 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8002680:	7d5b      	ldrb	r3, [r3, #21]
 8002682:	4610      	mov	r0, r2
 8002684:	2105      	movs	r1, #5
 8002686:	461a      	mov	r2, r3
 8002688:	f7fe ffea 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8002694:	7d9b      	ldrb	r3, [r3, #22]
 8002696:	4610      	mov	r0, r2
 8002698:	2101      	movs	r1, #1
 800269a:	461a      	mov	r2, r3
 800269c:	f7fe ffe0 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 80026a8:	7ddb      	ldrb	r3, [r3, #23]
 80026aa:	4610      	mov	r0, r2
 80026ac:	2108      	movs	r1, #8
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7fe ffd6 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 80026bc:	7e1b      	ldrb	r3, [r3, #24]
 80026be:	4610      	mov	r0, r2
 80026c0:	2109      	movs	r1, #9
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7fe ffcc 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 80026d0:	7e5b      	ldrb	r3, [r3, #25]
 80026d2:	4610      	mov	r0, r2
 80026d4:	210a      	movs	r1, #10
 80026d6:	461a      	mov	r2, r3
 80026d8:	f7fe ffc2 	bl	8001660 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	7a1b      	ldrb	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	2100      	movs	r1, #0
 80026ee:	f7ff fed3 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	7a5b      	ldrb	r3, [r3, #9]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	2102      	movs	r1, #2
 8002704:	f7ff fec8 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7a9b      	ldrb	r3, [r3, #10]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4618      	mov	r0, r3
 8002718:	2103      	movs	r1, #3
 800271a:	f7ff febd 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	7adb      	ldrb	r3, [r3, #11]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4618      	mov	r0, r3
 800272e:	2104      	movs	r1, #4
 8002730:	f7ff feb2 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	7b1b      	ldrb	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4618      	mov	r0, r3
 8002744:	2105      	movs	r1, #5
 8002746:	f7ff fea7 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	7b5b      	ldrb	r3, [r3, #13]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	2101      	movs	r1, #1
 800275c:	f7ff fe9c 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	7b9b      	ldrb	r3, [r3, #14]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4618      	mov	r0, r3
 8002770:	2108      	movs	r1, #8
 8002772:	f7ff fe91 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	7bdb      	ldrb	r3, [r3, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4618      	mov	r0, r3
 8002786:	2109      	movs	r1, #9
 8002788:	f7ff fe86 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	7c1b      	ldrb	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	210a      	movs	r1, #10
 800279e:	f7ff fe7b 	bl	8002498 <XMC_CCU8_SLICE_EnableEvent>
  }
}
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	f7fd fdf9 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00e      	beq.n	8002804 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 80027f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	f7fd fde4 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00e      	beq.n	800282e <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	f7fd fdcf 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00f      	beq.n	800285a <PWM_CCU8_lInit_GPIO+0xb2>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 800284c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	f7fd fdb9 	bl	80003cc <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af02      	add	r7, sp, #8
 8002866:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4610      	mov	r0, r2
 8002874:	2101      	movs	r1, #1
 8002876:	461a      	mov	r2, r3
 8002878:	f7fe fe62 	bl	8001540 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4610      	mov	r0, r2
 8002888:	2102      	movs	r1, #2
 800288a:	461a      	mov	r2, r3
 800288c:	f7fe fe58 	bl	8001540 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	4610      	mov	r0, r2
 800289c:	2103      	movs	r1, #3
 800289e:	461a      	mov	r2, r3
 80028a0:	f7fe fe4e 	bl	8001540 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <PWM_CCU8_lConfigure_Events+0x6e>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6899      	ldr	r1, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                               handle_ptr->config_ptr->ext_start_mode);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80028c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028c4:	4608      	mov	r0, r1
 80028c6:	4611      	mov	r1, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	f7fe fc61 	bl	8001190 <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00e      	beq.n	80028f8 <PWM_CCU8_lConfigure_Events+0x98>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
                              handle_ptr->config_ptr->ext_stop_mode);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80028ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80028ee:	4608      	mov	r0, r1
 80028f0:	4611      	mov	r1, r2
 80028f2:	461a      	mov	r2, r3
 80028f4:	f7fe fc7a 	bl	80011ec <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <PWM_CCU8_lConfigure_Events+0xb8>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe fd46 	bl	80013a4 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <PWM_CCU8_lConfigure_Events+0xd8>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f7fe fd1c 	bl	8001370 <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <PWM_CCU8_lConfigure_Events+0xf8>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe fcf2 	bl	800133c <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002960:	2b00      	cmp	r3, #0
 8002962:	d013      	beq.n	800298c <PWM_CCU8_lConfigure_Events+0x12c>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe fc66 	bl	8001244 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe fc76 	bl	8001278 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002994:	2b00      	cmp	r3, #0
 8002996:	d011      	beq.n	80029bc <PWM_CCU8_lConfigure_Events+0x15c>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6898      	ldr	r0, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80029a8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80029b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2303      	movs	r3, #3
 80029b8:	f7fe fc78 	bl	80012ac <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d11a      	bne.n	80029fe <PWM_CCU8_lConfigure_Events+0x19e>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
                              handle_ptr->config_ptr->ext_trap_sync);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80029d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	f7fe fd11 	bl	8001408 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <PWM_CCU8_lConfigure_Events+0x19e>
    {
      XMC_CCU8_SLICE_EnableTrap(
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	210f      	movs	r1, #15
 80029fa:	f7ff fcfb 	bl	80023f4 <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <PWM_CCU8_lConfigure_Events+0x1b6>
      != handle_ptr->config_ptr->ext_override_level_event))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <PWM_CCU8_lConfigure_Events+0x1da>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	4608      	mov	r0, r1
 8002a28:	4611      	mov	r1, r2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f7fe fd26 	bl	800147c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fccf 	bl	80013d8 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7f1b      	ldrb	r3, [r3, #28]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d003      	beq.n	8002a5c <PWM_CCU8_Start+0x1c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7f1b      	ldrb	r3, [r3, #28]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d117      	bne.n	8002a8c <PWM_CCU8_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7b5b      	ldrb	r3, [r3, #13]
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7ff fcb4 	bl	80023d4 <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <PWM_CCU8_Start+0x42>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fccb 	bl	8002418 <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU8_Start() api */
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop

08002a98 <PWM_CCU8_Stop>:
/**********************************************************************************************************/
/*Stops the CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_Stop(PWM_CCU8_t* handle_ptr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Stop:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7f1b      	ldrb	r3, [r3, #28]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <PWM_CCU8_Stop+0x32>
  {
    XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fcbd 	bl	8002430 <XMC_CCU8_SLICE_StopTimer>
    XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fcc4 	bl	8002448 <XMC_CCU8_SLICE_ClearTimer>

    handle_ptr->state = PWM_CCU8_STATE_STOPPED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Stop:stop PWM");
  }
  return (status);
 8002aca:	7bfb      	ldrb	r3, [r7, #15]

} /* end of PWM_CCU8_Stop() api */
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <PWM_CCU8_SetDutyCycleSymmetric>:
/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                                 uint32_t duty_cycle)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	460b      	mov	r3, r1
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	72fb      	strb	r3, [r7, #11]
  PWM_CCU8_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU8_STATUS_FAILURE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	77fb      	strb	r3, [r7, #31]
  XMC_ASSERT("PWM_CCU8_SetDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d036      	beq.n	8002b5c <PWM_CCU8_SetDutyCycleSymmetric+0x88>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU8_SYM_DUTY_MAX))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d831      	bhi.n	8002b5c <PWM_CCU8_SetDutyCycleSymmetric+0x88>
    {
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%%");
    }
    else
    {
      period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fcaf 	bl	8002460 <XMC_CCU8_SLICE_GetTimerPeriodMatch>
 8002b02:	4603      	mov	r3, r0
 8002b04:	3301      	adds	r3, #1
 8002b06:	61bb      	str	r3, [r7, #24]

      /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
      compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002b0e:	3310      	adds	r3, #16
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <PWM_CCU8_SetDutyCycleSymmetric+0x94>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0b5b      	lsrs	r3, r3, #13
 8002b1e:	617b      	str	r3, [r7, #20]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	7afa      	ldrb	r2, [r7, #11]
 8002b2a:	4608      	mov	r0, r1
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f7fe fd7e 	bl	8001630 <XMC_CCU8_SLICE_SetTimerCompareMatch>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7ff fc9c 	bl	800247c <XMC_CCU8_EnableShadowTransfer>

      if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <PWM_CCU8_SetDutyCycleSymmetric+0x7e>
      {
        handle_ptr->sym_duty1 = duty_cycle;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002b50:	e002      	b.n	8002b58 <PWM_CCU8_SetDutyCycleSymmetric+0x84>
      }
      else
      {
        handle_ptr->sym_duty2 = duty_cycle;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
      }

      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	77fb      	strb	r3, [r7, #31]
    }
  }
  return (status);
 8002b5c:	7ffb      	ldrb	r3, [r7, #31]
} /* end of PWM_CCU8_SetDutyCycleSymmetric() api */
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	d1b71759 	.word	0xd1b71759

08002b6c <PWM_CCU8_SetFreqAndDutyCycleSymmetric>:
/**********************************************************************************************************/

/*Sets the frequency and duty cycle for CCU8_CC8 slice Symmetric Mode. */
PWM_CCU8_STATUS_t PWM_CCU8_SetFreqAndDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_hz, uint32_t duty_ch1,
                                                        uint32_t duty_ch2)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  uint32_t frequency_tclk;
  uint32_t period;
  uint32_t compare_ch1;
  uint32_t compare_ch2;

  status = PWM_CCU8_STATUS_FAILURE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  frequency_tclk = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  XMC_ASSERT("PWM_CCU8_SetFreqAndDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	7f1b      	ldrb	r3, [r3, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d06c      	beq.n	8002c66 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0xfa>
  {
    if (0U == pwm_freq_hz)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d069      	beq.n	8002c66 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0xfa>
    {
      XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleSymmetric:cannot set frequency 0Hz");
    }
    else if ((duty_ch1 > PWM_CCU8_SYM_DUTY_MAX) || (duty_ch2 > PWM_CCU8_SYM_DUTY_MAX))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d864      	bhi.n	8002c66 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0xfa>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d85f      	bhi.n	8002c66 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0xfa>
    {
      XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleSymmetric:duty > 100%%");
    }
    else
    {
      frequency_tclk = handle_ptr->frequency_tclk;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	61fb      	str	r3, [r7, #28]
      period = frequency_tclk / pwm_freq_hz;
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	623b      	str	r3, [r7, #32]

      if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->timer_mode)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0x62>
      {
        period = period >> 1U;/*divide by 2*/
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	623b      	str	r3, [r7, #32]
      }

      if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d048      	beq.n	8002c66 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0xfa>
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d244      	bcs.n	8002c66 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0xfa>
      {
        /*Calculate the current duty cycle in no-timer concatenation mode*/
        compare_ch1 = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_ch1)) / PWM_CCU8_DUTY_FULL_SCALE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002be2:	3310      	adds	r3, #16
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0x108>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0b5b      	lsrs	r3, r3, #13
 8002bf2:	61bb      	str	r3, [r7, #24]
        compare_ch2 = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_ch2)) / PWM_CCU8_DUTY_FULL_SCALE);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002bfa:	3310      	adds	r3, #16
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <PWM_CCU8_SetFreqAndDutyCycleSymmetric+0x108>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0b5b      	lsrs	r3, r3, #13
 8002c0a:	617b      	str	r3, [r7, #20]

        XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fe fcfa 	bl	8001614 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
        XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f7fe fcff 	bl	8001630 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                            (uint16_t) compare_ch1);
        XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f7fe fcf6 	bl	8001630 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                            (uint16_t) compare_ch2);
        XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7ff fc14 	bl	800247c <XMC_CCU8_EnableShadowTransfer>

        handle_ptr->sym_duty1 = duty_ch1;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
        handle_ptr->sym_duty2 = duty_ch2;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28

        XMC_DEBUG("PWM_CCU8_SetFreqAndDutyCycleSymmetric:frequency set");
        status = PWM_CCU8_STATUS_SUCCESS;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    }
  }
  return (status);
 8002c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}/* end of PWM_CCU8_SetFreqAndDutyCycleSymmetric() api */
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	d1b71759 	.word	0xd1b71759

08002c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <__NVIC_GetPriorityGrouping+0x18>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c84:	0a1b      	lsrs	r3, r3, #8
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	db0b      	blt.n	8002cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <__NVIC_EnableIRQ+0x34>)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	79fa      	ldrb	r2, [r7, #7]
 8002cb0:	f002 021f 	and.w	r2, r2, #31
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db0c      	blt.n	8002cf8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cde:	4909      	ldr	r1, [pc, #36]	; (8002d04 <__NVIC_ClearPendingIRQ+0x38>)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	79fa      	ldrb	r2, [r7, #7]
 8002ce8:	f002 021f 	and.w	r2, r2, #31
 8002cec:	2001      	movs	r0, #1
 8002cee:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	490d      	ldr	r1, [pc, #52]	; (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	4909      	ldr	r1, [pc, #36]	; (8002d58 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
  }
}
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	bf28      	it	cs
 8002d7a:	2306      	movcs	r3, #6
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3306      	adds	r3, #6
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2201      	movs	r2, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002db0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	4608      	mov	r0, r1
 8002dd8:	4611      	mov	r1, r2
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f7fd faf6 	bl	80003cc <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7fda      	ldrb	r2, [r3, #31]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3314      	adds	r3, #20
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	f7fe fcb3 	bl	800175c <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	2201      	movs	r2, #1
 8002e06:	f7fe fccf 	bl	80017a8 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7f1c      	ldrb	r4, [r3, #28]
 8002e0e:	f7ff ff33 	bl	8002c78 <__NVIC_GetPriorityGrouping>
 8002e12:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002e18:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002e1e:	4608      	mov	r0, r1
 8002e20:	4611      	mov	r1, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	f7ff ff9a 	bl	8002d5c <NVIC_EncodePriority>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	b263      	sxtb	r3, r4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	4611      	mov	r1, r2
 8002e30:	f7ff ff6a 	bl	8002d08 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7f1b      	ldrb	r3, [r3, #28]
 8002e42:	b25b      	sxtb	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff41 	bl	8002ccc <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7f1b      	ldrb	r3, [r3, #28]
 8002e4e:	b25b      	sxtb	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff1f 	bl	8002c94 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <__NVIC_GetPriorityGrouping+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e6c:	0a1b      	lsrs	r3, r3, #8
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db0b      	blt.n	8002ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_EnableIRQ+0x34>)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	79fa      	ldrb	r2, [r7, #7]
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0a      	blt.n	8002ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	490d      	ldr	r1, [pc, #52]	; (8002f00 <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002edc:	e00a      	b.n	8002ef4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ede:	4909      	ldr	r1, [pc, #36]	; (8002f04 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	761a      	strb	r2, [r3, #24]
  }
}
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f1c3 0307 	rsb	r3, r3, #7
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	bf28      	it	cs
 8002f26:	2306      	movcs	r3, #6
 8002f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d902      	bls.n	8002f38 <NVIC_EncodePriority+0x30>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	e000      	b.n	8002f3a <NVIC_EncodePriority+0x32>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	401a      	ands	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	1e59      	subs	r1, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002f5c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop

08002f6c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff7e 	bl	8002e7c <__NVIC_EnableIRQ>
}
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop

08002f88 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	781c      	ldrb	r4, [r3, #0]
 8002f94:	f7ff ff64 	bl	8002e60 <__NVIC_GetPriorityGrouping>
 8002f98:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002f9e:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f7ff ffad 	bl	8002f08 <NVIC_EncodePriority>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	b263      	sxtb	r3, r4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	f7ff ff7d 	bl	8002eb4 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ffd2 	bl	8002f6c <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd90      	pop	{r4, r7, pc}
 8002fd2:	bf00      	nop

08002fd4 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe2:	60da      	str	r2, [r3, #12]
}
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7b5b      	ldrb	r3, [r3, #13]
 8002ffc:	f083 0301 	eor.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00f      	beq.n	8003026 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f7fe f849 	bl	80010a8 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ffda 	bl	8002fd4 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303e:	60da      	str	r2, [r3, #12]
}
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7b5b      	ldrb	r3, [r3, #13]
 8003058:	f083 0301 	eor.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00f      	beq.n	8003082 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7b1b      	ldrb	r3, [r3, #12]
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f7fd ff01 	bl	8000e74 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ffda 	bl	8003030 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	3310      	adds	r3, #16
 80030a0:	4619      	mov	r1, r3
 80030a2:	2301      	movs	r3, #1
 80030a4:	408b      	lsls	r3, r1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL));
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e1b      	ldrb	r3, [r3, #24]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d149      	bne.n	800315c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7fe fbe6 	bl	80018a4 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e02f      	b.n	800313e <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e6:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4608      	mov	r0, r1
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fe fc79 	bl	80019ec <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	2103      	movs	r1, #3
 8003108:	f7fe fd00 	bl	8001b0c <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	7a1b      	ldrb	r3, [r3, #8]
 8003116:	f083 0301 	eor.w	r3, r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4618      	mov	r0, r3
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	f7ff ffb0 	bl	800308c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	2200      	movs	r2, #0
 8003136:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3301      	adds	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d9cc      	bls.n	80030de <GLOBAL_ADC_Init+0x26>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7e5b      	ldrb	r3, [r3, #25]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe fbf5 	bl	8001940 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7e1b      	ldrb	r3, [r3, #24]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	60d3      	str	r3, [r2, #12]
}
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f7ff ffd6 	bl	8003168 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031bc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <SystemCoreSetup+0x94>)
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <SystemCoreSetup+0x98>)
 80031c2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031c4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80031c8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <SystemCoreSetup+0x94>)
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <SystemCoreSetup+0x94>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <SystemCoreSetup+0x9c>)
 80031dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e0:	3314      	adds	r3, #20
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f023 030f 	bic.w	r3, r3, #15
 80031ec:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f043 0303 	orr.w	r3, r3, #3
 80031f4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <SystemCoreSetup+0x9c>)
 80031f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031fc:	3314      	adds	r3, #20
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <SystemCoreSetup+0x94>)
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <SystemCoreSetup+0x94>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f023 0310 	bic.w	r3, r3, #16
 800320c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800320e:	4a0d      	ldr	r2, [pc, #52]	; (8003244 <SystemCoreSetup+0x94>)
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <SystemCoreSetup+0x94>)
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f023 0308 	bic.w	r3, r3, #8
 8003218:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SystemCoreSetup+0x94>)
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <SystemCoreSetup+0x94>)
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003224:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <SystemCoreSetup+0x94>)
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemCoreSetup+0x94>)
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003230:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <SystemCoreSetup+0x94>)
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <SystemCoreSetup+0x94>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	e000ed00 	.word	0xe000ed00
 8003248:	08000000 	.word	0x08000000
 800324c:	58001000 	.word	0x58001000

08003250 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]

  return (status);
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <OSCHP_GetFrequency+0x10>)
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	00b71b00 	.word	0x00b71b00

08003284 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <SystemCoreClockSetup+0x54>)
 800328c:	1d3c      	adds	r4, r7, #4
 800328e:	461d      	mov	r5, r3
 8003290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f984 	bl	80005a8 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd fa75 	bl	8000790 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fa2a 	bl	8000700 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80032ac:	2004      	movs	r0, #4
 80032ae:	f7fd fafb 	bl	80008a8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80032b2:	f7fd fb45 	bl	8000940 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80032b6:	2001      	movs	r0, #1
 80032b8:	2120      	movs	r1, #32
 80032ba:	f7fd fb51 	bl	8000960 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fa32 	bl	8000728 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7fd fb17 	bl	80008f8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7fd fb00 	bl	80008d0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	080086b8 	.word	0x080086b8

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032e8:	0a1b      	lsrs	r3, r3, #8
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	4908      	ldr	r1, [pc, #32]	; (800332c <__NVIC_EnableIRQ+0x34>)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	79fa      	ldrb	r2, [r7, #7]
 8003314:	f002 021f 	and.w	r2, r2, #31
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	490d      	ldr	r1, [pc, #52]	; (800337c <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	4909      	ldr	r1, [pc, #36]	; (8003380 <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
  }
}
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b06      	cmp	r3, #6
 80033a0:	bf28      	it	cs
 80033a2:	2306      	movcs	r3, #6
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3306      	adds	r3, #6
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	401a      	ands	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	1e59      	subs	r1, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80033d8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80033f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop

0800340c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
    const uint32_t grp_num,
    const uint32_t ch_num)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number", ((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	3260      	adds	r2, #96	; 0x60
 800341e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	ea42 0103 	orr.w	r1, r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	3260      	adds	r2, #96	; 0x60
 8003434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop

08003444 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg_num,
    const XMC_VADC_RESULT_CONFIG_t *config)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	32a0      	adds	r2, #160	; 0xa0
 800345a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr,
    const uint32_t res_reg)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	32c0      	adds	r2, #192	; 0xc0
 8003478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347c:	b29b      	uxth	r3, r3
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop

0800348c <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL));

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f040 8099 	bne.w	80035d0 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fe08 	bl	80030b8 <GLOBAL_ADC_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4610      	mov	r0, r2
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2300      	movs	r3, #0
 80034be:	f7fe fa1b 	bl	80018f8 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
                                      XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fe fb38 	bl	8001b44 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	e02e      	b.n	8003538 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e4:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	7b5b      	ldrb	r3, [r3, #13]
 80034ee:	4619      	mov	r1, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4610      	mov	r0, r2
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7fe fba2 	bl	8001c40 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	789b      	ldrb	r3, [r3, #2]
 8003506:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
                                indexed->res_handle);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8003512:	4610      	mov	r0, r2
 8003514:	461a      	mov	r2, r3
 8003516:	f7ff ff95 	bl	8003444 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8003524:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800352a:	4610      	mov	r0, r2
 800352c:	461a      	mov	r2, r3
 800352e:	f7ff ff6d 	bl	800340c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	3301      	adds	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0cd      	beq.n	80034da <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	7a1b      	ldrb	r3, [r3, #8]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02c      	beq.n	80035a8 <ADC_MEASUREMENT_Init+0x11c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d028      	beq.n	80035a8 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b2dc      	uxtb	r4, r3
 800355e:	f7ff febd 	bl	80032dc <__NVIC_GetPriorityGrouping>
 8003562:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8003568:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff ff05 	bl	8003384 <NVIC_EncodePriority>
 800357a:	4602      	mov	r2, r0
 800357c:	b263      	sxtb	r3, r4
 800357e:	4618      	mov	r0, r3
 8003580:	4611      	mov	r1, r2
 8003582:	f7ff fed5 	bl	8003330 <__NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7e5b      	ldrb	r3, [r3, #25]
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	f7fe fa06 	bl	80019a4 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
                                                 (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fea8 	bl	80032f8 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <ADC_MEASUREMENT_Init+0x12a>
    {
      (handle_ptr->mux_config)();
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7e9b      	ldrb	r3, [r3, #26]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff0f 	bl	80033e8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7bba      	ldrb	r2, [r7, #14]
 80035ce:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7e1b      	ldrb	r3, [r3, #24]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}

080035dc <ADC_MEASUREMENT_StartConversion>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/* This API will Software trigger ADC Background request source and starts conversion*/
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL));

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fefc 	bl	80033e8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop

080035f8 <ADC_MEASUREMENT_GetResult>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL));

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	789b      	ldrb	r3, [r3, #2]
 800360a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800360e:	b2db      	uxtb	r3, r3
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	f7ff ff28 	bl	8003468 <XMC_VADC_GROUP_GetResult>
 8003618:	4603      	mov	r3, r0
 800361a:	81fb      	strh	r3, [r7, #14]

  return (result);
 800361c:	89fb      	ldrh	r3, [r7, #14]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop

08003628 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800362e:	2300      	movs	r3, #0
 8003630:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003632:	482d      	ldr	r0, [pc, #180]	; (80036e8 <DAVE_Init+0xc0>)
 8003634:	f7ff fe0c 	bl	8003250 <CLOCK_XMC4_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <DAVE_Init+0x24>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
 8003642:	482a      	ldr	r0, [pc, #168]	; (80036ec <DAVE_Init+0xc4>)
 8003644:	f7ff ff22 	bl	800348c <ADC_MEASUREMENT_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8003652:	4827      	ldr	r0, [pc, #156]	; (80036f0 <DAVE_Init+0xc8>)
 8003654:	f7fe fd46 	bl	80020e4 <TIMER_Init>
 8003658:	4603      	mov	r3, r0
 800365a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <DAVE_Init+0x44>
  {
	 /**  Initialization of TIMER APP instance TIMER_1 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1); 
 8003662:	4824      	ldr	r0, [pc, #144]	; (80036f4 <DAVE_Init+0xcc>)
 8003664:	f7fe fd3e 	bl	80020e4 <TIMER_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8003672:	4821      	ldr	r0, [pc, #132]	; (80036f8 <DAVE_Init+0xd0>)
 8003674:	f7ff fc88 	bl	8002f88 <INTERRUPT_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <DAVE_Init+0x64>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 8003682:	481e      	ldr	r0, [pc, #120]	; (80036fc <DAVE_Init+0xd4>)
 8003684:	f7fe ff1e 	bl	80024c4 <PWM_CCU8_Init>
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_1 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_1); 
 8003692:	481b      	ldr	r0, [pc, #108]	; (8003700 <DAVE_Init+0xd8>)
 8003694:	f7fe ff16 	bl	80024c4 <PWM_CCU8_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_2 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_2); 
 80036a2:	4818      	ldr	r0, [pc, #96]	; (8003704 <DAVE_Init+0xdc>)
 80036a4:	f7fe ff0e 	bl	80024c4 <PWM_CCU8_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <DAVE_Init+0x94>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0); 
 80036b2:	4815      	ldr	r0, [pc, #84]	; (8003708 <DAVE_Init+0xe0>)
 80036b4:	f7ff fb84 	bl	8002dc0 <PIN_INTERRUPT_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <DAVE_Init+0xa4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_1); 
 80036c2:	4812      	ldr	r0, [pc, #72]	; (800370c <DAVE_Init+0xe4>)
 80036c4:	f7ff fb7c 	bl	8002dc0 <PIN_INTERRUPT_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <DAVE_Init+0xb4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_2 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_2); 
 80036d2:	480f      	ldr	r0, [pc, #60]	; (8003710 <DAVE_Init+0xe8>)
 80036d4:	f7ff fb74 	bl	8002dc0 <PIN_INTERRUPT_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80036dc:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200002c4 	.word	0x200002c4
 80036ec:	20000188 	.word	0x20000188
 80036f0:	20000008 	.word	0x20000008
 80036f4:	20000038 	.word	0x20000038
 80036f8:	0800864c 	.word	0x0800864c
 80036fc:	20000060 	.word	0x20000060
 8003700:	20000094 	.word	0x20000094
 8003704:	200000c8 	.word	0x200000c8
 8003708:	080085e0 	.word	0x080085e0
 800370c:	08008604 	.word	0x08008604
 8003710:	08008628 	.word	0x08008628

08003714 <write_display>:

  bool pin_status_bremsen = false;
  bool current_index_status = false;

void write_display()
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af02      	add	r7, sp, #8
	 char str1[40] = {"U:"};
 800371a:	f643 2355 	movw	r3, #14933	; 0x3a55
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	3304      	adds	r3, #4
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	3304      	adds	r3, #4
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	3304      	adds	r3, #4
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	3304      	adds	r3, #4
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	3304      	adds	r3, #4
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	3304      	adds	r3, #4
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	3304      	adds	r3, #4
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	3304      	adds	r3, #4
	 snprintf(str2, 6,"%f", U_1);
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <write_display+0xf4>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	e9cd 2300 	strd	r2, r3, [sp]
 8003762:	482a      	ldr	r0, [pc, #168]	; (800380c <write_display+0xf8>)
 8003764:	2106      	movs	r1, #6
 8003766:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <write_display+0xfc>)
 8003768:	f003 fa1a 	bl	8006ba0 <sniprintf>
	 strcat(str1,str2);
 800376c:	463b      	mov	r3, r7
 800376e:	4618      	mov	r0, r3
 8003770:	4926      	ldr	r1, [pc, #152]	; (800380c <write_display+0xf8>)
 8003772:	f003 fa47 	bl	8006c04 <strcat>


	 snprintf(str5, 5, "%f", f_1);
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <write_display+0x100>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	e9cd 2300 	strd	r2, r3, [sp]
 8003780:	4825      	ldr	r0, [pc, #148]	; (8003818 <write_display+0x104>)
 8003782:	2105      	movs	r1, #5
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <write_display+0xfc>)
 8003786:	f003 fa0b 	bl	8006ba0 <sniprintf>
	 snprintf(str7, 5, "%f", f_aktuell);
 800378a:	4b24      	ldr	r3, [pc, #144]	; (800381c <write_display+0x108>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	e9cd 2300 	strd	r2, r3, [sp]
 8003794:	4822      	ldr	r0, [pc, #136]	; (8003820 <write_display+0x10c>)
 8003796:	2105      	movs	r1, #5
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <write_display+0xfc>)
 800379a:	f003 fa01 	bl	8006ba0 <sniprintf>
	 strcat(str1,str4);
 800379e:	463b      	mov	r3, r7
 80037a0:	4618      	mov	r0, r3
 80037a2:	4920      	ldr	r1, [pc, #128]	; (8003824 <write_display+0x110>)
 80037a4:	f003 fa2e 	bl	8006c04 <strcat>
	 strcat(str1,str7);
 80037a8:	463b      	mov	r3, r7
 80037aa:	4618      	mov	r0, r3
 80037ac:	491c      	ldr	r1, [pc, #112]	; (8003820 <write_display+0x10c>)
 80037ae:	f003 fa29 	bl	8006c04 <strcat>
	 strcat(str1,str6);
 80037b2:	463b      	mov	r3, r7
 80037b4:	4618      	mov	r0, r3
 80037b6:	491c      	ldr	r1, [pc, #112]	; (8003828 <write_display+0x114>)
 80037b8:	f003 fa24 	bl	8006c04 <strcat>
	 strcat(str1,str5);
 80037bc:	463b      	mov	r3, r7
 80037be:	4618      	mov	r0, r3
 80037c0:	4915      	ldr	r1, [pc, #84]	; (8003818 <write_display+0x104>)
 80037c2:	f003 fa1f 	bl	8006c04 <strcat>
	 strcat(str1,str_dreh);
 80037c6:	463b      	mov	r3, r7
 80037c8:	4618      	mov	r0, r3
 80037ca:	4918      	ldr	r1, [pc, #96]	; (800382c <write_display+0x118>)
 80037cc:	f003 fa1a 	bl	8006c04 <strcat>
	 if(!current_index_status)
 80037d0:	4b17      	ldr	r3, [pc, #92]	; (8003830 <write_display+0x11c>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <write_display+0xd6>
	 {
		 strcat(str1,str_p);
 80037de:	463b      	mov	r3, r7
 80037e0:	4618      	mov	r0, r3
 80037e2:	4914      	ldr	r1, [pc, #80]	; (8003834 <write_display+0x120>)
 80037e4:	f003 fa0e 	bl	8006c04 <strcat>
 80037e8:	e004      	b.n	80037f4 <write_display+0xe0>
	 }
	 else
	 {
		 strcat(str1,str_m);
 80037ea:	463b      	mov	r3, r7
 80037ec:	4618      	mov	r0, r3
 80037ee:	4912      	ldr	r1, [pc, #72]	; (8003838 <write_display+0x124>)
 80037f0:	f003 fa08 	bl	8006c04 <strcat>
	 }

	 //strcat(str1,str5);

	 lcd_home(); // cursor in die 1. Zeile
 80037f4:	f7fe fbb2 	bl	8001f5c <lcd_home>
	 lcd_string(str1);
 80037f8:	463b      	mov	r3, r7
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fbd6 	bl	8001fac <lcd_string>

}
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000b50 	.word	0x20000b50
 800380c:	20000b48 	.word	0x20000b48
 8003810:	080086e8 	.word	0x080086e8
 8003814:	20000b10 	.word	0x20000b10
 8003818:	20000b28 	.word	0x20000b28
 800381c:	200002d0 	.word	0x200002d0
 8003820:	20000300 	.word	0x20000300
 8003824:	20000208 	.word	0x20000208
 8003828:	20000210 	.word	0x20000210
 800382c:	200001e4 	.word	0x200001e4
 8003830:	200002db 	.word	0x200002db
 8003834:	200001f0 	.word	0x200001f0
 8003838:	200001f4 	.word	0x200001f4
 800383c:	00000000 	.word	0x00000000

08003840 <change_frequency>:
void change_frequency()
{
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	af00      	add	r7, sp, #0
	 f_diff = f_aktuell-f_1;
 8003844:	4bae      	ldr	r3, [pc, #696]	; (8003b00 <change_frequency+0x2c0>)
 8003846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800384a:	4bae      	ldr	r3, [pc, #696]	; (8003b04 <change_frequency+0x2c4>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f001 fd76 	bl	8005340 <__aeabi_dsub>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	49ab      	ldr	r1, [pc, #684]	; (8003b08 <change_frequency+0x2c8>)
 800385a:	e9c1 2300 	strd	r2, r3, [r1]
	 if ((f_diff >= -1) && (f_diff <= 1))
 800385e:	4baa      	ldr	r3, [pc, #680]	; (8003b08 <change_frequency+0x2c8>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4ba7      	ldr	r3, [pc, #668]	; (8003b0c <change_frequency+0x2cc>)
 800386e:	f002 f9a1 	bl	8005bb4 <__aeabi_dcmpge>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d041      	beq.n	80038fc <change_frequency+0xbc>
 8003878:	4ba3      	ldr	r3, [pc, #652]	; (8003b08 <change_frequency+0x2c8>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	4ba2      	ldr	r3, [pc, #648]	; (8003b10 <change_frequency+0x2d0>)
 8003888:	f002 f98a 	bl	8005ba0 <__aeabi_dcmple>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d034      	beq.n	80038fc <change_frequency+0xbc>
	 {
		 time_sample = 1/f_1 * 1000000 * 100; // frequenz vom sinus * anzahl an werte
 8003892:	4b9c      	ldr	r3, [pc, #624]	; (8003b04 <change_frequency+0x2c4>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f04f 0000 	mov.w	r0, #0
 800389c:	499c      	ldr	r1, [pc, #624]	; (8003b10 <change_frequency+0x2d0>)
 800389e:	f002 f82d 	bl	80058fc <__aeabi_ddiv>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	a38f      	add	r3, pc, #572	; (adr r3, 8003ae8 <change_frequency+0x2a8>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f001 fefa 	bl	80056a8 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	4b94      	ldr	r3, [pc, #592]	; (8003b14 <change_frequency+0x2d4>)
 80038c2:	f001 fef1 	bl	80056a8 <__aeabi_dmul>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4993      	ldr	r1, [pc, #588]	; (8003b18 <change_frequency+0x2d8>)
 80038cc:	e9c1 2300 	strd	r2, r3, [r1]
		 time_sample = time_sample/256;
 80038d0:	4b91      	ldr	r3, [pc, #580]	; (8003b18 <change_frequency+0x2d8>)
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <change_frequency+0x2dc>)
 80038e0:	f002 f80c 	bl	80058fc <__aeabi_ddiv>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	498b      	ldr	r1, [pc, #556]	; (8003b18 <change_frequency+0x2d8>)
 80038ea:	e9c1 2300 	strd	r2, r3, [r1]
		 f_aktuell = f_1;
 80038ee:	4b85      	ldr	r3, [pc, #532]	; (8003b04 <change_frequency+0x2c4>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	4982      	ldr	r1, [pc, #520]	; (8003b00 <change_frequency+0x2c0>)
 80038f6:	e9c1 2300 	strd	r2, r3, [r1]
 80038fa:	e05a      	b.n	80039b2 <change_frequency+0x172>
	 }
	 else
	 {
		if(f_diff > 0)
 80038fc:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <change_frequency+0x2c8>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f002 f95b 	bl	8005bc8 <__aeabi_dcmpgt>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00f      	beq.n	8003938 <change_frequency+0xf8>
		{
			f_aktuell = f_aktuell - 1;
 8003918:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <change_frequency+0x2c0>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	4b7a      	ldr	r3, [pc, #488]	; (8003b10 <change_frequency+0x2d0>)
 8003928:	f001 fd0a 	bl	8005340 <__aeabi_dsub>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4973      	ldr	r1, [pc, #460]	; (8003b00 <change_frequency+0x2c0>)
 8003932:	e9c1 2300 	strd	r2, r3, [r1]
 8003936:	e00e      	b.n	8003956 <change_frequency+0x116>
		}
		else 	// (f_diff < 0)
		{
			f_aktuell = f_aktuell + 1;
 8003938:	4b71      	ldr	r3, [pc, #452]	; (8003b00 <change_frequency+0x2c0>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	4b72      	ldr	r3, [pc, #456]	; (8003b10 <change_frequency+0x2d0>)
 8003948:	f001 fcfc 	bl	8005344 <__adddf3>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	496b      	ldr	r1, [pc, #428]	; (8003b00 <change_frequency+0x2c0>)
 8003952:	e9c1 2300 	strd	r2, r3, [r1]
		}
		time_sample = (1/f_aktuell) * 1000000 * 100; // wenn frequenz änderung zu hoch ist wird nur um 1Hz erhöht 1/(f*1)*100*0.0000001*anzahl_sin_werte
 8003956:	4b6a      	ldr	r3, [pc, #424]	; (8003b00 <change_frequency+0x2c0>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f04f 0000 	mov.w	r0, #0
 8003960:	496b      	ldr	r1, [pc, #428]	; (8003b10 <change_frequency+0x2d0>)
 8003962:	f001 ffcb 	bl	80058fc <__aeabi_ddiv>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	a35e      	add	r3, pc, #376	; (adr r3, 8003ae8 <change_frequency+0x2a8>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f001 fe98 	bl	80056a8 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <change_frequency+0x2d4>)
 8003986:	f001 fe8f 	bl	80056a8 <__aeabi_dmul>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4962      	ldr	r1, [pc, #392]	; (8003b18 <change_frequency+0x2d8>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
		time_sample = time_sample/256;
 8003994:	4b60      	ldr	r3, [pc, #384]	; (8003b18 <change_frequency+0x2d8>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <change_frequency+0x2dc>)
 80039a4:	f001 ffaa 	bl	80058fc <__aeabi_ddiv>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	495a      	ldr	r1, [pc, #360]	; (8003b18 <change_frequency+0x2d8>)
 80039ae:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  TIMER_Stop(&TIMER_1);
 80039b2:	485b      	ldr	r0, [pc, #364]	; (8003b20 <change_frequency+0x2e0>)
 80039b4:	f7fe fbd2 	bl	800215c <TIMER_Stop>
	  TIMER_SetTimeInterval(&TIMER_1, (uint32_t) time_sample);
 80039b8:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <change_frequency+0x2d8>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f002 f933 	bl	8005c2c <__aeabi_d2uiz>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4855      	ldr	r0, [pc, #340]	; (8003b20 <change_frequency+0x2e0>)
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7fe fc04 	bl	80021d8 <TIMER_SetTimeInterval>
	  TIMER_Start(&TIMER_1);
 80039d0:	4853      	ldr	r0, [pc, #332]	; (8003b20 <change_frequency+0x2e0>)
 80039d2:	f7fe fba5 	bl	8002120 <TIMER_Start>

	  if(pin_status_bremsen && f_1 == f_aktuell)
 80039d6:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <change_frequency+0x2e4>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d039      	beq.n	8003a52 <change_frequency+0x212>
 80039de:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <change_frequency+0x2c4>)
 80039e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <change_frequency+0x2c0>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f002 f8c5 	bl	8005b78 <__aeabi_dcmpeq>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02e      	beq.n	8003a52 <change_frequency+0x212>
	  {
		  //TIMER_Stop(&TIMER_0);
		  current_index_status = !current_index_status;
 80039f4:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <change_frequency+0x2e8>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f083 0301 	eor.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <change_frequency+0x2e8>)
 8003a10:	701a      	strb	r2, [r3, #0]
		  if(current_index_status)
 8003a12:	4b45      	ldr	r3, [pc, #276]	; (8003b28 <change_frequency+0x2e8>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <change_frequency+0x1f4>
		  {
			  index_count_2 = index_count_2 - 86;
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <change_frequency+0x2ec>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	3b56      	subs	r3, #86	; 0x56
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <change_frequency+0x2ec>)
 8003a24:	701a      	strb	r2, [r3, #0]
			  index_count_3 = index_count_3 + 86;
 8003a26:	4b42      	ldr	r3, [pc, #264]	; (8003b30 <change_frequency+0x2f0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	3356      	adds	r3, #86	; 0x56
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <change_frequency+0x2f0>)
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e00b      	b.n	8003a4c <change_frequency+0x20c>
		  }
		  else
		  {
			  index_count_2 = index_count_2 + 86;
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <change_frequency+0x2ec>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	3356      	adds	r3, #86	; 0x56
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <change_frequency+0x2ec>)
 8003a3e:	701a      	strb	r2, [r3, #0]
			  index_count_3 = index_count_3 - 86;
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <change_frequency+0x2f0>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	3b56      	subs	r3, #86	; 0x56
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b39      	ldr	r3, [pc, #228]	; (8003b30 <change_frequency+0x2f0>)
 8003a4a:	701a      	strb	r2, [r3, #0]
		  }
		  pin_status_bremsen = false;
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <change_frequency+0x2e4>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
		  //Timer_Start(&TIMER_0);
	  }

	  if (f_aktuell < 50)
 8003a52:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <change_frequency+0x2c0>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <change_frequency+0x2f4>)
 8003a62:	f002 f893 	bl	8005b8c <__aeabi_dcmplt>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d035      	beq.n	8003ad8 <change_frequency+0x298>
	  {
	  	U_1 = (U_N*0.9/50)*(f_aktuell) + U_N*0.1;
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <change_frequency+0x2f8>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	a31e      	add	r3, pc, #120	; (adr r3, 8003af0 <change_frequency+0x2b0>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f001 fe14 	bl	80056a8 <__aeabi_dmul>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <change_frequency+0x2f4>)
 8003a8e:	f001 ff35 	bl	80058fc <__aeabi_ddiv>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <change_frequency+0x2c0>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f001 fe02 	bl	80056a8 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	461d      	mov	r5, r3
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <change_frequency+0x2f8>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	a310      	add	r3, pc, #64	; (adr r3, 8003af8 <change_frequency+0x2b8>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f001 fdf4 	bl	80056a8 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f001 fc3c 	bl	8005344 <__adddf3>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	491a      	ldr	r1, [pc, #104]	; (8003b3c <change_frequency+0x2fc>)
 8003ad2:	e9c1 2300 	strd	r2, r3, [r1]
 8003ad6:	e005      	b.n	8003ae4 <change_frequency+0x2a4>
	  }
	  else
	  {
		U_1 = 120;
 8003ad8:	4918      	ldr	r1, [pc, #96]	; (8003b3c <change_frequency+0x2fc>)
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <change_frequency+0x300>)
 8003ae0:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  //write_display();
}
 8003ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	412e8480 	.word	0x412e8480
 8003af0:	cccccccd 	.word	0xcccccccd
 8003af4:	3feccccc 	.word	0x3feccccc
 8003af8:	9999999a 	.word	0x9999999a
 8003afc:	3fb99999 	.word	0x3fb99999
 8003b00:	200002d0 	.word	0x200002d0
 8003b04:	20000b10 	.word	0x20000b10
 8003b08:	20000b30 	.word	0x20000b30
 8003b0c:	bff00000 	.word	0xbff00000
 8003b10:	3ff00000 	.word	0x3ff00000
 8003b14:	40590000 	.word	0x40590000
 8003b18:	20000b18 	.word	0x20000b18
 8003b1c:	40700000 	.word	0x40700000
 8003b20:	20000038 	.word	0x20000038
 8003b24:	200002da 	.word	0x200002da
 8003b28:	200002db 	.word	0x200002db
 8003b2c:	200001f8 	.word	0x200001f8
 8003b30:	200001f9 	.word	0x200001f9
 8003b34:	40490000 	.word	0x40490000
 8003b38:	20000200 	.word	0x20000200
 8003b3c:	20000b50 	.word	0x20000b50
 8003b40:	405e0000 	.word	0x405e0000
 8003b44:	f3af 8000 	nop.w

08003b48 <VADC0_C0_2_IRQHandler>:

void Adc_Measurement_Handler()
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
#if(UC_SERIES != XMC11)

  result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 8003b4c:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <VADC0_C0_2_IRQHandler+0x7c>)
 8003b4e:	f7ff fd53 	bl	80035f8 <ADC_MEASUREMENT_GetResult>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <VADC0_C0_2_IRQHandler+0x80>)
 8003b58:	801a      	strh	r2, [r3, #0]
#else
  result = ADC_MEASUREMENT_GetGlobalResult();
#endif
  	 //result = 100;
  	 if(pin_status1)
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <VADC0_C0_2_IRQHandler+0x84>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01c      	beq.n	8003b9c <VADC0_C0_2_IRQHandler+0x54>
  	 {
  		 f_1 = (99.5/1024) * result + 0.5;  // frequenz start bei 0.5Hz
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <VADC0_C0_2_IRQHandler+0x80>)
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 fd38 	bl	80055dc <__aeabi_i2d>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <VADC0_C0_2_IRQHandler+0x88>)
 8003b7a:	f001 fd95 	bl	80056a8 <__aeabi_dmul>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <VADC0_C0_2_IRQHandler+0x8c>)
 8003b8c:	f001 fbda 	bl	8005344 <__adddf3>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4910      	ldr	r1, [pc, #64]	; (8003bd8 <VADC0_C0_2_IRQHandler+0x90>)
 8003b96:	e9c1 2300 	strd	r2, r3, [r1]
 8003b9a:	e005      	b.n	8003ba8 <VADC0_C0_2_IRQHandler+0x60>
  	 }
  	 else
  	 {
  		 f_1 = 0.5;
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <VADC0_C0_2_IRQHandler+0x90>)
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <VADC0_C0_2_IRQHandler+0x8c>)
 8003ba4:	e9c1 2300 	strd	r2, r3, [r1]
  	 }

  	 if(pin_status_bremsen)
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <VADC0_C0_2_IRQHandler+0x94>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <VADC0_C0_2_IRQHandler+0x74>
  	 {
  		 f_1 = 0.5;
 8003bb0:	4909      	ldr	r1, [pc, #36]	; (8003bd8 <VADC0_C0_2_IRQHandler+0x90>)
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <VADC0_C0_2_IRQHandler+0x8c>)
 8003bb8:	e9c1 2300 	strd	r2, r3, [r1]
  	 }
     change_frequency();
 8003bbc:	f7ff fe40 	bl	8003840 <change_frequency>
}
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000174 	.word	0x20000174
 8003bc8:	20000b44 	.word	0x20000b44
 8003bcc:	200002d8 	.word	0x200002d8
 8003bd0:	3fb8e000 	.word	0x3fb8e000
 8003bd4:	3fe00000 	.word	0x3fe00000
 8003bd8:	20000b10 	.word	0x20000b10
 8003bdc:	200002da 	.word	0x200002da

08003be0 <sinus_dreieck_vergleich>:
double p1 = 0;
double p2 = 0;
double p3 = 0;

void sinus_dreieck_vergleich()
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
	p1 = ((U_u*U_1)/120 + 1)*10000/2;
 8003be4:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <sinus_dreieck_vergleich+0x1e0>)
 8003be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <sinus_dreieck_vergleich+0x1e4>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f001 fd5a 	bl	80056a8 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	4b71      	ldr	r3, [pc, #452]	; (8003dc8 <sinus_dreieck_vergleich+0x1e8>)
 8003c02:	f001 fe7b 	bl	80058fc <__aeabi_ddiv>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <sinus_dreieck_vergleich+0x1ec>)
 8003c14:	f001 fb96 	bl	8005344 <__adddf3>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	a365      	add	r3, pc, #404	; (adr r3, 8003db8 <sinus_dreieck_vergleich+0x1d8>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f001 fd3f 	bl	80056a8 <__aeabi_dmul>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3a:	f001 fe5f 	bl	80058fc <__aeabi_ddiv>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4963      	ldr	r1, [pc, #396]	; (8003dd0 <sinus_dreieck_vergleich+0x1f0>)
 8003c44:	e9c1 2300 	strd	r2, r3, [r1]
	p2 = ((U_v*U_1)/120 + 1)*10000/2;
 8003c48:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <sinus_dreieck_vergleich+0x1f4>)
 8003c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <sinus_dreieck_vergleich+0x1e4>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f001 fd28 	bl	80056a8 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <sinus_dreieck_vergleich+0x1e8>)
 8003c66:	f001 fe49 	bl	80058fc <__aeabi_ddiv>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <sinus_dreieck_vergleich+0x1ec>)
 8003c78:	f001 fb64 	bl	8005344 <__adddf3>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	a34c      	add	r3, pc, #304	; (adr r3, 8003db8 <sinus_dreieck_vergleich+0x1d8>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f001 fd0d 	bl	80056a8 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c9e:	f001 fe2d 	bl	80058fc <__aeabi_ddiv>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	494c      	ldr	r1, [pc, #304]	; (8003dd8 <sinus_dreieck_vergleich+0x1f8>)
 8003ca8:	e9c1 2300 	strd	r2, r3, [r1]
	p3 = ((U_w*U_1)/120 + 1)*10000/2;
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <sinus_dreieck_vergleich+0x1fc>)
 8003cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb2:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <sinus_dreieck_vergleich+0x1e4>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f001 fcf6 	bl	80056a8 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <sinus_dreieck_vergleich+0x1e8>)
 8003cca:	f001 fe17 	bl	80058fc <__aeabi_ddiv>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <sinus_dreieck_vergleich+0x1ec>)
 8003cdc:	f001 fb32 	bl	8005344 <__adddf3>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	a333      	add	r3, pc, #204	; (adr r3, 8003db8 <sinus_dreieck_vergleich+0x1d8>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f001 fcdb 	bl	80056a8 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d02:	f001 fdfb 	bl	80058fc <__aeabi_ddiv>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4935      	ldr	r1, [pc, #212]	; (8003de0 <sinus_dreieck_vergleich+0x200>)
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]

	//PWM_CCU8_STATUS(&PWM_CCU8_0);

	//DC_Bremsen
	  if (!pin_status2)
 8003d10:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <sinus_dreieck_vergleich+0x204>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f083 0301 	eor.w	r3, r3, #1
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d027      	beq.n	8003d6e <sinus_dreieck_vergleich+0x18e>
	  {
		  // ganz normaler Betrieb
		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint32_t) p1);
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <sinus_dreieck_vergleich+0x1f0>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f001 ff80 	bl	8005c2c <__aeabi_d2uiz>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	482e      	ldr	r0, [pc, #184]	; (8003de8 <sinus_dreieck_vergleich+0x208>)
 8003d30:	2100      	movs	r1, #0
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7fe fece 	bl	8002ad4 <PWM_CCU8_SetDutyCycleSymmetric>
		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_1, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint32_t) p2);
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <sinus_dreieck_vergleich+0x1f8>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	f001 ff73 	bl	8005c2c <__aeabi_d2uiz>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4828      	ldr	r0, [pc, #160]	; (8003dec <sinus_dreieck_vergleich+0x20c>)
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f7fe fec1 	bl	8002ad4 <PWM_CCU8_SetDutyCycleSymmetric>
		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_2, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, (uint32_t) p3);
 8003d52:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <sinus_dreieck_vergleich+0x200>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f001 ff66 	bl	8005c2c <__aeabi_d2uiz>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4823      	ldr	r0, [pc, #140]	; (8003df0 <sinus_dreieck_vergleich+0x210>)
 8003d64:	2100      	movs	r1, #0
 8003d66:	461a      	mov	r2, r3
 8003d68:	f7fe feb4 	bl	8002ad4 <PWM_CCU8_SetDutyCycleSymmetric>
 8003d6c:	e023      	b.n	8003db6 <sinus_dreieck_vergleich+0x1d6>
	  }
	  else
	  {
		//DC_Bremsen
		  //PWM_Start(&PWM_CCU8_0);
		  PWM_CCU8_SetFreqAndDutyCycleSymmetric(&PWM_CCU8_0, f, 10000,0);
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <sinus_dreieck_vergleich+0x214>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	481d      	ldr	r0, [pc, #116]	; (8003de8 <sinus_dreieck_vergleich+0x208>)
 8003d74:	4619      	mov	r1, r3
 8003d76:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f7fe fef6 	bl	8002b6c <PWM_CCU8_SetFreqAndDutyCycleSymmetric>
		  //PWM_Start(&PWM_CCU8_1);
		  PWM_CCU8_SetFreqAndDutyCycleSymmetric(&PWM_CCU8_1, f, d2_DC,0);
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <sinus_dreieck_vergleich+0x214>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <sinus_dreieck_vergleich+0x218>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4818      	ldr	r0, [pc, #96]	; (8003dec <sinus_dreieck_vergleich+0x20c>)
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f7fe feec 	bl	8002b6c <PWM_CCU8_SetFreqAndDutyCycleSymmetric>
		 // PWM_Start(&PWM_CCU8_2);
		  PWM_CCU8_SetFreqAndDutyCycleSymmetric(&PWM_CCU8_2, f, d3_DC,0);
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <sinus_dreieck_vergleich+0x214>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <sinus_dreieck_vergleich+0x21c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4814      	ldr	r0, [pc, #80]	; (8003df0 <sinus_dreieck_vergleich+0x210>)
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	f7fe fee2 	bl	8002b6c <PWM_CCU8_SetFreqAndDutyCycleSymmetric>

		  f_aktuell = 0;
 8003da8:	4915      	ldr	r1, [pc, #84]	; (8003e00 <sinus_dreieck_vergleich+0x220>)
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9c1 2300 	strd	r2, r3, [r1]

	/*PWM_CCU8_Start(&PWM_CCU8_0);
	PWM_CCU8_Start(&PWM_CCU8_1);
	PWM_CCU8_Start(&PWM_CCU8_2);
*/
}
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	00000000 	.word	0x00000000
 8003dbc:	40c38800 	.word	0x40c38800
 8003dc0:	20000b38 	.word	0x20000b38
 8003dc4:	20000b50 	.word	0x20000b50
 8003dc8:	405e0000 	.word	0x405e0000
 8003dcc:	3ff00000 	.word	0x3ff00000
 8003dd0:	200002e0 	.word	0x200002e0
 8003dd4:	20000308 	.word	0x20000308
 8003dd8:	200002e8 	.word	0x200002e8
 8003ddc:	20000b20 	.word	0x20000b20
 8003de0:	200002f0 	.word	0x200002f0
 8003de4:	200002d9 	.word	0x200002d9
 8003de8:	20000060 	.word	0x20000060
 8003dec:	20000094 	.word	0x20000094
 8003df0:	200000c8 	.word	0x200000c8
 8003df4:	20000214 	.word	0x20000214
 8003df8:	20000218 	.word	0x20000218
 8003dfc:	2000021c 	.word	0x2000021c
 8003e00:	200002d0 	.word	0x200002d0
 8003e04:	f3af 8000 	nop.w

08003e08 <CCU43_1_IRQHandler>:


void find_3phase_index()
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	index_count_1++;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <CCU43_1_IRQHandler+0x6c>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <CCU43_1_IRQHandler+0x6c>)
 8003e16:	701a      	strb	r2, [r3, #0]
	index_count_2++;
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <CCU43_1_IRQHandler+0x70>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <CCU43_1_IRQHandler+0x70>)
 8003e22:	701a      	strb	r2, [r3, #0]
	index_count_3++;
 8003e24:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <CCU43_1_IRQHandler+0x74>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <CCU43_1_IRQHandler+0x74>)
 8003e2e:	701a      	strb	r2, [r3, #0]

	// bool status = PIN_INTERRUPT_STATUS(&PIN_INTERRUPT_0);
	// if(taster1 == 1)
	U_u = sin_table[index_count_1];
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <CCU43_1_IRQHandler+0x6c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <CCU43_1_IRQHandler+0x78>)
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	4911      	ldr	r1, [pc, #68]	; (8003e84 <CCU43_1_IRQHandler+0x7c>)
 8003e40:	e9c1 2300 	strd	r2, r3, [r1]
	U_v = sin_table[index_count_2]; // aufrunden oder abrunden ?
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <CCU43_1_IRQHandler+0x70>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <CCU43_1_IRQHandler+0x78>)
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	490d      	ldr	r1, [pc, #52]	; (8003e88 <CCU43_1_IRQHandler+0x80>)
 8003e54:	e9c1 2300 	strd	r2, r3, [r1]
	U_w = sin_table[index_count_3];
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <CCU43_1_IRQHandler+0x74>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <CCU43_1_IRQHandler+0x78>)
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <CCU43_1_IRQHandler+0x84>)
 8003e68:	e9c1 2300 	strd	r2, r3, [r1]
	// else {U_v = sin_table[index_count_1];
	//U_u = sin_table[index_count_2]; // aufrunden oder abrunden ?
	//U_w = sin_table[index_count_3];}
	sinus_dreieck_vergleich();
 8003e6c:	f7ff feb8 	bl	8003be0 <sinus_dreieck_vergleich>
}
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200002cc 	.word	0x200002cc
 8003e78:	200001f8 	.word	0x200001f8
 8003e7c:	200001f9 	.word	0x200001f9
 8003e80:	20000310 	.word	0x20000310
 8003e84:	20000b38 	.word	0x20000b38
 8003e88:	20000308 	.word	0x20000308
 8003e8c:	20000b20 	.word	0x20000b20

08003e90 <ERU0_3_IRQHandler>:
//bool current_status = false;
void start()
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	 pin_status1=!pin_status1;
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <ERU0_3_IRQHandler+0x9c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f083 0301 	eor.w	r3, r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <ERU0_3_IRQHandler+0x9c>)
 8003eb0:	701a      	strb	r2, [r3, #0]
	 // current_status = PIN_INTERRUPT_STATUS(&PIN_INTERRUPT_0);
	 if(pin_status1)
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <ERU0_3_IRQHandler+0x9c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <ERU0_3_IRQHandler+0x58>
	 {
		 lcd_setcursor(0,2);
 8003eba:	2000      	movs	r0, #0
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	f7fe f857 	bl	8001f70 <lcd_setcursor>
		 lcd_string(str_cl);
 8003ec2:	481b      	ldr	r0, [pc, #108]	; (8003f30 <ERU0_3_IRQHandler+0xa0>)
 8003ec4:	f7fe f872 	bl	8001fac <lcd_string>
		 TIMER_Start(&TIMER_0);
 8003ec8:	481a      	ldr	r0, [pc, #104]	; (8003f34 <ERU0_3_IRQHandler+0xa4>)
 8003eca:	f7fe f929 	bl	8002120 <TIMER_Start>
		 TIMER_Start(&TIMER_1);
 8003ece:	481a      	ldr	r0, [pc, #104]	; (8003f38 <ERU0_3_IRQHandler+0xa8>)
 8003ed0:	f7fe f926 	bl	8002120 <TIMER_Start>
		 PWM_CCU8_Start(&PWM_CCU8_0);
 8003ed4:	4819      	ldr	r0, [pc, #100]	; (8003f3c <ERU0_3_IRQHandler+0xac>)
 8003ed6:	f7fe fdb3 	bl	8002a40 <PWM_CCU8_Start>
		 PWM_CCU8_Start(&PWM_CCU8_1);
 8003eda:	4819      	ldr	r0, [pc, #100]	; (8003f40 <ERU0_3_IRQHandler+0xb0>)
 8003edc:	f7fe fdb0 	bl	8002a40 <PWM_CCU8_Start>
		 PWM_CCU8_Start(&PWM_CCU8_2);
 8003ee0:	4818      	ldr	r0, [pc, #96]	; (8003f44 <ERU0_3_IRQHandler+0xb4>)
 8003ee2:	f7fe fdad 	bl	8002a40 <PWM_CCU8_Start>
 8003ee6:	e01f      	b.n	8003f28 <ERU0_3_IRQHandler+0x98>
	 }
	 else
	 {
	     lcd_setcursor(0,2);
 8003ee8:	2000      	movs	r0, #0
 8003eea:	2102      	movs	r1, #2
 8003eec:	f7fe f840 	bl	8001f70 <lcd_setcursor>
		 lcd_string(str_aus);
 8003ef0:	4815      	ldr	r0, [pc, #84]	; (8003f48 <ERU0_3_IRQHandler+0xb8>)
 8003ef2:	f7fe f85b 	bl	8001fac <lcd_string>
		 PWM_CCU8_Stop(&PWM_CCU8_0);
 8003ef6:	4811      	ldr	r0, [pc, #68]	; (8003f3c <ERU0_3_IRQHandler+0xac>)
 8003ef8:	f7fe fdce 	bl	8002a98 <PWM_CCU8_Stop>
		 PWM_CCU8_Stop(&PWM_CCU8_1);
 8003efc:	4810      	ldr	r0, [pc, #64]	; (8003f40 <ERU0_3_IRQHandler+0xb0>)
 8003efe:	f7fe fdcb 	bl	8002a98 <PWM_CCU8_Stop>
		 PWM_CCU8_Stop(&PWM_CCU8_2);
 8003f02:	4810      	ldr	r0, [pc, #64]	; (8003f44 <ERU0_3_IRQHandler+0xb4>)
 8003f04:	f7fe fdc8 	bl	8002a98 <PWM_CCU8_Stop>
		 TIMER_Stop(&TIMER_1);
 8003f08:	480b      	ldr	r0, [pc, #44]	; (8003f38 <ERU0_3_IRQHandler+0xa8>)
 8003f0a:	f7fe f927 	bl	800215c <TIMER_Stop>
		 TIMER_Stop(&TIMER_0);
 8003f0e:	4809      	ldr	r0, [pc, #36]	; (8003f34 <ERU0_3_IRQHandler+0xa4>)
 8003f10:	f7fe f924 	bl	800215c <TIMER_Stop>
		 delay_ms(70000000);
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <ERU0_3_IRQHandler+0xbc>)
 8003f16:	f7fd ff31 	bl	8001d7c <delay_ms>
		 f_aktuell = 0;
 8003f1a:	490d      	ldr	r1, [pc, #52]	; (8003f50 <ERU0_3_IRQHandler+0xc0>)
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9c1 2300 	strd	r2, r3, [r1]
	 /* {
		  PWM_CCU8_Start(&PWM_CCU8_0);
		  PWM_CCU8_Start(&PWM_CCU8_1);
		  PWM_CCU8_Start(&PWM_CCU8_2);
	  	}*/
}
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	200002d8 	.word	0x200002d8
 8003f30:	200001b4 	.word	0x200001b4
 8003f34:	20000008 	.word	0x20000008
 8003f38:	20000038 	.word	0x20000038
 8003f3c:	20000060 	.word	0x20000060
 8003f40:	20000094 	.word	0x20000094
 8003f44:	200000c8 	.word	0x200000c8
 8003f48:	200001c4 	.word	0x200001c4
 8003f4c:	042c1d80 	.word	0x042c1d80
 8003f50:	200002d0 	.word	0x200002d0

08003f54 <ERU1_0_IRQHandler>:

void DC_Bremsen (void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	pin_status2=!pin_status2;
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <ERU1_0_IRQHandler+0x6c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f083 0301 	eor.w	r3, r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <ERU1_0_IRQHandler+0x6c>)
 8003f74:	701a      	strb	r2, [r3, #0]
	TIMER_Stop(&TIMER_1);
 8003f76:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <ERU1_0_IRQHandler+0x70>)
 8003f78:	f7fe f8f0 	bl	800215c <TIMER_Stop>
	TIMER_Stop(&TIMER_0);
 8003f7c:	4812      	ldr	r0, [pc, #72]	; (8003fc8 <ERU1_0_IRQHandler+0x74>)
 8003f7e:	f7fe f8ed 	bl	800215c <TIMER_Stop>
	if(pin_status2)
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <ERU1_0_IRQHandler+0x6c>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <ERU1_0_IRQHandler+0x50>
	{
		sinus_dreieck_vergleich();
 8003f8a:	f7ff fe29 	bl	8003be0 <sinus_dreieck_vergleich>
		lcd_setcursor(0,2);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	2102      	movs	r1, #2
 8003f92:	f7fd ffed 	bl	8001f70 <lcd_setcursor>
		lcd_string(str_dc);
 8003f96:	480d      	ldr	r0, [pc, #52]	; (8003fcc <ERU1_0_IRQHandler+0x78>)
 8003f98:	f7fe f808 	bl	8001fac <lcd_string>
		delay_ms(50000000);
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <ERU1_0_IRQHandler+0x7c>)
 8003f9e:	f7fd feed 	bl	8001d7c <delay_ms>
 8003fa2:	e00c      	b.n	8003fbe <ERU1_0_IRQHandler+0x6a>
	}
	else
	{
		lcd_setcursor(0,2);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	f7fd ffe2 	bl	8001f70 <lcd_setcursor>
		lcd_string(str_cl);
 8003fac:	4809      	ldr	r0, [pc, #36]	; (8003fd4 <ERU1_0_IRQHandler+0x80>)
 8003fae:	f7fd fffd 	bl	8001fac <lcd_string>
		TIMER_Start(&TIMER_0);
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <ERU1_0_IRQHandler+0x74>)
 8003fb4:	f7fe f8b4 	bl	8002120 <TIMER_Start>
		TIMER_Start(&TIMER_1);
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <ERU1_0_IRQHandler+0x70>)
 8003fba:	f7fe f8b1 	bl	8002120 <TIMER_Start>
	}
}
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	200002d9 	.word	0x200002d9
 8003fc4:	20000038 	.word	0x20000038
 8003fc8:	20000008 	.word	0x20000008
 8003fcc:	200001a4 	.word	0x200001a4
 8003fd0:	02faf080 	.word	0x02faf080
 8003fd4:	200001b4 	.word	0x200001b4

08003fd8 <ERU1_3_IRQHandler>:

void PWM_Drehrichtung()
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	pin_status_bremsen =!pin_status_bremsen;
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <ERU1_3_IRQHandler+0x34>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f083 0301 	eor.w	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <ERU1_3_IRQHandler+0x34>)
 8003ff8:	701a      	strb	r2, [r3, #0]
	lcd_setcursor(0,2);
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	f7fd ffb7 	bl	8001f70 <lcd_setcursor>
	lcd_string(str_wechsel);
 8004002:	4803      	ldr	r0, [pc, #12]	; (8004010 <ERU1_3_IRQHandler+0x38>)
 8004004:	f7fd ffd2 	bl	8001fac <lcd_string>
}
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200002da 	.word	0x200002da
 8004010:	200001d4 	.word	0x200001d4
 8004014:	00000000 	.word	0x00000000

08004018 <main>:


int main(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
	// create values for sin_table
	for (int i = 0; i<=255; i++)
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	e01c      	b.n	800405e <main+0x46>
	  {
	    sin_table[i] = sin(2*M_PI/255 * i);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 fad9 	bl	80055dc <__aeabi_i2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	a317      	add	r3, pc, #92	; (adr r3, 8004090 <main+0x78>)
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f001 fb36 	bl	80056a8 <__aeabi_dmul>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	f000 f828 	bl	8004098 <sin>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	480e      	ldr	r0, [pc, #56]	; (8004088 <main+0x70>)
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	00c9      	lsls	r1, r1, #3
 8004052:	4401      	add	r1, r0
 8004054:	e9c1 2300 	strd	r2, r3, [r1]


int main(void)
{
	// create values for sin_table
	for (int i = 0; i<=255; i++)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2bff      	cmp	r3, #255	; 0xff
 8004062:	dddf      	ble.n	8004024 <main+0xc>
	  {
	    sin_table[i] = sin(2*M_PI/255 * i);
	  }
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8004064:	f7ff fae0 	bl	8003628 <DAVE_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	70fb      	strb	r3, [r7, #3]

  if (status != DAVE_STATUS_SUCCESS)
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d000      	beq.n	8004074 <main+0x5c>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8004072:	e7fe      	b.n	8004072 <main+0x5a>
  //CLOCK_XMC4_Init();

  //time = PWM_CCU4_GetTimerValue(&PWM_CCU4_0);
	 // PWM_SetFreq(&PWM_0,led_freq);

  lcd_init(); // erste haupt initialisierung
 8004074:	f7fd fedc 	bl	8001e30 <lcd_init>
  lcd_clear();
 8004078:	f7fd ff66 	bl	8001f48 <lcd_clear>

  //double U_1 = 70;
  // ab 20 hz R = 0?


  ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 800407c:	4803      	ldr	r0, [pc, #12]	; (800408c <main+0x74>)
 800407e:	f7ff faad 	bl	80035dc <ADC_MEASUREMENT_StartConversion>
		  //char result[];
		  //ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);

		  //Adc_Measurement_Handler();
		  //time = PWM_CCU4_GetTimerValue(&PWM_CCU4_0);
	  	  write_display();
 8004082:	f7ff fb47 	bl	8003714 <write_display>
	   	   f_1 = 0;
	   	   i
	   }
	   */

  }
 8004086:	e7fc      	b.n	8004082 <main+0x6a>
 8004088:	20000310 	.word	0x20000310
 800408c:	20000188 	.word	0x20000188
 8004090:	8acefc14 	.word	0x8acefc14
 8004094:	3f993b36 	.word	0x3f993b36

08004098 <sin>:
 8004098:	b530      	push	{r4, r5, lr}
 800409a:	4a22      	ldr	r2, [pc, #136]	; (8004124 <sin+0x8c>)
 800409c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040a0:	4293      	cmp	r3, r2
 80040a2:	b087      	sub	sp, #28
 80040a4:	dd1c      	ble.n	80040e0 <sin+0x48>
 80040a6:	4a20      	ldr	r2, [pc, #128]	; (8004128 <sin+0x90>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	dd05      	ble.n	80040b8 <sin+0x20>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	f001 f946 	bl	8005340 <__aeabi_dsub>
 80040b4:	b007      	add	sp, #28
 80040b6:	bd30      	pop	{r4, r5, pc}
 80040b8:	aa02      	add	r2, sp, #8
 80040ba:	f000 f839 	bl	8004130 <__ieee754_rem_pio2>
 80040be:	f000 0003 	and.w	r0, r0, #3
 80040c2:	2801      	cmp	r0, #1
 80040c4:	d01d      	beq.n	8004102 <sin+0x6a>
 80040c6:	2802      	cmp	r0, #2
 80040c8:	d012      	beq.n	80040f0 <sin+0x58>
 80040ca:	b308      	cbz	r0, 8004110 <sin+0x78>
 80040cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040d4:	f000 fa4c 	bl	8004570 <__kernel_cos>
 80040d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80040dc:	b007      	add	sp, #28
 80040de:	bd30      	pop	{r4, r5, pc}
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2300      	movs	r3, #0
 80040e8:	f000 ff56 	bl	8004f98 <__kernel_sin>
 80040ec:	b007      	add	sp, #28
 80040ee:	bd30      	pop	{r4, r5, pc}
 80040f0:	2401      	movs	r4, #1
 80040f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040fa:	9400      	str	r4, [sp, #0]
 80040fc:	f000 ff4c 	bl	8004f98 <__kernel_sin>
 8004100:	e7ea      	b.n	80040d8 <sin+0x40>
 8004102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800410a:	f000 fa31 	bl	8004570 <__kernel_cos>
 800410e:	e7d1      	b.n	80040b4 <sin+0x1c>
 8004110:	2401      	movs	r4, #1
 8004112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800411a:	9400      	str	r4, [sp, #0]
 800411c:	f000 ff3c 	bl	8004f98 <__kernel_sin>
 8004120:	e7c8      	b.n	80040b4 <sin+0x1c>
 8004122:	bf00      	nop
 8004124:	3fe921fb 	.word	0x3fe921fb
 8004128:	7fefffff 	.word	0x7fefffff
 800412c:	00000000 	.word	0x00000000

08004130 <__ieee754_rem_pio2>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	4b98      	ldr	r3, [pc, #608]	; (8004398 <__ieee754_rem_pio2+0x268>)
 8004136:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800413a:	429c      	cmp	r4, r3
 800413c:	b08f      	sub	sp, #60	; 0x3c
 800413e:	4606      	mov	r6, r0
 8004140:	460f      	mov	r7, r1
 8004142:	468a      	mov	sl, r1
 8004144:	4615      	mov	r5, r2
 8004146:	f340 8082 	ble.w	800424e <__ieee754_rem_pio2+0x11e>
 800414a:	4b94      	ldr	r3, [pc, #592]	; (800439c <__ieee754_rem_pio2+0x26c>)
 800414c:	429c      	cmp	r4, r3
 800414e:	dc27      	bgt.n	80041a0 <__ieee754_rem_pio2+0x70>
 8004150:	2900      	cmp	r1, #0
 8004152:	a387      	add	r3, pc, #540	; (adr r3, 8004370 <__ieee754_rem_pio2+0x240>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f340 81a4 	ble.w	80044a4 <__ieee754_rem_pio2+0x374>
 800415c:	f001 f8f0 	bl	8005340 <__aeabi_dsub>
 8004160:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <__ieee754_rem_pio2+0x270>)
 8004162:	429c      	cmp	r4, r3
 8004164:	4606      	mov	r6, r0
 8004166:	460f      	mov	r7, r1
 8004168:	f000 8088 	beq.w	800427c <__ieee754_rem_pio2+0x14c>
 800416c:	a382      	add	r3, pc, #520	; (adr r3, 8004378 <__ieee754_rem_pio2+0x248>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f001 f8e5 	bl	8005340 <__aeabi_dsub>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	e9c5 2300 	strd	r2, r3, [r5]
 800417e:	4630      	mov	r0, r6
 8004180:	4639      	mov	r1, r7
 8004182:	f001 f8dd 	bl	8005340 <__aeabi_dsub>
 8004186:	a37c      	add	r3, pc, #496	; (adr r3, 8004378 <__ieee754_rem_pio2+0x248>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f001 f8d8 	bl	8005340 <__aeabi_dsub>
 8004190:	f04f 0b01 	mov.w	fp, #1
 8004194:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004198:	4658      	mov	r0, fp
 800419a:	b00f      	add	sp, #60	; 0x3c
 800419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a0:	4b80      	ldr	r3, [pc, #512]	; (80043a4 <__ieee754_rem_pio2+0x274>)
 80041a2:	429c      	cmp	r4, r3
 80041a4:	f340 8088 	ble.w	80042b8 <__ieee754_rem_pio2+0x188>
 80041a8:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <__ieee754_rem_pio2+0x278>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	dc5b      	bgt.n	8004266 <__ieee754_rem_pio2+0x136>
 80041ae:	ea4f 5b24 	mov.w	fp, r4, asr #20
 80041b2:	f2ab 4b16 	subw	fp, fp, #1046	; 0x416
 80041b6:	eba4 510b 	sub.w	r1, r4, fp, lsl #20
 80041ba:	4689      	mov	r9, r1
 80041bc:	4680      	mov	r8, r0
 80041be:	f001 fd0d 	bl	8005bdc <__aeabi_d2iz>
 80041c2:	f001 fa0b 	bl	80055dc <__aeabi_i2d>
 80041c6:	4606      	mov	r6, r0
 80041c8:	460f      	mov	r7, r1
 80041ca:	4632      	mov	r2, r6
 80041cc:	463b      	mov	r3, r7
 80041ce:	4640      	mov	r0, r8
 80041d0:	4649      	mov	r1, r9
 80041d2:	e9cd 6708 	strd	r6, r7, [sp, #32]
 80041d6:	f001 f8b3 	bl	8005340 <__aeabi_dsub>
 80041da:	2200      	movs	r2, #0
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <__ieee754_rem_pio2+0x27c>)
 80041de:	f001 fa63 	bl	80056a8 <__aeabi_dmul>
 80041e2:	4689      	mov	r9, r1
 80041e4:	4680      	mov	r8, r0
 80041e6:	f001 fcf9 	bl	8005bdc <__aeabi_d2iz>
 80041ea:	f001 f9f7 	bl	80055dc <__aeabi_i2d>
 80041ee:	4606      	mov	r6, r0
 80041f0:	460f      	mov	r7, r1
 80041f2:	4632      	mov	r2, r6
 80041f4:	463b      	mov	r3, r7
 80041f6:	4640      	mov	r0, r8
 80041f8:	4649      	mov	r1, r9
 80041fa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80041fe:	f001 f89f 	bl	8005340 <__aeabi_dsub>
 8004202:	2200      	movs	r2, #0
 8004204:	4b69      	ldr	r3, [pc, #420]	; (80043ac <__ieee754_rem_pio2+0x27c>)
 8004206:	f001 fa4f 	bl	80056a8 <__aeabi_dmul>
 800420a:	2200      	movs	r2, #0
 800420c:	2300      	movs	r3, #0
 800420e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004212:	f001 fcb1 	bl	8005b78 <__aeabi_dcmpeq>
 8004216:	2800      	cmp	r0, #0
 8004218:	f000 816d 	beq.w	80044f6 <__ieee754_rem_pio2+0x3c6>
 800421c:	2300      	movs	r3, #0
 800421e:	4630      	mov	r0, r6
 8004220:	4639      	mov	r1, r7
 8004222:	2200      	movs	r2, #0
 8004224:	f001 fca8 	bl	8005b78 <__aeabi_dcmpeq>
 8004228:	2800      	cmp	r0, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2302      	moveq	r3, #2
 8004230:	2202      	movs	r2, #2
 8004232:	495f      	ldr	r1, [pc, #380]	; (80043b0 <__ieee754_rem_pio2+0x280>)
 8004234:	9200      	str	r2, [sp, #0]
 8004236:	9101      	str	r1, [sp, #4]
 8004238:	465a      	mov	r2, fp
 800423a:	a808      	add	r0, sp, #32
 800423c:	4629      	mov	r1, r5
 800423e:	f000 fabf 	bl	80047c0 <__kernel_rem_pio2>
 8004242:	f1ba 0f00 	cmp.w	sl, #0
 8004246:	f2c0 814b 	blt.w	80044e0 <__ieee754_rem_pio2+0x3b0>
 800424a:	4683      	mov	fp, r0
 800424c:	e007      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 800424e:	2200      	movs	r2, #0
 8004250:	2300      	movs	r3, #0
 8004252:	e9c5 6700 	strd	r6, r7, [r5]
 8004256:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800425a:	f04f 0b00 	mov.w	fp, #0
 800425e:	4658      	mov	r0, fp
 8004260:	b00f      	add	sp, #60	; 0x3c
 8004262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	f001 f869 	bl	8005340 <__aeabi_dsub>
 800426e:	f04f 0b00 	mov.w	fp, #0
 8004272:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004276:	e9c5 0100 	strd	r0, r1, [r5]
 800427a:	e7f0      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 800427c:	a340      	add	r3, pc, #256	; (adr r3, 8004380 <__ieee754_rem_pio2+0x250>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f001 f85d 	bl	8005340 <__aeabi_dsub>
 8004286:	a340      	add	r3, pc, #256	; (adr r3, 8004388 <__ieee754_rem_pio2+0x258>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	4606      	mov	r6, r0
 800428e:	460f      	mov	r7, r1
 8004290:	f001 f856 	bl	8005340 <__aeabi_dsub>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	e9c5 2300 	strd	r2, r3, [r5]
 800429c:	4630      	mov	r0, r6
 800429e:	4639      	mov	r1, r7
 80042a0:	f001 f84e 	bl	8005340 <__aeabi_dsub>
 80042a4:	a338      	add	r3, pc, #224	; (adr r3, 8004388 <__ieee754_rem_pio2+0x258>)
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f001 f849 	bl	8005340 <__aeabi_dsub>
 80042ae:	f04f 0b01 	mov.w	fp, #1
 80042b2:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80042b6:	e7d2      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 80042b8:	f000 ff26 	bl	8005108 <fabs>
 80042bc:	a334      	add	r3, pc, #208	; (adr r3, 8004390 <__ieee754_rem_pio2+0x260>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	4606      	mov	r6, r0
 80042c4:	460f      	mov	r7, r1
 80042c6:	f001 f9ef 	bl	80056a8 <__aeabi_dmul>
 80042ca:	2200      	movs	r2, #0
 80042cc:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <__ieee754_rem_pio2+0x284>)
 80042ce:	f001 f839 	bl	8005344 <__adddf3>
 80042d2:	f001 fc83 	bl	8005bdc <__aeabi_d2iz>
 80042d6:	4683      	mov	fp, r0
 80042d8:	f001 f980 	bl	80055dc <__aeabi_i2d>
 80042dc:	a324      	add	r3, pc, #144	; (adr r3, 8004370 <__ieee754_rem_pio2+0x240>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042e6:	f001 f9df 	bl	80056a8 <__aeabi_dmul>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4630      	mov	r0, r6
 80042f0:	4639      	mov	r1, r7
 80042f2:	f001 f825 	bl	8005340 <__aeabi_dsub>
 80042f6:	a320      	add	r3, pc, #128	; (adr r3, 8004378 <__ieee754_rem_pio2+0x248>)
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	4606      	mov	r6, r0
 80042fe:	460f      	mov	r7, r1
 8004300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004304:	f001 f9d0 	bl	80056a8 <__aeabi_dmul>
 8004308:	f1bb 0f1f 	cmp.w	fp, #31
 800430c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	dc52      	bgt.n	80043bc <__ieee754_rem_pio2+0x28c>
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <__ieee754_rem_pio2+0x288>)
 8004318:	f10b 32ff 	add.w	r2, fp, #4294967295
 800431c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004320:	42a3      	cmp	r3, r4
 8004322:	d04b      	beq.n	80043bc <__ieee754_rem_pio2+0x28c>
 8004324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004328:	f001 f80a 	bl	8005340 <__aeabi_dsub>
 800432c:	4680      	mov	r8, r0
 800432e:	4689      	mov	r9, r1
 8004330:	e9c5 8900 	strd	r8, r9, [r5]
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f001 f800 	bl	8005340 <__aeabi_dsub>
 8004340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004344:	f000 fffc 	bl	8005340 <__aeabi_dsub>
 8004348:	f1ba 0f00 	cmp.w	sl, #0
 800434c:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004350:	da85      	bge.n	800425e <__ieee754_rem_pio2+0x12e>
 8004352:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
 8004356:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800435a:	f1cb 0b00 	rsb	fp, fp, #0
 800435e:	f8c5 8000 	str.w	r8, [r5]
 8004362:	606c      	str	r4, [r5, #4]
 8004364:	60a8      	str	r0, [r5, #8]
 8004366:	60eb      	str	r3, [r5, #12]
 8004368:	e779      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w
 8004370:	54400000 	.word	0x54400000
 8004374:	3ff921fb 	.word	0x3ff921fb
 8004378:	1a626331 	.word	0x1a626331
 800437c:	3dd0b461 	.word	0x3dd0b461
 8004380:	1a600000 	.word	0x1a600000
 8004384:	3dd0b461 	.word	0x3dd0b461
 8004388:	2e037073 	.word	0x2e037073
 800438c:	3ba3198a 	.word	0x3ba3198a
 8004390:	6dc9c883 	.word	0x6dc9c883
 8004394:	3fe45f30 	.word	0x3fe45f30
 8004398:	3fe921fb 	.word	0x3fe921fb
 800439c:	4002d97b 	.word	0x4002d97b
 80043a0:	3ff921fb 	.word	0x3ff921fb
 80043a4:	413921fb 	.word	0x413921fb
 80043a8:	7fefffff 	.word	0x7fefffff
 80043ac:	41700000 	.word	0x41700000
 80043b0:	0800876c 	.word	0x0800876c
 80043b4:	3fe00000 	.word	0x3fe00000
 80043b8:	080086ec 	.word	0x080086ec
 80043bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043c0:	f000 ffbe 	bl	8005340 <__aeabi_dsub>
 80043c4:	1524      	asrs	r4, r4, #20
 80043c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80043ca:	1ae3      	subs	r3, r4, r3
 80043cc:	4680      	mov	r8, r0
 80043ce:	4689      	mov	r9, r1
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	e9c5 8900 	strd	r8, r9, [r5]
 80043d6:	ddad      	ble.n	8004334 <__ieee754_rem_pio2+0x204>
 80043d8:	a35b      	add	r3, pc, #364	; (adr r3, 8004548 <__ieee754_rem_pio2+0x418>)
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043e2:	f001 f961 	bl	80056a8 <__aeabi_dmul>
 80043e6:	4680      	mov	r8, r0
 80043e8:	4689      	mov	r9, r1
 80043ea:	4642      	mov	r2, r8
 80043ec:	464b      	mov	r3, r9
 80043ee:	4630      	mov	r0, r6
 80043f0:	4639      	mov	r1, r7
 80043f2:	f000 ffa5 	bl	8005340 <__aeabi_dsub>
 80043f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80043fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043fe:	4630      	mov	r0, r6
 8004400:	4639      	mov	r1, r7
 8004402:	f000 ff9d 	bl	8005340 <__aeabi_dsub>
 8004406:	4642      	mov	r2, r8
 8004408:	464b      	mov	r3, r9
 800440a:	f000 ff99 	bl	8005340 <__aeabi_dsub>
 800440e:	a350      	add	r3, pc, #320	; (adr r3, 8004550 <__ieee754_rem_pio2+0x420>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	4606      	mov	r6, r0
 8004416:	460f      	mov	r7, r1
 8004418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800441c:	f001 f944 	bl	80056a8 <__aeabi_dmul>
 8004420:	4632      	mov	r2, r6
 8004422:	463b      	mov	r3, r7
 8004424:	f000 ff8c 	bl	8005340 <__aeabi_dsub>
 8004428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800442c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004434:	f000 ff84 	bl	8005340 <__aeabi_dsub>
 8004438:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800443c:	1ae4      	subs	r4, r4, r3
 800443e:	4680      	mov	r8, r0
 8004440:	4689      	mov	r9, r1
 8004442:	2c31      	cmp	r4, #49	; 0x31
 8004444:	e9c5 8900 	strd	r8, r9, [r5]
 8004448:	dd75      	ble.n	8004536 <__ieee754_rem_pio2+0x406>
 800444a:	a344      	add	r3, pc, #272	; (adr r3, 800455c <__ieee754_rem_pio2+0x42c>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004454:	f001 f928 	bl	80056a8 <__aeabi_dmul>
 8004458:	4680      	mov	r8, r0
 800445a:	4689      	mov	r9, r1
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004464:	f000 ff6c 	bl	8005340 <__aeabi_dsub>
 8004468:	4606      	mov	r6, r0
 800446a:	460f      	mov	r7, r1
 800446c:	4632      	mov	r2, r6
 800446e:	463b      	mov	r3, r7
 8004470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004474:	f000 ff64 	bl	8005340 <__aeabi_dsub>
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	f000 ff60 	bl	8005340 <__aeabi_dsub>
 8004480:	a338      	add	r3, pc, #224	; (adr r3, 8004564 <__ieee754_rem_pio2+0x434>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	4680      	mov	r8, r0
 8004488:	4689      	mov	r9, r1
 800448a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800448e:	f001 f90b 	bl	80056a8 <__aeabi_dmul>
 8004492:	4642      	mov	r2, r8
 8004494:	464b      	mov	r3, r9
 8004496:	f000 ff53 	bl	8005340 <__aeabi_dsub>
 800449a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	e73f      	b.n	8004324 <__ieee754_rem_pio2+0x1f4>
 80044a4:	f000 ff4e 	bl	8005344 <__adddf3>
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <__ieee754_rem_pio2+0x428>)
 80044aa:	429c      	cmp	r4, r3
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	d023      	beq.n	80044fa <__ieee754_rem_pio2+0x3ca>
 80044b2:	a323      	add	r3, pc, #140	; (adr r3, 8004540 <__ieee754_rem_pio2+0x410>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f000 ff44 	bl	8005344 <__adddf3>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	e9c5 2300 	strd	r2, r3, [r5]
 80044c4:	4630      	mov	r0, r6
 80044c6:	4639      	mov	r1, r7
 80044c8:	f000 ff3a 	bl	8005340 <__aeabi_dsub>
 80044cc:	a31c      	add	r3, pc, #112	; (adr r3, 8004540 <__ieee754_rem_pio2+0x410>)
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	f000 ff37 	bl	8005344 <__adddf3>
 80044d6:	f04f 3bff 	mov.w	fp, #4294967295
 80044da:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80044de:	e6be      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 80044e0:	686a      	ldr	r2, [r5, #4]
 80044e2:	68eb      	ldr	r3, [r5, #12]
 80044e4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80044e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80044ec:	f1c0 0b00 	rsb	fp, r0, #0
 80044f0:	606a      	str	r2, [r5, #4]
 80044f2:	60eb      	str	r3, [r5, #12]
 80044f4:	e6b3      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 80044f6:	2303      	movs	r3, #3
 80044f8:	e69a      	b.n	8004230 <__ieee754_rem_pio2+0x100>
 80044fa:	a313      	add	r3, pc, #76	; (adr r3, 8004548 <__ieee754_rem_pio2+0x418>)
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f000 ff20 	bl	8005344 <__adddf3>
 8004504:	a312      	add	r3, pc, #72	; (adr r3, 8004550 <__ieee754_rem_pio2+0x420>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	4606      	mov	r6, r0
 800450c:	460f      	mov	r7, r1
 800450e:	f000 ff19 	bl	8005344 <__adddf3>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	e9c5 2300 	strd	r2, r3, [r5]
 800451a:	4630      	mov	r0, r6
 800451c:	4639      	mov	r1, r7
 800451e:	f000 ff0f 	bl	8005340 <__aeabi_dsub>
 8004522:	a30b      	add	r3, pc, #44	; (adr r3, 8004550 <__ieee754_rem_pio2+0x420>)
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f000 ff0c 	bl	8005344 <__adddf3>
 800452c:	f04f 3bff 	mov.w	fp, #4294967295
 8004530:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004534:	e693      	b.n	800425e <__ieee754_rem_pio2+0x12e>
 8004536:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800453a:	e6fb      	b.n	8004334 <__ieee754_rem_pio2+0x204>
 800453c:	f3af 8000 	nop.w
 8004540:	1a626331 	.word	0x1a626331
 8004544:	3dd0b461 	.word	0x3dd0b461
 8004548:	1a600000 	.word	0x1a600000
 800454c:	3dd0b461 	.word	0x3dd0b461
 8004550:	2e037073 	.word	0x2e037073
 8004554:	3ba3198a 	.word	0x3ba3198a
 8004558:	3ff921fb 	.word	0x3ff921fb
 800455c:	2e000000 	.word	0x2e000000
 8004560:	3ba3198a 	.word	0x3ba3198a
 8004564:	252049c1 	.word	0x252049c1
 8004568:	397b839a 	.word	0x397b839a
 800456c:	f3af 8000 	nop.w

08004570 <__kernel_cos>:
 8004570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004574:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8004578:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 800457c:	b085      	sub	sp, #20
 800457e:	4606      	mov	r6, r0
 8004580:	460f      	mov	r7, r1
 8004582:	4692      	mov	sl, r2
 8004584:	469b      	mov	fp, r3
 8004586:	da6b      	bge.n	8004660 <__kernel_cos+0xf0>
 8004588:	f001 fb28 	bl	8005bdc <__aeabi_d2iz>
 800458c:	2800      	cmp	r0, #0
 800458e:	f000 80ea 	beq.w	8004766 <__kernel_cos+0x1f6>
 8004592:	4632      	mov	r2, r6
 8004594:	463b      	mov	r3, r7
 8004596:	4630      	mov	r0, r6
 8004598:	4639      	mov	r1, r7
 800459a:	f001 f885 	bl	80056a8 <__aeabi_dmul>
 800459e:	a374      	add	r3, pc, #464	; (adr r3, 8004770 <__kernel_cos+0x200>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	4604      	mov	r4, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	f001 f87e 	bl	80056a8 <__aeabi_dmul>
 80045ac:	a372      	add	r3, pc, #456	; (adr r3, 8004778 <__kernel_cos+0x208>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f000 fec7 	bl	8005344 <__adddf3>
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	f001 f875 	bl	80056a8 <__aeabi_dmul>
 80045be:	a370      	add	r3, pc, #448	; (adr r3, 8004780 <__kernel_cos+0x210>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f000 febc 	bl	8005340 <__aeabi_dsub>
 80045c8:	4622      	mov	r2, r4
 80045ca:	462b      	mov	r3, r5
 80045cc:	f001 f86c 	bl	80056a8 <__aeabi_dmul>
 80045d0:	a36d      	add	r3, pc, #436	; (adr r3, 8004788 <__kernel_cos+0x218>)
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f000 feb5 	bl	8005344 <__adddf3>
 80045da:	4622      	mov	r2, r4
 80045dc:	462b      	mov	r3, r5
 80045de:	f001 f863 	bl	80056a8 <__aeabi_dmul>
 80045e2:	a36b      	add	r3, pc, #428	; (adr r3, 8004790 <__kernel_cos+0x220>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f000 feaa 	bl	8005340 <__aeabi_dsub>
 80045ec:	4622      	mov	r2, r4
 80045ee:	462b      	mov	r3, r5
 80045f0:	f001 f85a 	bl	80056a8 <__aeabi_dmul>
 80045f4:	a368      	add	r3, pc, #416	; (adr r3, 8004798 <__kernel_cos+0x228>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f000 fea3 	bl	8005344 <__adddf3>
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f001 f851 	bl	80056a8 <__aeabi_dmul>
 8004606:	e9cd 0100 	strd	r0, r1, [sp]
 800460a:	4620      	mov	r0, r4
 800460c:	4629      	mov	r1, r5
 800460e:	2200      	movs	r2, #0
 8004610:	4b65      	ldr	r3, [pc, #404]	; (80047a8 <__kernel_cos+0x238>)
 8004612:	f001 f849 	bl	80056a8 <__aeabi_dmul>
 8004616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800461a:	4680      	mov	r8, r0
 800461c:	4689      	mov	r9, r1
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f001 f841 	bl	80056a8 <__aeabi_dmul>
 8004626:	4652      	mov	r2, sl
 8004628:	4604      	mov	r4, r0
 800462a:	460d      	mov	r5, r1
 800462c:	465b      	mov	r3, fp
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f001 f839 	bl	80056a8 <__aeabi_dmul>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f000 fe7f 	bl	8005340 <__aeabi_dsub>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4640      	mov	r0, r8
 8004648:	4649      	mov	r1, r9
 800464a:	f000 fe79 	bl	8005340 <__aeabi_dsub>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	2000      	movs	r0, #0
 8004654:	4955      	ldr	r1, [pc, #340]	; (80047ac <__kernel_cos+0x23c>)
 8004656:	f000 fe73 	bl	8005340 <__aeabi_dsub>
 800465a:	b005      	add	sp, #20
 800465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	f001 f820 	bl	80056a8 <__aeabi_dmul>
 8004668:	a341      	add	r3, pc, #260	; (adr r3, 8004770 <__kernel_cos+0x200>)
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	4604      	mov	r4, r0
 8004670:	460d      	mov	r5, r1
 8004672:	f001 f819 	bl	80056a8 <__aeabi_dmul>
 8004676:	a340      	add	r3, pc, #256	; (adr r3, 8004778 <__kernel_cos+0x208>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f000 fe62 	bl	8005344 <__adddf3>
 8004680:	4622      	mov	r2, r4
 8004682:	462b      	mov	r3, r5
 8004684:	f001 f810 	bl	80056a8 <__aeabi_dmul>
 8004688:	a33d      	add	r3, pc, #244	; (adr r3, 8004780 <__kernel_cos+0x210>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f000 fe57 	bl	8005340 <__aeabi_dsub>
 8004692:	4622      	mov	r2, r4
 8004694:	462b      	mov	r3, r5
 8004696:	f001 f807 	bl	80056a8 <__aeabi_dmul>
 800469a:	a33b      	add	r3, pc, #236	; (adr r3, 8004788 <__kernel_cos+0x218>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f000 fe50 	bl	8005344 <__adddf3>
 80046a4:	4622      	mov	r2, r4
 80046a6:	462b      	mov	r3, r5
 80046a8:	f000 fffe 	bl	80056a8 <__aeabi_dmul>
 80046ac:	a338      	add	r3, pc, #224	; (adr r3, 8004790 <__kernel_cos+0x220>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f000 fe45 	bl	8005340 <__aeabi_dsub>
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	f000 fff5 	bl	80056a8 <__aeabi_dmul>
 80046be:	a336      	add	r3, pc, #216	; (adr r3, 8004798 <__kernel_cos+0x228>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f000 fe3e 	bl	8005344 <__adddf3>
 80046c8:	462b      	mov	r3, r5
 80046ca:	4622      	mov	r2, r4
 80046cc:	f000 ffec 	bl	80056a8 <__aeabi_dmul>
 80046d0:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <__kernel_cos+0x240>)
 80046d2:	4599      	cmp	r9, r3
 80046d4:	e9cd 0100 	strd	r0, r1, [sp]
 80046d8:	dd97      	ble.n	800460a <__kernel_cos+0x9a>
 80046da:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <__kernel_cos+0x244>)
 80046dc:	4599      	cmp	r9, r3
 80046de:	dc39      	bgt.n	8004754 <__kernel_cos+0x1e4>
 80046e0:	2200      	movs	r2, #0
 80046e2:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 80046e6:	2000      	movs	r0, #0
 80046e8:	4930      	ldr	r1, [pc, #192]	; (80047ac <__kernel_cos+0x23c>)
 80046ea:	4690      	mov	r8, r2
 80046ec:	4699      	mov	r9, r3
 80046ee:	f000 fe27 	bl	8005340 <__aeabi_dsub>
 80046f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	2200      	movs	r2, #0
 80046fc:	4b2a      	ldr	r3, [pc, #168]	; (80047a8 <__kernel_cos+0x238>)
 80046fe:	f000 ffd3 	bl	80056a8 <__aeabi_dmul>
 8004702:	4642      	mov	r2, r8
 8004704:	464b      	mov	r3, r9
 8004706:	f000 fe1b 	bl	8005340 <__aeabi_dsub>
 800470a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800470e:	4680      	mov	r8, r0
 8004710:	4689      	mov	r9, r1
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f000 ffc7 	bl	80056a8 <__aeabi_dmul>
 800471a:	4652      	mov	r2, sl
 800471c:	4604      	mov	r4, r0
 800471e:	460d      	mov	r5, r1
 8004720:	465b      	mov	r3, fp
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f000 ffbf 	bl	80056a8 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4620      	mov	r0, r4
 8004730:	4629      	mov	r1, r5
 8004732:	f000 fe05 	bl	8005340 <__aeabi_dsub>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4640      	mov	r0, r8
 800473c:	4649      	mov	r1, r9
 800473e:	f000 fdff 	bl	8005340 <__aeabi_dsub>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474a:	f000 fdf9 	bl	8005340 <__aeabi_dsub>
 800474e:	b005      	add	sp, #20
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80047a0 <__kernel_cos+0x230>
 8004758:	f04f 0800 	mov.w	r8, #0
 800475c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004760:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80047b8 <__kernel_cos+0x248>
 8004764:	e7c7      	b.n	80046f6 <__kernel_cos+0x186>
 8004766:	4911      	ldr	r1, [pc, #68]	; (80047ac <__kernel_cos+0x23c>)
 8004768:	2000      	movs	r0, #0
 800476a:	b005      	add	sp, #20
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	be8838d4 	.word	0xbe8838d4
 8004774:	bda8fae9 	.word	0xbda8fae9
 8004778:	bdb4b1c4 	.word	0xbdb4b1c4
 800477c:	3e21ee9e 	.word	0x3e21ee9e
 8004780:	809c52ad 	.word	0x809c52ad
 8004784:	3e927e4f 	.word	0x3e927e4f
 8004788:	19cb1590 	.word	0x19cb1590
 800478c:	3efa01a0 	.word	0x3efa01a0
 8004790:	16c15177 	.word	0x16c15177
 8004794:	3f56c16c 	.word	0x3f56c16c
 8004798:	5555554c 	.word	0x5555554c
 800479c:	3fa55555 	.word	0x3fa55555
 80047a0:	00000000 	.word	0x00000000
 80047a4:	3fe70000 	.word	0x3fe70000
 80047a8:	3fe00000 	.word	0x3fe00000
 80047ac:	3ff00000 	.word	0x3ff00000
 80047b0:	3fd33332 	.word	0x3fd33332
 80047b4:	3fe90000 	.word	0x3fe90000
 80047b8:	3fd20000 	.word	0x3fd20000
 80047bc:	f3af 8000 	nop.w

080047c0 <__kernel_rem_pio2>:
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80047c8:	4cc6      	ldr	r4, [pc, #792]	; (8004ae4 <__kernel_rem_pio2+0x324>)
 80047ca:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 80047cc:	4dc6      	ldr	r5, [pc, #792]	; (8004ae8 <__kernel_rem_pio2+0x328>)
 80047ce:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80047d2:	9407      	str	r4, [sp, #28]
 80047d4:	4626      	mov	r6, r4
 80047d6:	1ed4      	subs	r4, r2, #3
 80047d8:	fb85 7504 	smull	r7, r5, r5, r4
 80047dc:	17e4      	asrs	r4, r4, #31
 80047de:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 80047e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80047e6:	461d      	mov	r5, r3
 80047e8:	930a      	str	r3, [sp, #40]	; 0x28
 80047ea:	43e3      	mvns	r3, r4
 80047ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80047f0:	3d01      	subs	r5, #1
 80047f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047f6:	9306      	str	r3, [sp, #24]
 80047f8:	462b      	mov	r3, r5
 80047fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80047fc:	9500      	str	r5, [sp, #0]
 80047fe:	1b65      	subs	r5, r4, r5
 8004800:	199c      	adds	r4, r3, r6
 8004802:	9003      	str	r0, [sp, #12]
 8004804:	9108      	str	r1, [sp, #32]
 8004806:	d416      	bmi.n	8004836 <__kernel_rem_pio2+0x76>
 8004808:	442c      	add	r4, r5
 800480a:	3401      	adds	r4, #1
 800480c:	ae22      	add	r6, sp, #136	; 0x88
 800480e:	9fa5      	ldr	r7, [sp, #660]	; 0x294
 8004810:	e008      	b.n	8004824 <__kernel_rem_pio2+0x64>
 8004812:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8004816:	f000 fee1 	bl	80055dc <__aeabi_i2d>
 800481a:	3501      	adds	r5, #1
 800481c:	42a5      	cmp	r5, r4
 800481e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004822:	d008      	beq.n	8004836 <__kernel_rem_pio2+0x76>
 8004824:	2d00      	cmp	r5, #0
 8004826:	daf4      	bge.n	8004812 <__kernel_rem_pio2+0x52>
 8004828:	3501      	adds	r5, #1
 800482a:	2000      	movs	r0, #0
 800482c:	2100      	movs	r1, #0
 800482e:	42a5      	cmp	r5, r4
 8004830:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004834:	d1f6      	bne.n	8004824 <__kernel_rem_pio2+0x64>
 8004836:	9b07      	ldr	r3, [sp, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	db2a      	blt.n	8004892 <__kernel_rem_pio2+0xd2>
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	f103 0a01 	add.w	sl, r3, #1
 8004842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004844:	af22      	add	r7, sp, #136	; 0x88
 8004846:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 800484a:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 800484e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8004852:	463d      	mov	r5, r7
 8004854:	9b00      	ldr	r3, [sp, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f2c0 8180 	blt.w	8004b5c <__kernel_rem_pio2+0x39c>
 800485c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004860:	eb05 040b 	add.w	r4, r5, fp
 8004864:	2600      	movs	r6, #0
 8004866:	2700      	movs	r7, #0
 8004868:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800486c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004870:	f000 ff1a 	bl	80056a8 <__aeabi_dmul>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4630      	mov	r0, r6
 800487a:	4639      	mov	r1, r7
 800487c:	f000 fd62 	bl	8005344 <__adddf3>
 8004880:	42a5      	cmp	r5, r4
 8004882:	4606      	mov	r6, r0
 8004884:	460f      	mov	r7, r1
 8004886:	d1ef      	bne.n	8004868 <__kernel_rem_pio2+0xa8>
 8004888:	3508      	adds	r5, #8
 800488a:	4555      	cmp	r5, sl
 800488c:	e8e8 6702 	strd	r6, r7, [r8], #8
 8004890:	d1e0      	bne.n	8004854 <__kernel_rem_pio2+0x94>
 8004892:	9d07      	ldr	r5, [sp, #28]
 8004894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004896:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800489a:	3b01      	subs	r3, #1
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	a80e      	add	r0, sp, #56	; 0x38
 80048a0:	1d19      	adds	r1, r3, #4
 80048a2:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80048a6:	4403      	add	r3, r0
 80048a8:	4401      	add	r1, r0
 80048aa:	930c      	str	r3, [sp, #48]	; 0x30
 80048ac:	00d3      	lsls	r3, r2, #3
 80048ae:	910d      	str	r1, [sp, #52]	; 0x34
 80048b0:	9305      	str	r3, [sp, #20]
 80048b2:	00ec      	lsls	r4, r5, #3
 80048b4:	ab9a      	add	r3, sp, #616	; 0x268
 80048b6:	4423      	add	r3, r4
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80048be:	dd28      	ble.n	8004912 <__kernel_rem_pio2+0x152>
 80048c0:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80048c4:	445c      	add	r4, fp
 80048c6:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80048ca:	2200      	movs	r2, #0
 80048cc:	4b87      	ldr	r3, [pc, #540]	; (8004aec <__kernel_rem_pio2+0x32c>)
 80048ce:	4630      	mov	r0, r6
 80048d0:	4639      	mov	r1, r7
 80048d2:	f000 fee9 	bl	80056a8 <__aeabi_dmul>
 80048d6:	f001 f981 	bl	8005bdc <__aeabi_d2iz>
 80048da:	f000 fe7f 	bl	80055dc <__aeabi_i2d>
 80048de:	2200      	movs	r2, #0
 80048e0:	4b83      	ldr	r3, [pc, #524]	; (8004af0 <__kernel_rem_pio2+0x330>)
 80048e2:	4680      	mov	r8, r0
 80048e4:	4689      	mov	r9, r1
 80048e6:	f000 fedf 	bl	80056a8 <__aeabi_dmul>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4630      	mov	r0, r6
 80048f0:	4639      	mov	r1, r7
 80048f2:	f000 fd25 	bl	8005340 <__aeabi_dsub>
 80048f6:	f001 f971 	bl	8005bdc <__aeabi_d2iz>
 80048fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80048fe:	f84a 0f04 	str.w	r0, [sl, #4]!
 8004902:	4649      	mov	r1, r9
 8004904:	4640      	mov	r0, r8
 8004906:	f000 fd1d 	bl	8005344 <__adddf3>
 800490a:	455c      	cmp	r4, fp
 800490c:	4606      	mov	r6, r0
 800490e:	460f      	mov	r7, r1
 8004910:	d1db      	bne.n	80048ca <__kernel_rem_pio2+0x10a>
 8004912:	9c06      	ldr	r4, [sp, #24]
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	4622      	mov	r2, r4
 800491a:	f000 fc81 	bl	8005220 <scalbn>
 800491e:	2200      	movs	r2, #0
 8004920:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004924:	4606      	mov	r6, r0
 8004926:	460f      	mov	r7, r1
 8004928:	f000 febe 	bl	80056a8 <__aeabi_dmul>
 800492c:	f000 fbf0 	bl	8005110 <floor>
 8004930:	2200      	movs	r2, #0
 8004932:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <__kernel_rem_pio2+0x334>)
 8004934:	f000 feb8 	bl	80056a8 <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	f000 fcfe 	bl	8005340 <__aeabi_dsub>
 8004944:	460f      	mov	r7, r1
 8004946:	4606      	mov	r6, r0
 8004948:	f001 f948 	bl	8005bdc <__aeabi_d2iz>
 800494c:	4680      	mov	r8, r0
 800494e:	f000 fe45 	bl	80055dc <__aeabi_i2d>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4630      	mov	r0, r6
 8004958:	4639      	mov	r1, r7
 800495a:	f000 fcf1 	bl	8005340 <__aeabi_dsub>
 800495e:	2c00      	cmp	r4, #0
 8004960:	4606      	mov	r6, r0
 8004962:	460f      	mov	r7, r1
 8004964:	f340 80e1 	ble.w	8004b2a <__kernel_rem_pio2+0x36a>
 8004968:	1e69      	subs	r1, r5, #1
 800496a:	ab0e      	add	r3, sp, #56	; 0x38
 800496c:	f1c4 0218 	rsb	r2, r4, #24
 8004970:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004974:	fa43 f002 	asr.w	r0, r3, r2
 8004978:	fa00 f902 	lsl.w	r9, r0, r2
 800497c:	f1c4 0217 	rsb	r2, r4, #23
 8004980:	ac0e      	add	r4, sp, #56	; 0x38
 8004982:	ebc9 0303 	rsb	r3, r9, r3
 8004986:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 800498a:	4480      	add	r8, r0
 800498c:	fa43 f902 	asr.w	r9, r3, r2
 8004990:	f1b9 0f00 	cmp.w	r9, #0
 8004994:	dd32      	ble.n	80049fc <__kernel_rem_pio2+0x23c>
 8004996:	2d00      	cmp	r5, #0
 8004998:	f108 0801 	add.w	r8, r8, #1
 800499c:	f340 8271 	ble.w	8004e82 <__kernel_rem_pio2+0x6c2>
 80049a0:	2200      	movs	r2, #0
 80049a2:	4614      	mov	r4, r2
 80049a4:	a90d      	add	r1, sp, #52	; 0x34
 80049a6:	e007      	b.n	80049b8 <__kernel_rem_pio2+0x1f8>
 80049a8:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 80049ac:	b10b      	cbz	r3, 80049b2 <__kernel_rem_pio2+0x1f2>
 80049ae:	6008      	str	r0, [r1, #0]
 80049b0:	2401      	movs	r4, #1
 80049b2:	3201      	adds	r2, #1
 80049b4:	4295      	cmp	r5, r2
 80049b6:	dd0d      	ble.n	80049d4 <__kernel_rem_pio2+0x214>
 80049b8:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d0f3      	beq.n	80049a8 <__kernel_rem_pio2+0x1e8>
 80049c0:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80049c4:	3201      	adds	r2, #1
 80049c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80049ca:	4295      	cmp	r5, r2
 80049cc:	600b      	str	r3, [r1, #0]
 80049ce:	f04f 0401 	mov.w	r4, #1
 80049d2:	dcf1      	bgt.n	80049b8 <__kernel_rem_pio2+0x1f8>
 80049d4:	9b06      	ldr	r3, [sp, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	dd0d      	ble.n	80049f6 <__kernel_rem_pio2+0x236>
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f000 80ad 	beq.w	8004b3a <__kernel_rem_pio2+0x37a>
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d108      	bne.n	80049f6 <__kernel_rem_pio2+0x236>
 80049e4:	1e6a      	subs	r2, r5, #1
 80049e6:	ab0e      	add	r3, sp, #56	; 0x38
 80049e8:	a90e      	add	r1, sp, #56	; 0x38
 80049ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ee:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80049f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80049f6:	f1b9 0f02 	cmp.w	r9, #2
 80049fa:	d07d      	beq.n	8004af8 <__kernel_rem_pio2+0x338>
 80049fc:	4630      	mov	r0, r6
 80049fe:	4639      	mov	r1, r7
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	f001 f8b8 	bl	8005b78 <__aeabi_dcmpeq>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	f000 80c3 	beq.w	8004b94 <__kernel_rem_pio2+0x3d4>
 8004a0e:	9b07      	ldr	r3, [sp, #28]
 8004a10:	f105 3aff 	add.w	sl, r5, #4294967295
 8004a14:	4553      	cmp	r3, sl
 8004a16:	dc0d      	bgt.n	8004a34 <__kernel_rem_pio2+0x274>
 8004a18:	ab0e      	add	r3, sp, #56	; 0x38
 8004a1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a1c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004a20:	2200      	movs	r2, #0
 8004a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004a26:	4283      	cmp	r3, r0
 8004a28:	ea42 0201 	orr.w	r2, r2, r1
 8004a2c:	d1f9      	bne.n	8004a22 <__kernel_rem_pio2+0x262>
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	f040 820c 	bne.w	8004e4c <__kernel_rem_pio2+0x68c>
 8004a34:	9b07      	ldr	r3, [sp, #28]
 8004a36:	aa0e      	add	r2, sp, #56	; 0x38
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 821d 	bne.w	8004e7e <__kernel_rem_pio2+0x6be>
 8004a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a46:	2301      	movs	r3, #1
 8004a48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	2900      	cmp	r1, #0
 8004a50:	d0fa      	beq.n	8004a48 <__kernel_rem_pio2+0x288>
 8004a52:	18eb      	adds	r3, r5, r3
 8004a54:	f105 0a01 	add.w	sl, r5, #1
 8004a58:	459a      	cmp	sl, r3
 8004a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5c:	dc40      	bgt.n	8004ae0 <__kernel_rem_pio2+0x320>
 8004a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a62:	eb0a 0903 	add.w	r9, sl, r3
 8004a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a68:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004a70:	f109 39ff 	add.w	r9, r9, #4294967295
 8004a74:	4415      	add	r5, r2
 8004a76:	eb01 0b02 	add.w	fp, r1, r2
 8004a7a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8004a7e:	ab22      	add	r3, sp, #136	; 0x88
 8004a80:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004a84:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	ab72      	add	r3, sp, #456	; 0x1c8
 8004a8c:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004a90:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8004a94:	f000 fda2 	bl	80055dc <__aeabi_i2d>
 8004a98:	9b00      	ldr	r3, [sp, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	e8e8 0102 	strd	r0, r1, [r8], #8
 8004aa0:	f04f 0600 	mov.w	r6, #0
 8004aa4:	f04f 0700 	mov.w	r7, #0
 8004aa8:	db15      	blt.n	8004ad6 <__kernel_rem_pio2+0x316>
 8004aaa:	9b05      	ldr	r3, [sp, #20]
 8004aac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004ab0:	eb08 0503 	add.w	r5, r8, r3
 8004ab4:	4644      	mov	r4, r8
 8004ab6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004aba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8004abe:	f000 fdf3 	bl	80056a8 <__aeabi_dmul>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f000 fc3b 	bl	8005344 <__adddf3>
 8004ace:	42ac      	cmp	r4, r5
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	d1ef      	bne.n	8004ab6 <__kernel_rem_pio2+0x2f6>
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	4598      	cmp	r8, r3
 8004ada:	e8ea 6702 	strd	r6, r7, [sl], #8
 8004ade:	d1d7      	bne.n	8004a90 <__kernel_rem_pio2+0x2d0>
 8004ae0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ae2:	e6e6      	b.n	80048b2 <__kernel_rem_pio2+0xf2>
 8004ae4:	08008874 	.word	0x08008874
 8004ae8:	2aaaaaab 	.word	0x2aaaaaab
 8004aec:	3e700000 	.word	0x3e700000
 8004af0:	41700000 	.word	0x41700000
 8004af4:	40200000 	.word	0x40200000
 8004af8:	4632      	mov	r2, r6
 8004afa:	463b      	mov	r3, r7
 8004afc:	2000      	movs	r0, #0
 8004afe:	49bb      	ldr	r1, [pc, #748]	; (8004dec <__kernel_rem_pio2+0x62c>)
 8004b00:	f000 fc1e 	bl	8005340 <__aeabi_dsub>
 8004b04:	4606      	mov	r6, r0
 8004b06:	460f      	mov	r7, r1
 8004b08:	2c00      	cmp	r4, #0
 8004b0a:	f43f af77 	beq.w	80049fc <__kernel_rem_pio2+0x23c>
 8004b0e:	9a06      	ldr	r2, [sp, #24]
 8004b10:	49b6      	ldr	r1, [pc, #728]	; (8004dec <__kernel_rem_pio2+0x62c>)
 8004b12:	2000      	movs	r0, #0
 8004b14:	f000 fb84 	bl	8005220 <scalbn>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	4639      	mov	r1, r7
 8004b20:	f000 fc0e 	bl	8005340 <__aeabi_dsub>
 8004b24:	4606      	mov	r6, r0
 8004b26:	460f      	mov	r7, r1
 8004b28:	e768      	b.n	80049fc <__kernel_rem_pio2+0x23c>
 8004b2a:	d110      	bne.n	8004b4e <__kernel_rem_pio2+0x38e>
 8004b2c:	1e6b      	subs	r3, r5, #1
 8004b2e:	aa0e      	add	r2, sp, #56	; 0x38
 8004b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b34:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004b38:	e72a      	b.n	8004990 <__kernel_rem_pio2+0x1d0>
 8004b3a:	1e6a      	subs	r2, r5, #1
 8004b3c:	ab0e      	add	r3, sp, #56	; 0x38
 8004b3e:	a90e      	add	r1, sp, #56	; 0x38
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004b48:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b4c:	e753      	b.n	80049f6 <__kernel_rem_pio2+0x236>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4ba7      	ldr	r3, [pc, #668]	; (8004df0 <__kernel_rem_pio2+0x630>)
 8004b52:	f001 f82f 	bl	8005bb4 <__aeabi_dcmpge>
 8004b56:	b950      	cbnz	r0, 8004b6e <__kernel_rem_pio2+0x3ae>
 8004b58:	4681      	mov	r9, r0
 8004b5a:	e74f      	b.n	80049fc <__kernel_rem_pio2+0x23c>
 8004b5c:	3508      	adds	r5, #8
 8004b5e:	2600      	movs	r6, #0
 8004b60:	2700      	movs	r7, #0
 8004b62:	4555      	cmp	r5, sl
 8004b64:	e8e8 6702 	strd	r6, r7, [r8], #8
 8004b68:	f47f ae74 	bne.w	8004854 <__kernel_rem_pio2+0x94>
 8004b6c:	e691      	b.n	8004892 <__kernel_rem_pio2+0xd2>
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	f108 0801 	add.w	r8, r8, #1
 8004b74:	bfc8      	it	gt
 8004b76:	f04f 0902 	movgt.w	r9, #2
 8004b7a:	f73f af11 	bgt.w	80049a0 <__kernel_rem_pio2+0x1e0>
 8004b7e:	4632      	mov	r2, r6
 8004b80:	463b      	mov	r3, r7
 8004b82:	2000      	movs	r0, #0
 8004b84:	4999      	ldr	r1, [pc, #612]	; (8004dec <__kernel_rem_pio2+0x62c>)
 8004b86:	f000 fbdb 	bl	8005340 <__aeabi_dsub>
 8004b8a:	f04f 0902 	mov.w	r9, #2
 8004b8e:	4606      	mov	r6, r0
 8004b90:	460f      	mov	r7, r1
 8004b92:	e733      	b.n	80049fc <__kernel_rem_pio2+0x23c>
 8004b94:	9b06      	ldr	r3, [sp, #24]
 8004b96:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b9a:	425a      	negs	r2, r3
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	f8cd 8014 	str.w	r8, [sp, #20]
 8004ba4:	f000 fb3c 	bl	8005220 <scalbn>
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4b92      	ldr	r3, [pc, #584]	; (8004df4 <__kernel_rem_pio2+0x634>)
 8004bac:	4606      	mov	r6, r0
 8004bae:	460f      	mov	r7, r1
 8004bb0:	f001 f800 	bl	8005bb4 <__aeabi_dcmpge>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	f000 81e6 	beq.w	8004f86 <__kernel_rem_pio2+0x7c6>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4b8e      	ldr	r3, [pc, #568]	; (8004df8 <__kernel_rem_pio2+0x638>)
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f000 fd71 	bl	80056a8 <__aeabi_dmul>
 8004bc6:	f001 f809 	bl	8005bdc <__aeabi_d2iz>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	f000 fd06 	bl	80055dc <__aeabi_i2d>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4b88      	ldr	r3, [pc, #544]	; (8004df4 <__kernel_rem_pio2+0x634>)
 8004bd4:	f000 fd68 	bl	80056a8 <__aeabi_dmul>
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4602      	mov	r2, r0
 8004bdc:	4639      	mov	r1, r7
 8004bde:	4630      	mov	r0, r6
 8004be0:	f000 fbae 	bl	8005340 <__aeabi_dsub>
 8004be4:	f000 fffa 	bl	8005bdc <__aeabi_d2iz>
 8004be8:	9b06      	ldr	r3, [sp, #24]
 8004bea:	3318      	adds	r3, #24
 8004bec:	f105 0a01 	add.w	sl, r5, #1
 8004bf0:	9306      	str	r3, [sp, #24]
 8004bf2:	ab0e      	add	r3, sp, #56	; 0x38
 8004bf4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004bf8:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 8004bfc:	9a06      	ldr	r2, [sp, #24]
 8004bfe:	497b      	ldr	r1, [pc, #492]	; (8004dec <__kernel_rem_pio2+0x62c>)
 8004c00:	2000      	movs	r0, #0
 8004c02:	f000 fb0d 	bl	8005220 <scalbn>
 8004c06:	f1ba 0f00 	cmp.w	sl, #0
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	f2c0 80c1 	blt.w	8004d94 <__kernel_rem_pio2+0x5d4>
 8004c12:	f10a 0301 	add.w	r3, sl, #1
 8004c16:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004c1a:	af72      	add	r7, sp, #456	; 0x1c8
 8004c1c:	aa0e      	add	r2, sp, #56	; 0x38
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8004c24:	eb07 0608 	add.w	r6, r7, r8
 8004c28:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 8004c2c:	f000 fcd6 	bl	80055dc <__aeabi_i2d>
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	f000 fd38 	bl	80056a8 <__aeabi_dmul>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004c3e:	4b6e      	ldr	r3, [pc, #440]	; (8004df8 <__kernel_rem_pio2+0x638>)
 8004c40:	4620      	mov	r0, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	f000 fd30 	bl	80056a8 <__aeabi_dmul>
 8004c48:	42be      	cmp	r6, r7
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	d1eb      	bne.n	8004c28 <__kernel_rem_pio2+0x468>
 8004c50:	f1a8 0808 	sub.w	r8, r8, #8
 8004c54:	eb06 0308 	add.w	r3, r6, r8
 8004c58:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8004c5c:	f8cd a018 	str.w	sl, [sp, #24]
 8004c60:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004c64:	f8cd 9010 	str.w	r9, [sp, #16]
 8004c68:	f04f 0800 	mov.w	r8, #0
 8004c6c:	469b      	mov	fp, r3
 8004c6e:	f1ba 0f00 	cmp.w	sl, #0
 8004c72:	f2c0 808c 	blt.w	8004d8e <__kernel_rem_pio2+0x5ce>
 8004c76:	f1b8 0f00 	cmp.w	r8, #0
 8004c7a:	f2c0 8088 	blt.w	8004d8e <__kernel_rem_pio2+0x5ce>
 8004c7e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004dfc <__kernel_rem_pio2+0x63c>
 8004c82:	465d      	mov	r5, fp
 8004c84:	2600      	movs	r6, #0
 8004c86:	2700      	movs	r7, #0
 8004c88:	2400      	movs	r4, #0
 8004c8a:	e001      	b.n	8004c90 <__kernel_rem_pio2+0x4d0>
 8004c8c:	4544      	cmp	r4, r8
 8004c8e:	dc10      	bgt.n	8004cb2 <__kernel_rem_pio2+0x4f2>
 8004c90:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004c94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004c98:	f000 fd06 	bl	80056a8 <__aeabi_dmul>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f000 fb4e 	bl	8005344 <__adddf3>
 8004ca8:	3401      	adds	r4, #1
 8004caa:	45a2      	cmp	sl, r4
 8004cac:	4606      	mov	r6, r0
 8004cae:	460f      	mov	r7, r1
 8004cb0:	daec      	bge.n	8004c8c <__kernel_rem_pio2+0x4cc>
 8004cb2:	9b04      	ldr	r3, [sp, #16]
 8004cb4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004cb8:	e9c3 6700 	strd	r6, r7, [r3]
 8004cbc:	9b00      	ldr	r3, [sp, #0]
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	4598      	cmp	r8, r3
 8004cc4:	f1ab 0b08 	sub.w	fp, fp, #8
 8004cc8:	d1d1      	bne.n	8004c6e <__kernel_rem_pio2+0x4ae>
 8004cca:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004ccc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8004cd0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d835      	bhi.n	8004d44 <__kernel_rem_pio2+0x584>
 8004cd8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004cdc:	0004003b 	.word	0x0004003b
 8004ce0:	00d50004 	.word	0x00d50004
 8004ce4:	9b00      	ldr	r3, [sp, #0]
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
 8004cec:	2100      	movs	r1, #0
 8004cee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004cf2:	f000 fb27 	bl	8005344 <__adddf3>
 8004cf6:	454c      	cmp	r4, r9
 8004cf8:	d1f9      	bne.n	8004cee <__kernel_rem_pio2+0x52e>
 8004cfa:	9b03      	ldr	r3, [sp, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8087 	beq.w	8004e10 <__kernel_rem_pio2+0x650>
 8004d02:	9d08      	ldr	r5, [sp, #32]
 8004d04:	4602      	mov	r2, r0
 8004d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d0a:	e885 000c 	stmia.w	r5, {r2, r3}
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004d16:	f000 fb13 	bl	8005340 <__aeabi_dsub>
 8004d1a:	f1ba 0f00 	cmp.w	sl, #0
 8004d1e:	dd0b      	ble.n	8004d38 <__kernel_rem_pio2+0x578>
 8004d20:	ad4c      	add	r5, sp, #304	; 0x130
 8004d22:	2401      	movs	r4, #1
 8004d24:	3401      	adds	r4, #1
 8004d26:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004d2a:	f000 fb0b 	bl	8005344 <__adddf3>
 8004d2e:	45a2      	cmp	sl, r4
 8004d30:	daf8      	bge.n	8004d24 <__kernel_rem_pio2+0x564>
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d078      	beq.n	8004e2a <__kernel_rem_pio2+0x66a>
 8004d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d3c:	9908      	ldr	r1, [sp, #32]
 8004d3e:	4602      	mov	r2, r0
 8004d40:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d44:	9b05      	ldr	r3, [sp, #20]
 8004d46:	f003 0007 	and.w	r0, r3, #7
 8004d4a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d52:	9b00      	ldr	r3, [sp, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	2100      	movs	r1, #0
 8004d58:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8004d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d60:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8004d64:	f000 faee 	bl	8005344 <__adddf3>
 8004d68:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004d6c:	d1f6      	bne.n	8004d5c <__kernel_rem_pio2+0x59c>
 8004d6e:	9b03      	ldr	r3, [sp, #12]
 8004d70:	4602      	mov	r2, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d065      	beq.n	8004e42 <__kernel_rem_pio2+0x682>
 8004d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d7a:	9908      	ldr	r1, [sp, #32]
 8004d7c:	e9c1 2300 	strd	r2, r3, [r1]
 8004d80:	9b05      	ldr	r3, [sp, #20]
 8004d82:	f003 0007 	and.w	r0, r3, #7
 8004d86:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8e:	2600      	movs	r6, #0
 8004d90:	2700      	movs	r7, #0
 8004d92:	e78e      	b.n	8004cb2 <__kernel_rem_pio2+0x4f2>
 8004d94:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d8d4      	bhi.n	8004d44 <__kernel_rem_pio2+0x584>
 8004d9a:	e8df f003 	tbb	[pc, r3]
 8004d9e:	314c      	.short	0x314c
 8004da0:	0231      	.short	0x0231
 8004da2:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	2000      	movs	r0, #0
 8004daa:	2100      	movs	r1, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80d8 	beq.w	8004f62 <__kernel_rem_pio2+0x7a2>
 8004db2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004db6:	9f08      	ldr	r7, [sp, #32]
 8004db8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004dbc:	f8d9 5000 	ldr.w	r5, [r9]
 8004dc0:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8004dc4:	6138      	str	r0, [r7, #16]
 8004dc6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	9b05      	ldr	r3, [sp, #20]
 8004dce:	603d      	str	r5, [r7, #0]
 8004dd0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004dd4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004dd8:	f003 0007 	and.w	r0, r3, #7
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	60bc      	str	r4, [r7, #8]
 8004de0:	6179      	str	r1, [r7, #20]
 8004de2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	3ff00000 	.word	0x3ff00000
 8004df0:	3fe00000 	.word	0x3fe00000
 8004df4:	41700000 	.word	0x41700000
 8004df8:	3e700000 	.word	0x3e700000
 8004dfc:	08008888 	.word	0x08008888
 8004e00:	9b03      	ldr	r3, [sp, #12]
 8004e02:	2000      	movs	r0, #0
 8004e04:	2100      	movs	r1, #0
 8004e06:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f47f af79 	bne.w	8004d02 <__kernel_rem_pio2+0x542>
 8004e10:	9b08      	ldr	r3, [sp, #32]
 8004e12:	4602      	mov	r2, r0
 8004e14:	e9c3 0100 	strd	r0, r1, [r3]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004e1e:	f000 fa8f 	bl	8005340 <__aeabi_dsub>
 8004e22:	f1ba 0f00 	cmp.w	sl, #0
 8004e26:	f73f af7b 	bgt.w	8004d20 <__kernel_rem_pio2+0x560>
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	9908      	ldr	r1, [sp, #32]
 8004e2e:	4602      	mov	r2, r0
 8004e30:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004e34:	e786      	b.n	8004d44 <__kernel_rem_pio2+0x584>
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	2000      	movs	r0, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d199      	bne.n	8004d76 <__kernel_rem_pio2+0x5b6>
 8004e42:	460b      	mov	r3, r1
 8004e44:	9908      	ldr	r1, [sp, #32]
 8004e46:	e9c1 2300 	strd	r2, r3, [r1]
 8004e4a:	e799      	b.n	8004d80 <__kernel_rem_pio2+0x5c0>
 8004e4c:	ab0e      	add	r3, sp, #56	; 0x38
 8004e4e:	9a06      	ldr	r2, [sp, #24]
 8004e50:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8004e54:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e58:	3a18      	subs	r2, #24
 8004e5a:	f8cd 8014 	str.w	r8, [sp, #20]
 8004e5e:	9206      	str	r2, [sp, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f aecb 	bne.w	8004bfc <__kernel_rem_pio2+0x43c>
 8004e66:	ab0e      	add	r3, sp, #56	; 0x38
 8004e68:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004e6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004e70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e74:	3a18      	subs	r2, #24
 8004e76:	2900      	cmp	r1, #0
 8004e78:	d0f8      	beq.n	8004e6c <__kernel_rem_pio2+0x6ac>
 8004e7a:	9206      	str	r2, [sp, #24]
 8004e7c:	e6be      	b.n	8004bfc <__kernel_rem_pio2+0x43c>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e5e7      	b.n	8004a52 <__kernel_rem_pio2+0x292>
 8004e82:	2400      	movs	r4, #0
 8004e84:	e5a6      	b.n	80049d4 <__kernel_rem_pio2+0x214>
 8004e86:	f1ba 0f00 	cmp.w	sl, #0
 8004e8a:	dd8c      	ble.n	8004da6 <__kernel_rem_pio2+0x5e6>
 8004e8c:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 8004e90:	eb09 0b08 	add.w	fp, r9, r8
 8004e94:	f108 0c08 	add.w	ip, r8, #8
 8004e98:	e9db 6700 	ldrd	r6, r7, [fp]
 8004e9c:	44cc      	add	ip, r9
 8004e9e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004ea2:	46e0      	mov	r8, ip
 8004ea4:	ed3b 7b02 	vldmdb	fp!, {d7}
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	ec53 2b17 	vmov	r2, r3, d7
 8004eae:	4639      	mov	r1, r7
 8004eb0:	ed8d 7b00 	vstr	d7, [sp]
 8004eb4:	f000 fa46 	bl	8005344 <__adddf3>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ec4:	f000 fa3c 	bl	8005340 <__aeabi_dsub>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4639      	mov	r1, r7
 8004ed0:	f000 fa38 	bl	8005344 <__adddf3>
 8004ed4:	45cb      	cmp	fp, r9
 8004ed6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004eda:	4626      	mov	r6, r4
 8004edc:	462f      	mov	r7, r5
 8004ede:	e9cb 4500 	strd	r4, r5, [fp]
 8004ee2:	d1df      	bne.n	8004ea4 <__kernel_rem_pio2+0x6e4>
 8004ee4:	f1ba 0f01 	cmp.w	sl, #1
 8004ee8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004eec:	f77f af5b 	ble.w	8004da6 <__kernel_rem_pio2+0x5e6>
 8004ef0:	eb09 0508 	add.w	r5, r9, r8
 8004ef4:	f108 0408 	add.w	r4, r8, #8
 8004ef8:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8004efc:	444c      	add	r4, r9
 8004efe:	46a0      	mov	r8, r4
 8004f00:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
 8004f04:	ed35 7b02 	vldmdb	r5!, {d7}
 8004f08:	4652      	mov	r2, sl
 8004f0a:	465b      	mov	r3, fp
 8004f0c:	ec51 0b17 	vmov	r0, r1, d7
 8004f10:	f8cd c010 	str.w	ip, [sp, #16]
 8004f14:	ed8d 7b00 	vstr	d7, [sp]
 8004f18:	f000 fa14 	bl	8005344 <__adddf3>
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	460f      	mov	r7, r1
 8004f20:	4632      	mov	r2, r6
 8004f22:	463b      	mov	r3, r7
 8004f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f28:	f000 fa0a 	bl	8005340 <__aeabi_dsub>
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	465b      	mov	r3, fp
 8004f30:	f000 fa08 	bl	8005344 <__adddf3>
 8004f34:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004f38:	4565      	cmp	r5, ip
 8004f3a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004f3e:	46b2      	mov	sl, r6
 8004f40:	46bb      	mov	fp, r7
 8004f42:	e9c5 6700 	strd	r6, r7, [r5]
 8004f46:	d1dd      	bne.n	8004f04 <__kernel_rem_pio2+0x744>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	ad4e      	add	r5, sp, #312	; 0x138
 8004f4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f52:	f000 f9f7 	bl	8005344 <__adddf3>
 8004f56:	42ac      	cmp	r4, r5
 8004f58:	d1f9      	bne.n	8004f4e <__kernel_rem_pio2+0x78e>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f47f af28 	bne.w	8004db2 <__kernel_rem_pio2+0x5f2>
 8004f62:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 8004f66:	9f08      	ldr	r7, [sp, #32]
 8004f68:	e9d9 4500 	ldrd	r4, r5, [r9]
 8004f6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004f76:	f003 0007 	and.w	r0, r3, #7
 8004f7a:	e9c7 4500 	strd	r4, r5, [r7]
 8004f7e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f86:	4630      	mov	r0, r6
 8004f88:	4639      	mov	r1, r7
 8004f8a:	f000 fe27 	bl	8005bdc <__aeabi_d2iz>
 8004f8e:	ab0e      	add	r3, sp, #56	; 0x38
 8004f90:	46aa      	mov	sl, r5
 8004f92:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004f96:	e631      	b.n	8004bfc <__kernel_rem_pio2+0x43c>

08004f98 <__kernel_sin>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004fa0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
 8004faa:	4690      	mov	r8, r2
 8004fac:	4699      	mov	r9, r3
 8004fae:	da04      	bge.n	8004fba <__kernel_sin+0x22>
 8004fb0:	f000 fe14 	bl	8005bdc <__aeabi_d2iz>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f000 8083 	beq.w	80050c0 <__kernel_sin+0x128>
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f000 fb71 	bl	80056a8 <__aeabi_dmul>
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460f      	mov	r7, r1
 8004fce:	f000 fb6b 	bl	80056a8 <__aeabi_dmul>
 8004fd2:	a342      	add	r3, pc, #264	; (adr r3, 80050dc <__kernel_sin+0x144>)
 8004fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd8:	4682      	mov	sl, r0
 8004fda:	468b      	mov	fp, r1
 8004fdc:	4630      	mov	r0, r6
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f000 fb62 	bl	80056a8 <__aeabi_dmul>
 8004fe4:	a33f      	add	r3, pc, #252	; (adr r3, 80050e4 <__kernel_sin+0x14c>)
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f000 f9a9 	bl	8005340 <__aeabi_dsub>
 8004fee:	4632      	mov	r2, r6
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	f000 fb59 	bl	80056a8 <__aeabi_dmul>
 8004ff6:	a33d      	add	r3, pc, #244	; (adr r3, 80050ec <__kernel_sin+0x154>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f000 f9a2 	bl	8005344 <__adddf3>
 8005000:	4632      	mov	r2, r6
 8005002:	463b      	mov	r3, r7
 8005004:	f000 fb50 	bl	80056a8 <__aeabi_dmul>
 8005008:	a33a      	add	r3, pc, #232	; (adr r3, 80050f4 <__kernel_sin+0x15c>)
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f000 f997 	bl	8005340 <__aeabi_dsub>
 8005012:	4632      	mov	r2, r6
 8005014:	463b      	mov	r3, r7
 8005016:	f000 fb47 	bl	80056a8 <__aeabi_dmul>
 800501a:	a338      	add	r3, pc, #224	; (adr r3, 80050fc <__kernel_sin+0x164>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f000 f990 	bl	8005344 <__adddf3>
 8005024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005026:	e9cd 0100 	strd	r0, r1, [sp]
 800502a:	b39b      	cbz	r3, 8005094 <__kernel_sin+0xfc>
 800502c:	4640      	mov	r0, r8
 800502e:	4649      	mov	r1, r9
 8005030:	2200      	movs	r2, #0
 8005032:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <__kernel_sin+0x140>)
 8005034:	f000 fb38 	bl	80056a8 <__aeabi_dmul>
 8005038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800503c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005040:	4650      	mov	r0, sl
 8005042:	4659      	mov	r1, fp
 8005044:	f000 fb30 	bl	80056a8 <__aeabi_dmul>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005050:	f000 f976 	bl	8005340 <__aeabi_dsub>
 8005054:	4632      	mov	r2, r6
 8005056:	463b      	mov	r3, r7
 8005058:	f000 fb26 	bl	80056a8 <__aeabi_dmul>
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	f000 f96e 	bl	8005340 <__aeabi_dsub>
 8005064:	a31a      	add	r3, pc, #104	; (adr r3, 80050d0 <__kernel_sin+0x138>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	4606      	mov	r6, r0
 800506c:	460f      	mov	r7, r1
 800506e:	4650      	mov	r0, sl
 8005070:	4659      	mov	r1, fp
 8005072:	f000 fb19 	bl	80056a8 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	f000 f961 	bl	8005344 <__adddf3>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4620      	mov	r0, r4
 8005088:	4629      	mov	r1, r5
 800508a:	f000 f959 	bl	8005340 <__aeabi_dsub>
 800508e:	b005      	add	sp, #20
 8005090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005094:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005098:	4630      	mov	r0, r6
 800509a:	4639      	mov	r1, r7
 800509c:	f000 fb04 	bl	80056a8 <__aeabi_dmul>
 80050a0:	a30b      	add	r3, pc, #44	; (adr r3, 80050d0 <__kernel_sin+0x138>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f000 f94b 	bl	8005340 <__aeabi_dsub>
 80050aa:	4652      	mov	r2, sl
 80050ac:	465b      	mov	r3, fp
 80050ae:	f000 fafb 	bl	80056a8 <__aeabi_dmul>
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	f000 f945 	bl	8005344 <__adddf3>
 80050ba:	b005      	add	sp, #20
 80050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c0:	4620      	mov	r0, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	b005      	add	sp, #20
 80050c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w
 80050d0:	55555549 	.word	0x55555549
 80050d4:	3fc55555 	.word	0x3fc55555
 80050d8:	3fe00000 	.word	0x3fe00000
 80050dc:	5acfd57c 	.word	0x5acfd57c
 80050e0:	3de5d93a 	.word	0x3de5d93a
 80050e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80050e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80050ec:	57b1fe7d 	.word	0x57b1fe7d
 80050f0:	3ec71de3 	.word	0x3ec71de3
 80050f4:	19c161d5 	.word	0x19c161d5
 80050f8:	3f2a01a0 	.word	0x3f2a01a0
 80050fc:	1110f8a6 	.word	0x1110f8a6
 8005100:	3f811111 	.word	0x3f811111
 8005104:	f3af 8000 	nop.w

08005108 <fabs>:
 8005108:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop

08005110 <floor>:
 8005110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005114:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005118:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 800511c:	2d13      	cmp	r5, #19
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	460c      	mov	r4, r1
 8005124:	4607      	mov	r7, r0
 8005126:	4689      	mov	r9, r1
 8005128:	4606      	mov	r6, r0
 800512a:	dc1d      	bgt.n	8005168 <floor+0x58>
 800512c:	2d00      	cmp	r5, #0
 800512e:	db40      	blt.n	80051b2 <floor+0xa2>
 8005130:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800521c <floor+0x10c>
 8005134:	fa48 f805 	asr.w	r8, r8, r5
 8005138:	ea08 0e01 	and.w	lr, r8, r1
 800513c:	ea5e 0707 	orrs.w	r7, lr, r7
 8005140:	d017      	beq.n	8005172 <floor+0x62>
 8005142:	a334      	add	r3, pc, #208	; (adr r3, 8005214 <floor+0x104>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f000 f8fc 	bl	8005344 <__adddf3>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f000 fd3a 	bl	8005bc8 <__aeabi_dcmpgt>
 8005154:	b120      	cbz	r0, 8005160 <floor+0x50>
 8005156:	2c00      	cmp	r4, #0
 8005158:	db3f      	blt.n	80051da <floor+0xca>
 800515a:	ea29 0408 	bic.w	r4, r9, r8
 800515e:	2600      	movs	r6, #0
 8005160:	4621      	mov	r1, r4
 8005162:	4630      	mov	r0, r6
 8005164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005168:	2d33      	cmp	r5, #51	; 0x33
 800516a:	dd06      	ble.n	800517a <floor+0x6a>
 800516c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005170:	d02f      	beq.n	80051d2 <floor+0xc2>
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517a:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 800517e:	f04f 37ff 	mov.w	r7, #4294967295
 8005182:	fa27 f70e 	lsr.w	r7, r7, lr
 8005186:	4207      	tst	r7, r0
 8005188:	d0f3      	beq.n	8005172 <floor+0x62>
 800518a:	a322      	add	r3, pc, #136	; (adr r3, 8005214 <floor+0x104>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f000 f8d8 	bl	8005344 <__adddf3>
 8005194:	2200      	movs	r2, #0
 8005196:	2300      	movs	r3, #0
 8005198:	f000 fd16 	bl	8005bc8 <__aeabi_dcmpgt>
 800519c:	2800      	cmp	r0, #0
 800519e:	d0df      	beq.n	8005160 <floor+0x50>
 80051a0:	2c00      	cmp	r4, #0
 80051a2:	db1f      	blt.n	80051e4 <floor+0xd4>
 80051a4:	464c      	mov	r4, r9
 80051a6:	ea26 0607 	bic.w	r6, r6, r7
 80051aa:	4621      	mov	r1, r4
 80051ac:	4630      	mov	r0, r6
 80051ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b2:	a318      	add	r3, pc, #96	; (adr r3, 8005214 <floor+0x104>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f000 f8c4 	bl	8005344 <__adddf3>
 80051bc:	2200      	movs	r2, #0
 80051be:	2300      	movs	r3, #0
 80051c0:	f000 fd02 	bl	8005bc8 <__aeabi_dcmpgt>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d0cb      	beq.n	8005160 <floor+0x50>
 80051c8:	2c00      	cmp	r4, #0
 80051ca:	db19      	blt.n	8005200 <floor+0xf0>
 80051cc:	2600      	movs	r6, #0
 80051ce:	4634      	mov	r4, r6
 80051d0:	e7c6      	b.n	8005160 <floor+0x50>
 80051d2:	f000 f8b7 	bl	8005344 <__adddf3>
 80051d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051de:	412b      	asrs	r3, r5
 80051e0:	4499      	add	r9, r3
 80051e2:	e7ba      	b.n	800515a <floor+0x4a>
 80051e4:	2d14      	cmp	r5, #20
 80051e6:	d008      	beq.n	80051fa <floor+0xea>
 80051e8:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 80051ec:	f108 0803 	add.w	r8, r8, #3
 80051f0:	2301      	movs	r3, #1
 80051f2:	fa03 f308 	lsl.w	r3, r3, r8
 80051f6:	199e      	adds	r6, r3, r6
 80051f8:	d3d4      	bcc.n	80051a4 <floor+0x94>
 80051fa:	f109 0901 	add.w	r9, r9, #1
 80051fe:	e7d1      	b.n	80051a4 <floor+0x94>
 8005200:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <floor+0x100>)
 8005206:	433a      	orrs	r2, r7
 8005208:	bf18      	it	ne
 800520a:	461c      	movne	r4, r3
 800520c:	2600      	movs	r6, #0
 800520e:	e7a7      	b.n	8005160 <floor+0x50>
 8005210:	bff00000 	.word	0xbff00000
 8005214:	8800759c 	.word	0x8800759c
 8005218:	7e37e43c 	.word	0x7e37e43c
 800521c:	000fffff 	.word	0x000fffff

08005220 <scalbn>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005226:	4604      	mov	r4, r0
 8005228:	460d      	mov	r5, r1
 800522a:	460b      	mov	r3, r1
 800522c:	4617      	mov	r7, r2
 800522e:	bb16      	cbnz	r6, 8005276 <scalbn+0x56>
 8005230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005234:	4303      	orrs	r3, r0
 8005236:	d032      	beq.n	800529e <scalbn+0x7e>
 8005238:	2200      	movs	r2, #0
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <scalbn+0xf8>)
 800523c:	f000 fa34 	bl	80056a8 <__aeabi_dmul>
 8005240:	4a36      	ldr	r2, [pc, #216]	; (800531c <scalbn+0xfc>)
 8005242:	4297      	cmp	r7, r2
 8005244:	4604      	mov	r4, r0
 8005246:	460d      	mov	r5, r1
 8005248:	460b      	mov	r3, r1
 800524a:	db37      	blt.n	80052bc <scalbn+0x9c>
 800524c:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005250:	3e36      	subs	r6, #54	; 0x36
 8005252:	443e      	add	r6, r7
 8005254:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005258:	4296      	cmp	r6, r2
 800525a:	dd15      	ble.n	8005288 <scalbn+0x68>
 800525c:	4622      	mov	r2, r4
 800525e:	462b      	mov	r3, r5
 8005260:	a129      	add	r1, pc, #164	; (adr r1, 8005308 <scalbn+0xe8>)
 8005262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005266:	f000 f85f 	bl	8005328 <copysign>
 800526a:	a327      	add	r3, pc, #156	; (adr r3, 8005308 <scalbn+0xe8>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f000 fa1a 	bl	80056a8 <__aeabi_dmul>
 8005274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005276:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800527a:	4296      	cmp	r6, r2
 800527c:	d024      	beq.n	80052c8 <scalbn+0xa8>
 800527e:	443e      	add	r6, r7
 8005280:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005284:	4296      	cmp	r6, r2
 8005286:	dce9      	bgt.n	800525c <scalbn+0x3c>
 8005288:	2e00      	cmp	r6, #0
 800528a:	dd09      	ble.n	80052a0 <scalbn+0x80>
 800528c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005290:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005294:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a0:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80052a4:	da15      	bge.n	80052d2 <scalbn+0xb2>
 80052a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80052aa:	429f      	cmp	r7, r3
 80052ac:	4622      	mov	r2, r4
 80052ae:	462b      	mov	r3, r5
 80052b0:	dc1d      	bgt.n	80052ee <scalbn+0xce>
 80052b2:	a117      	add	r1, pc, #92	; (adr r1, 8005310 <scalbn+0xf0>)
 80052b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052b8:	f000 f836 	bl	8005328 <copysign>
 80052bc:	a314      	add	r3, pc, #80	; (adr r3, 8005310 <scalbn+0xf0>)
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f000 f9f1 	bl	80056a8 <__aeabi_dmul>
 80052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	f000 f83a 	bl	8005344 <__adddf3>
 80052d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80052d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052da:	3636      	adds	r6, #54	; 0x36
 80052dc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	2200      	movs	r2, #0
 80052e6:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <scalbn+0x100>)
 80052e8:	f000 f9de 	bl	80056a8 <__aeabi_dmul>
 80052ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ee:	a106      	add	r1, pc, #24	; (adr r1, 8005308 <scalbn+0xe8>)
 80052f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052f4:	f000 f818 	bl	8005328 <copysign>
 80052f8:	a303      	add	r3, pc, #12	; (adr r3, 8005308 <scalbn+0xe8>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f000 f9d3 	bl	80056a8 <__aeabi_dmul>
 8005302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005304:	f3af 8000 	nop.w
 8005308:	8800759c 	.word	0x8800759c
 800530c:	7e37e43c 	.word	0x7e37e43c
 8005310:	c2f8f359 	.word	0xc2f8f359
 8005314:	01a56e1f 	.word	0x01a56e1f
 8005318:	43500000 	.word	0x43500000
 800531c:	ffff3cb0 	.word	0xffff3cb0
 8005320:	3c900000 	.word	0x3c900000
 8005324:	f3af 8000 	nop.w

08005328 <copysign>:
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005330:	ea43 0102 	orr.w	r1, r3, r2
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop

08005338 <__aeabi_drsub>:
 8005338:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800533c:	e002      	b.n	8005344 <__adddf3>
 800533e:	bf00      	nop

08005340 <__aeabi_dsub>:
 8005340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005344 <__adddf3>:
 8005344:	b530      	push	{r4, r5, lr}
 8005346:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800534a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800534e:	ea94 0f05 	teq	r4, r5
 8005352:	bf08      	it	eq
 8005354:	ea90 0f02 	teqeq	r0, r2
 8005358:	bf1f      	itttt	ne
 800535a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800535e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005362:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005366:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800536a:	f000 80e2 	beq.w	8005532 <__adddf3+0x1ee>
 800536e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005372:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005376:	bfb8      	it	lt
 8005378:	426d      	neglt	r5, r5
 800537a:	dd0c      	ble.n	8005396 <__adddf3+0x52>
 800537c:	442c      	add	r4, r5
 800537e:	ea80 0202 	eor.w	r2, r0, r2
 8005382:	ea81 0303 	eor.w	r3, r1, r3
 8005386:	ea82 0000 	eor.w	r0, r2, r0
 800538a:	ea83 0101 	eor.w	r1, r3, r1
 800538e:	ea80 0202 	eor.w	r2, r0, r2
 8005392:	ea81 0303 	eor.w	r3, r1, r3
 8005396:	2d36      	cmp	r5, #54	; 0x36
 8005398:	bf88      	it	hi
 800539a:	bd30      	pophi	{r4, r5, pc}
 800539c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80053a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80053a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80053a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80053ac:	d002      	beq.n	80053b4 <__adddf3+0x70>
 80053ae:	4240      	negs	r0, r0
 80053b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80053b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80053b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80053bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80053c0:	d002      	beq.n	80053c8 <__adddf3+0x84>
 80053c2:	4252      	negs	r2, r2
 80053c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80053c8:	ea94 0f05 	teq	r4, r5
 80053cc:	f000 80a7 	beq.w	800551e <__adddf3+0x1da>
 80053d0:	f1a4 0401 	sub.w	r4, r4, #1
 80053d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80053d8:	db0d      	blt.n	80053f6 <__adddf3+0xb2>
 80053da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80053de:	fa22 f205 	lsr.w	r2, r2, r5
 80053e2:	1880      	adds	r0, r0, r2
 80053e4:	f141 0100 	adc.w	r1, r1, #0
 80053e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80053ec:	1880      	adds	r0, r0, r2
 80053ee:	fa43 f305 	asr.w	r3, r3, r5
 80053f2:	4159      	adcs	r1, r3
 80053f4:	e00e      	b.n	8005414 <__adddf3+0xd0>
 80053f6:	f1a5 0520 	sub.w	r5, r5, #32
 80053fa:	f10e 0e20 	add.w	lr, lr, #32
 80053fe:	2a01      	cmp	r2, #1
 8005400:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005404:	bf28      	it	cs
 8005406:	f04c 0c02 	orrcs.w	ip, ip, #2
 800540a:	fa43 f305 	asr.w	r3, r3, r5
 800540e:	18c0      	adds	r0, r0, r3
 8005410:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005418:	d507      	bpl.n	800542a <__adddf3+0xe6>
 800541a:	f04f 0e00 	mov.w	lr, #0
 800541e:	f1dc 0c00 	rsbs	ip, ip, #0
 8005422:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005426:	eb6e 0101 	sbc.w	r1, lr, r1
 800542a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800542e:	d31b      	bcc.n	8005468 <__adddf3+0x124>
 8005430:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005434:	d30c      	bcc.n	8005450 <__adddf3+0x10c>
 8005436:	0849      	lsrs	r1, r1, #1
 8005438:	ea5f 0030 	movs.w	r0, r0, rrx
 800543c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005440:	f104 0401 	add.w	r4, r4, #1
 8005444:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005448:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800544c:	f080 809a 	bcs.w	8005584 <__adddf3+0x240>
 8005450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005454:	bf08      	it	eq
 8005456:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800545a:	f150 0000 	adcs.w	r0, r0, #0
 800545e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005462:	ea41 0105 	orr.w	r1, r1, r5
 8005466:	bd30      	pop	{r4, r5, pc}
 8005468:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800546c:	4140      	adcs	r0, r0
 800546e:	eb41 0101 	adc.w	r1, r1, r1
 8005472:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005476:	f1a4 0401 	sub.w	r4, r4, #1
 800547a:	d1e9      	bne.n	8005450 <__adddf3+0x10c>
 800547c:	f091 0f00 	teq	r1, #0
 8005480:	bf04      	itt	eq
 8005482:	4601      	moveq	r1, r0
 8005484:	2000      	moveq	r0, #0
 8005486:	fab1 f381 	clz	r3, r1
 800548a:	bf08      	it	eq
 800548c:	3320      	addeq	r3, #32
 800548e:	f1a3 030b 	sub.w	r3, r3, #11
 8005492:	f1b3 0220 	subs.w	r2, r3, #32
 8005496:	da0c      	bge.n	80054b2 <__adddf3+0x16e>
 8005498:	320c      	adds	r2, #12
 800549a:	dd08      	ble.n	80054ae <__adddf3+0x16a>
 800549c:	f102 0c14 	add.w	ip, r2, #20
 80054a0:	f1c2 020c 	rsb	r2, r2, #12
 80054a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80054a8:	fa21 f102 	lsr.w	r1, r1, r2
 80054ac:	e00c      	b.n	80054c8 <__adddf3+0x184>
 80054ae:	f102 0214 	add.w	r2, r2, #20
 80054b2:	bfd8      	it	le
 80054b4:	f1c2 0c20 	rsble	ip, r2, #32
 80054b8:	fa01 f102 	lsl.w	r1, r1, r2
 80054bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80054c0:	bfdc      	itt	le
 80054c2:	ea41 010c 	orrle.w	r1, r1, ip
 80054c6:	4090      	lslle	r0, r2
 80054c8:	1ae4      	subs	r4, r4, r3
 80054ca:	bfa2      	ittt	ge
 80054cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80054d0:	4329      	orrge	r1, r5
 80054d2:	bd30      	popge	{r4, r5, pc}
 80054d4:	ea6f 0404 	mvn.w	r4, r4
 80054d8:	3c1f      	subs	r4, #31
 80054da:	da1c      	bge.n	8005516 <__adddf3+0x1d2>
 80054dc:	340c      	adds	r4, #12
 80054de:	dc0e      	bgt.n	80054fe <__adddf3+0x1ba>
 80054e0:	f104 0414 	add.w	r4, r4, #20
 80054e4:	f1c4 0220 	rsb	r2, r4, #32
 80054e8:	fa20 f004 	lsr.w	r0, r0, r4
 80054ec:	fa01 f302 	lsl.w	r3, r1, r2
 80054f0:	ea40 0003 	orr.w	r0, r0, r3
 80054f4:	fa21 f304 	lsr.w	r3, r1, r4
 80054f8:	ea45 0103 	orr.w	r1, r5, r3
 80054fc:	bd30      	pop	{r4, r5, pc}
 80054fe:	f1c4 040c 	rsb	r4, r4, #12
 8005502:	f1c4 0220 	rsb	r2, r4, #32
 8005506:	fa20 f002 	lsr.w	r0, r0, r2
 800550a:	fa01 f304 	lsl.w	r3, r1, r4
 800550e:	ea40 0003 	orr.w	r0, r0, r3
 8005512:	4629      	mov	r1, r5
 8005514:	bd30      	pop	{r4, r5, pc}
 8005516:	fa21 f004 	lsr.w	r0, r1, r4
 800551a:	4629      	mov	r1, r5
 800551c:	bd30      	pop	{r4, r5, pc}
 800551e:	f094 0f00 	teq	r4, #0
 8005522:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005526:	bf06      	itte	eq
 8005528:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800552c:	3401      	addeq	r4, #1
 800552e:	3d01      	subne	r5, #1
 8005530:	e74e      	b.n	80053d0 <__adddf3+0x8c>
 8005532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005536:	bf18      	it	ne
 8005538:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800553c:	d029      	beq.n	8005592 <__adddf3+0x24e>
 800553e:	ea94 0f05 	teq	r4, r5
 8005542:	bf08      	it	eq
 8005544:	ea90 0f02 	teqeq	r0, r2
 8005548:	d005      	beq.n	8005556 <__adddf3+0x212>
 800554a:	ea54 0c00 	orrs.w	ip, r4, r0
 800554e:	bf04      	itt	eq
 8005550:	4619      	moveq	r1, r3
 8005552:	4610      	moveq	r0, r2
 8005554:	bd30      	pop	{r4, r5, pc}
 8005556:	ea91 0f03 	teq	r1, r3
 800555a:	bf1e      	ittt	ne
 800555c:	2100      	movne	r1, #0
 800555e:	2000      	movne	r0, #0
 8005560:	bd30      	popne	{r4, r5, pc}
 8005562:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005566:	d105      	bne.n	8005574 <__adddf3+0x230>
 8005568:	0040      	lsls	r0, r0, #1
 800556a:	4149      	adcs	r1, r1
 800556c:	bf28      	it	cs
 800556e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005572:	bd30      	pop	{r4, r5, pc}
 8005574:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005578:	bf3c      	itt	cc
 800557a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800557e:	bd30      	popcc	{r4, r5, pc}
 8005580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005584:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005588:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800558c:	f04f 0000 	mov.w	r0, #0
 8005590:	bd30      	pop	{r4, r5, pc}
 8005592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005596:	bf1a      	itte	ne
 8005598:	4619      	movne	r1, r3
 800559a:	4610      	movne	r0, r2
 800559c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80055a0:	bf1c      	itt	ne
 80055a2:	460b      	movne	r3, r1
 80055a4:	4602      	movne	r2, r0
 80055a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80055aa:	bf06      	itte	eq
 80055ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80055b0:	ea91 0f03 	teqeq	r1, r3
 80055b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80055b8:	bd30      	pop	{r4, r5, pc}
 80055ba:	bf00      	nop

080055bc <__aeabi_ui2d>:
 80055bc:	f090 0f00 	teq	r0, #0
 80055c0:	bf04      	itt	eq
 80055c2:	2100      	moveq	r1, #0
 80055c4:	4770      	bxeq	lr
 80055c6:	b530      	push	{r4, r5, lr}
 80055c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80055cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80055d0:	f04f 0500 	mov.w	r5, #0
 80055d4:	f04f 0100 	mov.w	r1, #0
 80055d8:	e750      	b.n	800547c <__adddf3+0x138>
 80055da:	bf00      	nop

080055dc <__aeabi_i2d>:
 80055dc:	f090 0f00 	teq	r0, #0
 80055e0:	bf04      	itt	eq
 80055e2:	2100      	moveq	r1, #0
 80055e4:	4770      	bxeq	lr
 80055e6:	b530      	push	{r4, r5, lr}
 80055e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80055ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80055f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80055f4:	bf48      	it	mi
 80055f6:	4240      	negmi	r0, r0
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	e73e      	b.n	800547c <__adddf3+0x138>
 80055fe:	bf00      	nop

08005600 <__aeabi_f2d>:
 8005600:	0042      	lsls	r2, r0, #1
 8005602:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005606:	ea4f 0131 	mov.w	r1, r1, rrx
 800560a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800560e:	bf1f      	itttt	ne
 8005610:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005614:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005618:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800561c:	4770      	bxne	lr
 800561e:	f092 0f00 	teq	r2, #0
 8005622:	bf14      	ite	ne
 8005624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005628:	4770      	bxeq	lr
 800562a:	b530      	push	{r4, r5, lr}
 800562c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005638:	e720      	b.n	800547c <__adddf3+0x138>
 800563a:	bf00      	nop

0800563c <__aeabi_ul2d>:
 800563c:	ea50 0201 	orrs.w	r2, r0, r1
 8005640:	bf08      	it	eq
 8005642:	4770      	bxeq	lr
 8005644:	b530      	push	{r4, r5, lr}
 8005646:	f04f 0500 	mov.w	r5, #0
 800564a:	e00a      	b.n	8005662 <__aeabi_l2d+0x16>

0800564c <__aeabi_l2d>:
 800564c:	ea50 0201 	orrs.w	r2, r0, r1
 8005650:	bf08      	it	eq
 8005652:	4770      	bxeq	lr
 8005654:	b530      	push	{r4, r5, lr}
 8005656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800565a:	d502      	bpl.n	8005662 <__aeabi_l2d+0x16>
 800565c:	4240      	negs	r0, r0
 800565e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800566a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800566e:	f43f aedc 	beq.w	800542a <__adddf3+0xe6>
 8005672:	f04f 0203 	mov.w	r2, #3
 8005676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800567a:	bf18      	it	ne
 800567c:	3203      	addne	r2, #3
 800567e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005682:	bf18      	it	ne
 8005684:	3203      	addne	r2, #3
 8005686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800568a:	f1c2 0320 	rsb	r3, r2, #32
 800568e:	fa00 fc03 	lsl.w	ip, r0, r3
 8005692:	fa20 f002 	lsr.w	r0, r0, r2
 8005696:	fa01 fe03 	lsl.w	lr, r1, r3
 800569a:	ea40 000e 	orr.w	r0, r0, lr
 800569e:	fa21 f102 	lsr.w	r1, r1, r2
 80056a2:	4414      	add	r4, r2
 80056a4:	e6c1      	b.n	800542a <__adddf3+0xe6>
 80056a6:	bf00      	nop

080056a8 <__aeabi_dmul>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80056ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80056b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80056b6:	bf1d      	ittte	ne
 80056b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80056bc:	ea94 0f0c 	teqne	r4, ip
 80056c0:	ea95 0f0c 	teqne	r5, ip
 80056c4:	f000 f8de 	bleq	8005884 <__aeabi_dmul+0x1dc>
 80056c8:	442c      	add	r4, r5
 80056ca:	ea81 0603 	eor.w	r6, r1, r3
 80056ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80056d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80056d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80056da:	bf18      	it	ne
 80056dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80056e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80056e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e8:	d038      	beq.n	800575c <__aeabi_dmul+0xb4>
 80056ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80056ee:	f04f 0500 	mov.w	r5, #0
 80056f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80056f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80056fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80056fe:	f04f 0600 	mov.w	r6, #0
 8005702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005706:	f09c 0f00 	teq	ip, #0
 800570a:	bf18      	it	ne
 800570c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800571c:	d204      	bcs.n	8005728 <__aeabi_dmul+0x80>
 800571e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005722:	416d      	adcs	r5, r5
 8005724:	eb46 0606 	adc.w	r6, r6, r6
 8005728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800572c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800573c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005740:	bf88      	it	hi
 8005742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005746:	d81e      	bhi.n	8005786 <__aeabi_dmul+0xde>
 8005748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800574c:	bf08      	it	eq
 800574e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005752:	f150 0000 	adcs.w	r0, r0, #0
 8005756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005760:	ea46 0101 	orr.w	r1, r6, r1
 8005764:	ea40 0002 	orr.w	r0, r0, r2
 8005768:	ea81 0103 	eor.w	r1, r1, r3
 800576c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005770:	bfc2      	ittt	gt
 8005772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800577a:	bd70      	popgt	{r4, r5, r6, pc}
 800577c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005780:	f04f 0e00 	mov.w	lr, #0
 8005784:	3c01      	subs	r4, #1
 8005786:	f300 80ab 	bgt.w	80058e0 <__aeabi_dmul+0x238>
 800578a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800578e:	bfde      	ittt	le
 8005790:	2000      	movle	r0, #0
 8005792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005796:	bd70      	pople	{r4, r5, r6, pc}
 8005798:	f1c4 0400 	rsb	r4, r4, #0
 800579c:	3c20      	subs	r4, #32
 800579e:	da35      	bge.n	800580c <__aeabi_dmul+0x164>
 80057a0:	340c      	adds	r4, #12
 80057a2:	dc1b      	bgt.n	80057dc <__aeabi_dmul+0x134>
 80057a4:	f104 0414 	add.w	r4, r4, #20
 80057a8:	f1c4 0520 	rsb	r5, r4, #32
 80057ac:	fa00 f305 	lsl.w	r3, r0, r5
 80057b0:	fa20 f004 	lsr.w	r0, r0, r4
 80057b4:	fa01 f205 	lsl.w	r2, r1, r5
 80057b8:	ea40 0002 	orr.w	r0, r0, r2
 80057bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80057c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80057c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80057c8:	fa21 f604 	lsr.w	r6, r1, r4
 80057cc:	eb42 0106 	adc.w	r1, r2, r6
 80057d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80057d4:	bf08      	it	eq
 80057d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	f1c4 040c 	rsb	r4, r4, #12
 80057e0:	f1c4 0520 	rsb	r5, r4, #32
 80057e4:	fa00 f304 	lsl.w	r3, r0, r4
 80057e8:	fa20 f005 	lsr.w	r0, r0, r5
 80057ec:	fa01 f204 	lsl.w	r2, r1, r4
 80057f0:	ea40 0002 	orr.w	r0, r0, r2
 80057f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80057f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80057fc:	f141 0100 	adc.w	r1, r1, #0
 8005800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005804:	bf08      	it	eq
 8005806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f1c4 0520 	rsb	r5, r4, #32
 8005810:	fa00 f205 	lsl.w	r2, r0, r5
 8005814:	ea4e 0e02 	orr.w	lr, lr, r2
 8005818:	fa20 f304 	lsr.w	r3, r0, r4
 800581c:	fa01 f205 	lsl.w	r2, r1, r5
 8005820:	ea43 0302 	orr.w	r3, r3, r2
 8005824:	fa21 f004 	lsr.w	r0, r1, r4
 8005828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800582c:	fa21 f204 	lsr.w	r2, r1, r4
 8005830:	ea20 0002 	bic.w	r0, r0, r2
 8005834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800583c:	bf08      	it	eq
 800583e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f094 0f00 	teq	r4, #0
 8005848:	d10f      	bne.n	800586a <__aeabi_dmul+0x1c2>
 800584a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800584e:	0040      	lsls	r0, r0, #1
 8005850:	eb41 0101 	adc.w	r1, r1, r1
 8005854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005858:	bf08      	it	eq
 800585a:	3c01      	subeq	r4, #1
 800585c:	d0f7      	beq.n	800584e <__aeabi_dmul+0x1a6>
 800585e:	ea41 0106 	orr.w	r1, r1, r6
 8005862:	f095 0f00 	teq	r5, #0
 8005866:	bf18      	it	ne
 8005868:	4770      	bxne	lr
 800586a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800586e:	0052      	lsls	r2, r2, #1
 8005870:	eb43 0303 	adc.w	r3, r3, r3
 8005874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005878:	bf08      	it	eq
 800587a:	3d01      	subeq	r5, #1
 800587c:	d0f7      	beq.n	800586e <__aeabi_dmul+0x1c6>
 800587e:	ea43 0306 	orr.w	r3, r3, r6
 8005882:	4770      	bx	lr
 8005884:	ea94 0f0c 	teq	r4, ip
 8005888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800588c:	bf18      	it	ne
 800588e:	ea95 0f0c 	teqne	r5, ip
 8005892:	d00c      	beq.n	80058ae <__aeabi_dmul+0x206>
 8005894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005898:	bf18      	it	ne
 800589a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800589e:	d1d1      	bne.n	8005844 <__aeabi_dmul+0x19c>
 80058a0:	ea81 0103 	eor.w	r1, r1, r3
 80058a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80058a8:	f04f 0000 	mov.w	r0, #0
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058b2:	bf06      	itte	eq
 80058b4:	4610      	moveq	r0, r2
 80058b6:	4619      	moveq	r1, r3
 80058b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058bc:	d019      	beq.n	80058f2 <__aeabi_dmul+0x24a>
 80058be:	ea94 0f0c 	teq	r4, ip
 80058c2:	d102      	bne.n	80058ca <__aeabi_dmul+0x222>
 80058c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80058c8:	d113      	bne.n	80058f2 <__aeabi_dmul+0x24a>
 80058ca:	ea95 0f0c 	teq	r5, ip
 80058ce:	d105      	bne.n	80058dc <__aeabi_dmul+0x234>
 80058d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80058d4:	bf1c      	itt	ne
 80058d6:	4610      	movne	r0, r2
 80058d8:	4619      	movne	r1, r3
 80058da:	d10a      	bne.n	80058f2 <__aeabi_dmul+0x24a>
 80058dc:	ea81 0103 	eor.w	r1, r1, r3
 80058e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80058e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80058e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ec:	f04f 0000 	mov.w	r0, #0
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
 80058f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80058f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80058fa:	bd70      	pop	{r4, r5, r6, pc}

080058fc <__aeabi_ddiv>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800590a:	bf1d      	ittte	ne
 800590c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005910:	ea94 0f0c 	teqne	r4, ip
 8005914:	ea95 0f0c 	teqne	r5, ip
 8005918:	f000 f8a7 	bleq	8005a6a <__aeabi_ddiv+0x16e>
 800591c:	eba4 0405 	sub.w	r4, r4, r5
 8005920:	ea81 0e03 	eor.w	lr, r1, r3
 8005924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800592c:	f000 8088 	beq.w	8005a40 <__aeabi_ddiv+0x144>
 8005930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800593c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800594c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005954:	429d      	cmp	r5, r3
 8005956:	bf08      	it	eq
 8005958:	4296      	cmpeq	r6, r2
 800595a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800595e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005962:	d202      	bcs.n	800596a <__aeabi_ddiv+0x6e>
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	ea4f 0232 	mov.w	r2, r2, rrx
 800596a:	1ab6      	subs	r6, r6, r2
 800596c:	eb65 0503 	sbc.w	r5, r5, r3
 8005970:	085b      	lsrs	r3, r3, #1
 8005972:	ea4f 0232 	mov.w	r2, r2, rrx
 8005976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800597a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800597e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005986:	bf22      	ittt	cs
 8005988:	1ab6      	subcs	r6, r6, r2
 800598a:	4675      	movcs	r5, lr
 800598c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	ea4f 0232 	mov.w	r2, r2, rrx
 8005996:	ebb6 0e02 	subs.w	lr, r6, r2
 800599a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800599e:	bf22      	ittt	cs
 80059a0:	1ab6      	subcs	r6, r6, r2
 80059a2:	4675      	movcs	r5, lr
 80059a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80059ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80059b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80059b6:	bf22      	ittt	cs
 80059b8:	1ab6      	subcs	r6, r6, r2
 80059ba:	4675      	movcs	r5, lr
 80059bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80059c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80059ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80059ce:	bf22      	ittt	cs
 80059d0:	1ab6      	subcs	r6, r6, r2
 80059d2:	4675      	movcs	r5, lr
 80059d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80059d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80059dc:	d018      	beq.n	8005a10 <__aeabi_ddiv+0x114>
 80059de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80059e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80059e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80059ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80059ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80059f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80059f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80059fa:	d1c0      	bne.n	800597e <__aeabi_ddiv+0x82>
 80059fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005a00:	d10b      	bne.n	8005a1a <__aeabi_ddiv+0x11e>
 8005a02:	ea41 0100 	orr.w	r1, r1, r0
 8005a06:	f04f 0000 	mov.w	r0, #0
 8005a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005a0e:	e7b6      	b.n	800597e <__aeabi_ddiv+0x82>
 8005a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005a14:	bf04      	itt	eq
 8005a16:	4301      	orreq	r1, r0
 8005a18:	2000      	moveq	r0, #0
 8005a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005a1e:	bf88      	it	hi
 8005a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005a24:	f63f aeaf 	bhi.w	8005786 <__aeabi_dmul+0xde>
 8005a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8005a2c:	bf04      	itt	eq
 8005a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005a36:	f150 0000 	adcs.w	r0, r0, #0
 8005a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005a4c:	bfc2      	ittt	gt
 8005a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005a56:	bd70      	popgt	{r4, r5, r6, pc}
 8005a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005a5c:	f04f 0e00 	mov.w	lr, #0
 8005a60:	3c01      	subs	r4, #1
 8005a62:	e690      	b.n	8005786 <__aeabi_dmul+0xde>
 8005a64:	ea45 0e06 	orr.w	lr, r5, r6
 8005a68:	e68d      	b.n	8005786 <__aeabi_dmul+0xde>
 8005a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005a6e:	ea94 0f0c 	teq	r4, ip
 8005a72:	bf08      	it	eq
 8005a74:	ea95 0f0c 	teqeq	r5, ip
 8005a78:	f43f af3b 	beq.w	80058f2 <__aeabi_dmul+0x24a>
 8005a7c:	ea94 0f0c 	teq	r4, ip
 8005a80:	d10a      	bne.n	8005a98 <__aeabi_ddiv+0x19c>
 8005a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005a86:	f47f af34 	bne.w	80058f2 <__aeabi_dmul+0x24a>
 8005a8a:	ea95 0f0c 	teq	r5, ip
 8005a8e:	f47f af25 	bne.w	80058dc <__aeabi_dmul+0x234>
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	e72c      	b.n	80058f2 <__aeabi_dmul+0x24a>
 8005a98:	ea95 0f0c 	teq	r5, ip
 8005a9c:	d106      	bne.n	8005aac <__aeabi_ddiv+0x1b0>
 8005a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005aa2:	f43f aefd 	beq.w	80058a0 <__aeabi_dmul+0x1f8>
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	e722      	b.n	80058f2 <__aeabi_dmul+0x24a>
 8005aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ab0:	bf18      	it	ne
 8005ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005ab6:	f47f aec5 	bne.w	8005844 <__aeabi_dmul+0x19c>
 8005aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005abe:	f47f af0d 	bne.w	80058dc <__aeabi_dmul+0x234>
 8005ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005ac6:	f47f aeeb 	bne.w	80058a0 <__aeabi_dmul+0x1f8>
 8005aca:	e712      	b.n	80058f2 <__aeabi_dmul+0x24a>

08005acc <__gedf2>:
 8005acc:	f04f 3cff 	mov.w	ip, #4294967295
 8005ad0:	e006      	b.n	8005ae0 <__cmpdf2+0x4>
 8005ad2:	bf00      	nop

08005ad4 <__ledf2>:
 8005ad4:	f04f 0c01 	mov.w	ip, #1
 8005ad8:	e002      	b.n	8005ae0 <__cmpdf2+0x4>
 8005ada:	bf00      	nop

08005adc <__cmpdf2>:
 8005adc:	f04f 0c01 	mov.w	ip, #1
 8005ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005af0:	bf18      	it	ne
 8005af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005af6:	d01b      	beq.n	8005b30 <__cmpdf2+0x54>
 8005af8:	b001      	add	sp, #4
 8005afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005afe:	bf0c      	ite	eq
 8005b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005b04:	ea91 0f03 	teqne	r1, r3
 8005b08:	bf02      	ittt	eq
 8005b0a:	ea90 0f02 	teqeq	r0, r2
 8005b0e:	2000      	moveq	r0, #0
 8005b10:	4770      	bxeq	lr
 8005b12:	f110 0f00 	cmn.w	r0, #0
 8005b16:	ea91 0f03 	teq	r1, r3
 8005b1a:	bf58      	it	pl
 8005b1c:	4299      	cmppl	r1, r3
 8005b1e:	bf08      	it	eq
 8005b20:	4290      	cmpeq	r0, r2
 8005b22:	bf2c      	ite	cs
 8005b24:	17d8      	asrcs	r0, r3, #31
 8005b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005b2a:	f040 0001 	orr.w	r0, r0, #1
 8005b2e:	4770      	bx	lr
 8005b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005b38:	d102      	bne.n	8005b40 <__cmpdf2+0x64>
 8005b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005b3e:	d107      	bne.n	8005b50 <__cmpdf2+0x74>
 8005b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005b48:	d1d6      	bne.n	8005af8 <__cmpdf2+0x1c>
 8005b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005b4e:	d0d3      	beq.n	8005af8 <__cmpdf2+0x1c>
 8005b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <__aeabi_cdrcmple>:
 8005b58:	4684      	mov	ip, r0
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4662      	mov	r2, ip
 8005b5e:	468c      	mov	ip, r1
 8005b60:	4619      	mov	r1, r3
 8005b62:	4663      	mov	r3, ip
 8005b64:	e000      	b.n	8005b68 <__aeabi_cdcmpeq>
 8005b66:	bf00      	nop

08005b68 <__aeabi_cdcmpeq>:
 8005b68:	b501      	push	{r0, lr}
 8005b6a:	f7ff ffb7 	bl	8005adc <__cmpdf2>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	bf48      	it	mi
 8005b72:	f110 0f00 	cmnmi.w	r0, #0
 8005b76:	bd01      	pop	{r0, pc}

08005b78 <__aeabi_dcmpeq>:
 8005b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b7c:	f7ff fff4 	bl	8005b68 <__aeabi_cdcmpeq>
 8005b80:	bf0c      	ite	eq
 8005b82:	2001      	moveq	r0, #1
 8005b84:	2000      	movne	r0, #0
 8005b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b8a:	bf00      	nop

08005b8c <__aeabi_dcmplt>:
 8005b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b90:	f7ff ffea 	bl	8005b68 <__aeabi_cdcmpeq>
 8005b94:	bf34      	ite	cc
 8005b96:	2001      	movcc	r0, #1
 8005b98:	2000      	movcs	r0, #0
 8005b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b9e:	bf00      	nop

08005ba0 <__aeabi_dcmple>:
 8005ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ba4:	f7ff ffe0 	bl	8005b68 <__aeabi_cdcmpeq>
 8005ba8:	bf94      	ite	ls
 8005baa:	2001      	movls	r0, #1
 8005bac:	2000      	movhi	r0, #0
 8005bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bb2:	bf00      	nop

08005bb4 <__aeabi_dcmpge>:
 8005bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb8:	f7ff ffce 	bl	8005b58 <__aeabi_cdrcmple>
 8005bbc:	bf94      	ite	ls
 8005bbe:	2001      	movls	r0, #1
 8005bc0:	2000      	movhi	r0, #0
 8005bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_dcmpgt>:
 8005bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bcc:	f7ff ffc4 	bl	8005b58 <__aeabi_cdrcmple>
 8005bd0:	bf34      	ite	cc
 8005bd2:	2001      	movcc	r0, #1
 8005bd4:	2000      	movcs	r0, #0
 8005bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bda:	bf00      	nop

08005bdc <__aeabi_d2iz>:
 8005bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005be4:	d215      	bcs.n	8005c12 <__aeabi_d2iz+0x36>
 8005be6:	d511      	bpl.n	8005c0c <__aeabi_d2iz+0x30>
 8005be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005bf0:	d912      	bls.n	8005c18 <__aeabi_d2iz+0x3c>
 8005bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005c02:	fa23 f002 	lsr.w	r0, r3, r2
 8005c06:	bf18      	it	ne
 8005c08:	4240      	negne	r0, r0
 8005c0a:	4770      	bx	lr
 8005c0c:	f04f 0000 	mov.w	r0, #0
 8005c10:	4770      	bx	lr
 8005c12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005c16:	d105      	bne.n	8005c24 <__aeabi_d2iz+0x48>
 8005c18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005c1c:	bf08      	it	eq
 8005c1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005c22:	4770      	bx	lr
 8005c24:	f04f 0000 	mov.w	r0, #0
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop

08005c2c <__aeabi_d2uiz>:
 8005c2c:	004a      	lsls	r2, r1, #1
 8005c2e:	d211      	bcs.n	8005c54 <__aeabi_d2uiz+0x28>
 8005c30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005c34:	d211      	bcs.n	8005c5a <__aeabi_d2uiz+0x2e>
 8005c36:	d50d      	bpl.n	8005c54 <__aeabi_d2uiz+0x28>
 8005c38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005c3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005c40:	d40e      	bmi.n	8005c60 <__aeabi_d2uiz+0x34>
 8005c42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8005c52:	4770      	bx	lr
 8005c54:	f04f 0000 	mov.w	r0, #0
 8005c58:	4770      	bx	lr
 8005c5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005c5e:	d102      	bne.n	8005c66 <__aeabi_d2uiz+0x3a>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	4770      	bx	lr
 8005c66:	f04f 0000 	mov.w	r0, #0
 8005c6a:	4770      	bx	lr

08005c6c <__aeabi_uldivmod>:
 8005c6c:	b94b      	cbnz	r3, 8005c82 <__aeabi_uldivmod+0x16>
 8005c6e:	b942      	cbnz	r2, 8005c82 <__aeabi_uldivmod+0x16>
 8005c70:	2900      	cmp	r1, #0
 8005c72:	bf08      	it	eq
 8005c74:	2800      	cmpeq	r0, #0
 8005c76:	d002      	beq.n	8005c7e <__aeabi_uldivmod+0x12>
 8005c78:	f04f 31ff 	mov.w	r1, #4294967295
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	f000 b83b 	b.w	8005cf8 <__aeabi_idiv0>
 8005c82:	b082      	sub	sp, #8
 8005c84:	46ec      	mov	ip, sp
 8005c86:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005c8a:	f000 f81d 	bl	8005cc8 <__gnu_uldivmod_helper>
 8005c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005c92:	b002      	add	sp, #8
 8005c94:	bc0c      	pop	{r2, r3}
 8005c96:	4770      	bx	lr

08005c98 <__gnu_ldivmod_helper>:
 8005c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9c:	9c06      	ldr	r4, [sp, #24]
 8005c9e:	4615      	mov	r5, r2
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	460f      	mov	r7, r1
 8005ca4:	4698      	mov	r8, r3
 8005ca6:	f000 f829 	bl	8005cfc <__divdi3>
 8005caa:	fb05 f301 	mul.w	r3, r5, r1
 8005cae:	fb00 3808 	mla	r8, r0, r8, r3
 8005cb2:	fba5 2300 	umull	r2, r3, r5, r0
 8005cb6:	1ab2      	subs	r2, r6, r2
 8005cb8:	4443      	add	r3, r8
 8005cba:	eb67 0303 	sbc.w	r3, r7, r3
 8005cbe:	e9c4 2300 	strd	r2, r3, [r4]
 8005cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc6:	bf00      	nop

08005cc8 <__gnu_uldivmod_helper>:
 8005cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ccc:	9c06      	ldr	r4, [sp, #24]
 8005cce:	4690      	mov	r8, r2
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	f000 f95f 	bl	8005f98 <__udivdi3>
 8005cda:	fb00 f505 	mul.w	r5, r0, r5
 8005cde:	fba0 2308 	umull	r2, r3, r0, r8
 8005ce2:	fb08 5501 	mla	r5, r8, r1, r5
 8005ce6:	1ab2      	subs	r2, r6, r2
 8005ce8:	442b      	add	r3, r5
 8005cea:	eb67 0303 	sbc.w	r3, r7, r3
 8005cee:	e9c4 2300 	strd	r2, r3, [r4]
 8005cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf6:	bf00      	nop

08005cf8 <__aeabi_idiv0>:
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop

08005cfc <__divdi3>:
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d02:	f2c0 80a6 	blt.w	8005e52 <__divdi3+0x156>
 8005d06:	2600      	movs	r6, #0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f2c0 809c 	blt.w	8005e46 <__divdi3+0x14a>
 8005d0e:	4688      	mov	r8, r1
 8005d10:	4694      	mov	ip, r2
 8005d12:	469e      	mov	lr, r3
 8005d14:	4615      	mov	r5, r2
 8005d16:	4604      	mov	r4, r0
 8005d18:	460f      	mov	r7, r1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d13d      	bne.n	8005d9a <__divdi3+0x9e>
 8005d1e:	428a      	cmp	r2, r1
 8005d20:	d959      	bls.n	8005dd6 <__divdi3+0xda>
 8005d22:	fab2 f382 	clz	r3, r2
 8005d26:	b13b      	cbz	r3, 8005d38 <__divdi3+0x3c>
 8005d28:	f1c3 0220 	rsb	r2, r3, #32
 8005d2c:	409f      	lsls	r7, r3
 8005d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8005d32:	409d      	lsls	r5, r3
 8005d34:	4317      	orrs	r7, r2
 8005d36:	409c      	lsls	r4, r3
 8005d38:	0c29      	lsrs	r1, r5, #16
 8005d3a:	0c22      	lsrs	r2, r4, #16
 8005d3c:	fbb7 fef1 	udiv	lr, r7, r1
 8005d40:	b2a8      	uxth	r0, r5
 8005d42:	fb01 771e 	mls	r7, r1, lr, r7
 8005d46:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005d4a:	fb00 f30e 	mul.w	r3, r0, lr
 8005d4e:	42bb      	cmp	r3, r7
 8005d50:	d90a      	bls.n	8005d68 <__divdi3+0x6c>
 8005d52:	197f      	adds	r7, r7, r5
 8005d54:	f10e 32ff 	add.w	r2, lr, #4294967295
 8005d58:	f080 8105 	bcs.w	8005f66 <__divdi3+0x26a>
 8005d5c:	42bb      	cmp	r3, r7
 8005d5e:	f240 8102 	bls.w	8005f66 <__divdi3+0x26a>
 8005d62:	f1ae 0e02 	sub.w	lr, lr, #2
 8005d66:	442f      	add	r7, r5
 8005d68:	1aff      	subs	r7, r7, r3
 8005d6a:	b2a4      	uxth	r4, r4
 8005d6c:	fbb7 f3f1 	udiv	r3, r7, r1
 8005d70:	fb01 7713 	mls	r7, r1, r3, r7
 8005d74:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005d78:	fb00 f003 	mul.w	r0, r0, r3
 8005d7c:	42b8      	cmp	r0, r7
 8005d7e:	d908      	bls.n	8005d92 <__divdi3+0x96>
 8005d80:	197f      	adds	r7, r7, r5
 8005d82:	f103 32ff 	add.w	r2, r3, #4294967295
 8005d86:	f080 80f0 	bcs.w	8005f6a <__divdi3+0x26e>
 8005d8a:	42b8      	cmp	r0, r7
 8005d8c:	f240 80ed 	bls.w	8005f6a <__divdi3+0x26e>
 8005d90:	3b02      	subs	r3, #2
 8005d92:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8005d96:	2200      	movs	r2, #0
 8005d98:	e003      	b.n	8005da2 <__divdi3+0xa6>
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	d90f      	bls.n	8005dbe <__divdi3+0xc2>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4613      	mov	r3, r2
 8005da2:	1c34      	adds	r4, r6, #0
 8005da4:	bf18      	it	ne
 8005da6:	2401      	movne	r4, #1
 8005da8:	4260      	negs	r0, r4
 8005daa:	f04f 0500 	mov.w	r5, #0
 8005dae:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8005db2:	4058      	eors	r0, r3
 8005db4:	4051      	eors	r1, r2
 8005db6:	1900      	adds	r0, r0, r4
 8005db8:	4169      	adcs	r1, r5
 8005dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dbe:	fab3 f283 	clz	r2, r3
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	f040 8086 	bne.w	8005ed4 <__divdi3+0x1d8>
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	d302      	bcc.n	8005dd2 <__divdi3+0xd6>
 8005dcc:	4584      	cmp	ip, r0
 8005dce:	f200 80db 	bhi.w	8005f88 <__divdi3+0x28c>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e7e5      	b.n	8005da2 <__divdi3+0xa6>
 8005dd6:	b912      	cbnz	r2, 8005dde <__divdi3+0xe2>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	fbb3 f5f2 	udiv	r5, r3, r2
 8005dde:	fab5 f085 	clz	r0, r5
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d13b      	bne.n	8005e5e <__divdi3+0x162>
 8005de6:	1b78      	subs	r0, r7, r5
 8005de8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005dec:	fa1f fc85 	uxth.w	ip, r5
 8005df0:	2201      	movs	r2, #1
 8005df2:	fbb0 f8fe 	udiv	r8, r0, lr
 8005df6:	0c21      	lsrs	r1, r4, #16
 8005df8:	fb0e 0718 	mls	r7, lr, r8, r0
 8005dfc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8005e00:	fb0c f308 	mul.w	r3, ip, r8
 8005e04:	42bb      	cmp	r3, r7
 8005e06:	d907      	bls.n	8005e18 <__divdi3+0x11c>
 8005e08:	197f      	adds	r7, r7, r5
 8005e0a:	f108 31ff 	add.w	r1, r8, #4294967295
 8005e0e:	d202      	bcs.n	8005e16 <__divdi3+0x11a>
 8005e10:	42bb      	cmp	r3, r7
 8005e12:	f200 80bd 	bhi.w	8005f90 <__divdi3+0x294>
 8005e16:	4688      	mov	r8, r1
 8005e18:	1aff      	subs	r7, r7, r3
 8005e1a:	b2a4      	uxth	r4, r4
 8005e1c:	fbb7 f3fe 	udiv	r3, r7, lr
 8005e20:	fb0e 7713 	mls	r7, lr, r3, r7
 8005e24:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005e28:	fb0c fc03 	mul.w	ip, ip, r3
 8005e2c:	45bc      	cmp	ip, r7
 8005e2e:	d907      	bls.n	8005e40 <__divdi3+0x144>
 8005e30:	197f      	adds	r7, r7, r5
 8005e32:	f103 31ff 	add.w	r1, r3, #4294967295
 8005e36:	d202      	bcs.n	8005e3e <__divdi3+0x142>
 8005e38:	45bc      	cmp	ip, r7
 8005e3a:	f200 80a7 	bhi.w	8005f8c <__divdi3+0x290>
 8005e3e:	460b      	mov	r3, r1
 8005e40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005e44:	e7ad      	b.n	8005da2 <__divdi3+0xa6>
 8005e46:	4252      	negs	r2, r2
 8005e48:	ea6f 0606 	mvn.w	r6, r6
 8005e4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e50:	e75d      	b.n	8005d0e <__divdi3+0x12>
 8005e52:	4240      	negs	r0, r0
 8005e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e58:	f04f 36ff 	mov.w	r6, #4294967295
 8005e5c:	e754      	b.n	8005d08 <__divdi3+0xc>
 8005e5e:	f1c0 0220 	rsb	r2, r0, #32
 8005e62:	fa24 f102 	lsr.w	r1, r4, r2
 8005e66:	fa07 f300 	lsl.w	r3, r7, r0
 8005e6a:	4085      	lsls	r5, r0
 8005e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005e70:	40d7      	lsrs	r7, r2
 8005e72:	4319      	orrs	r1, r3
 8005e74:	fbb7 f2fe 	udiv	r2, r7, lr
 8005e78:	0c0b      	lsrs	r3, r1, #16
 8005e7a:	fb0e 7712 	mls	r7, lr, r2, r7
 8005e7e:	fa1f fc85 	uxth.w	ip, r5
 8005e82:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e86:	fb0c f702 	mul.w	r7, ip, r2
 8005e8a:	429f      	cmp	r7, r3
 8005e8c:	fa04 f400 	lsl.w	r4, r4, r0
 8005e90:	d907      	bls.n	8005ea2 <__divdi3+0x1a6>
 8005e92:	195b      	adds	r3, r3, r5
 8005e94:	f102 30ff 	add.w	r0, r2, #4294967295
 8005e98:	d274      	bcs.n	8005f84 <__divdi3+0x288>
 8005e9a:	429f      	cmp	r7, r3
 8005e9c:	d972      	bls.n	8005f84 <__divdi3+0x288>
 8005e9e:	3a02      	subs	r2, #2
 8005ea0:	442b      	add	r3, r5
 8005ea2:	1bdf      	subs	r7, r3, r7
 8005ea4:	b289      	uxth	r1, r1
 8005ea6:	fbb7 f8fe 	udiv	r8, r7, lr
 8005eaa:	fb0e 7318 	mls	r3, lr, r8, r7
 8005eae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005eb2:	fb0c f708 	mul.w	r7, ip, r8
 8005eb6:	429f      	cmp	r7, r3
 8005eb8:	d908      	bls.n	8005ecc <__divdi3+0x1d0>
 8005eba:	195b      	adds	r3, r3, r5
 8005ebc:	f108 31ff 	add.w	r1, r8, #4294967295
 8005ec0:	d25c      	bcs.n	8005f7c <__divdi3+0x280>
 8005ec2:	429f      	cmp	r7, r3
 8005ec4:	d95a      	bls.n	8005f7c <__divdi3+0x280>
 8005ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8005eca:	442b      	add	r3, r5
 8005ecc:	1bd8      	subs	r0, r3, r7
 8005ece:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8005ed2:	e78e      	b.n	8005df2 <__divdi3+0xf6>
 8005ed4:	f1c2 0320 	rsb	r3, r2, #32
 8005ed8:	fa2c f103 	lsr.w	r1, ip, r3
 8005edc:	fa0e fe02 	lsl.w	lr, lr, r2
 8005ee0:	fa20 f703 	lsr.w	r7, r0, r3
 8005ee4:	ea41 0e0e 	orr.w	lr, r1, lr
 8005ee8:	fa08 f002 	lsl.w	r0, r8, r2
 8005eec:	fa28 f103 	lsr.w	r1, r8, r3
 8005ef0:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8005ef4:	4338      	orrs	r0, r7
 8005ef6:	fbb1 f8f5 	udiv	r8, r1, r5
 8005efa:	0c03      	lsrs	r3, r0, #16
 8005efc:	fb05 1118 	mls	r1, r5, r8, r1
 8005f00:	fa1f f78e 	uxth.w	r7, lr
 8005f04:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005f08:	fb07 f308 	mul.w	r3, r7, r8
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8005f12:	d909      	bls.n	8005f28 <__divdi3+0x22c>
 8005f14:	eb11 010e 	adds.w	r1, r1, lr
 8005f18:	f108 39ff 	add.w	r9, r8, #4294967295
 8005f1c:	d230      	bcs.n	8005f80 <__divdi3+0x284>
 8005f1e:	428b      	cmp	r3, r1
 8005f20:	d92e      	bls.n	8005f80 <__divdi3+0x284>
 8005f22:	f1a8 0802 	sub.w	r8, r8, #2
 8005f26:	4471      	add	r1, lr
 8005f28:	1ac9      	subs	r1, r1, r3
 8005f2a:	b280      	uxth	r0, r0
 8005f2c:	fbb1 f3f5 	udiv	r3, r1, r5
 8005f30:	fb05 1113 	mls	r1, r5, r3, r1
 8005f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8005f38:	fb07 f703 	mul.w	r7, r7, r3
 8005f3c:	428f      	cmp	r7, r1
 8005f3e:	d908      	bls.n	8005f52 <__divdi3+0x256>
 8005f40:	eb11 010e 	adds.w	r1, r1, lr
 8005f44:	f103 30ff 	add.w	r0, r3, #4294967295
 8005f48:	d216      	bcs.n	8005f78 <__divdi3+0x27c>
 8005f4a:	428f      	cmp	r7, r1
 8005f4c:	d914      	bls.n	8005f78 <__divdi3+0x27c>
 8005f4e:	3b02      	subs	r3, #2
 8005f50:	4471      	add	r1, lr
 8005f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005f56:	1bc9      	subs	r1, r1, r7
 8005f58:	fba3 890c 	umull	r8, r9, r3, ip
 8005f5c:	4549      	cmp	r1, r9
 8005f5e:	d309      	bcc.n	8005f74 <__divdi3+0x278>
 8005f60:	d005      	beq.n	8005f6e <__divdi3+0x272>
 8005f62:	2200      	movs	r2, #0
 8005f64:	e71d      	b.n	8005da2 <__divdi3+0xa6>
 8005f66:	4696      	mov	lr, r2
 8005f68:	e6fe      	b.n	8005d68 <__divdi3+0x6c>
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	e711      	b.n	8005d92 <__divdi3+0x96>
 8005f6e:	4094      	lsls	r4, r2
 8005f70:	4544      	cmp	r4, r8
 8005f72:	d2f6      	bcs.n	8005f62 <__divdi3+0x266>
 8005f74:	3b01      	subs	r3, #1
 8005f76:	e7f4      	b.n	8005f62 <__divdi3+0x266>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	e7ea      	b.n	8005f52 <__divdi3+0x256>
 8005f7c:	4688      	mov	r8, r1
 8005f7e:	e7a5      	b.n	8005ecc <__divdi3+0x1d0>
 8005f80:	46c8      	mov	r8, r9
 8005f82:	e7d1      	b.n	8005f28 <__divdi3+0x22c>
 8005f84:	4602      	mov	r2, r0
 8005f86:	e78c      	b.n	8005ea2 <__divdi3+0x1a6>
 8005f88:	4613      	mov	r3, r2
 8005f8a:	e70a      	b.n	8005da2 <__divdi3+0xa6>
 8005f8c:	3b02      	subs	r3, #2
 8005f8e:	e757      	b.n	8005e40 <__divdi3+0x144>
 8005f90:	f1a8 0802 	sub.w	r8, r8, #2
 8005f94:	442f      	add	r7, r5
 8005f96:	e73f      	b.n	8005e18 <__divdi3+0x11c>

08005f98 <__udivdi3>:
 8005f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d144      	bne.n	800602a <__udivdi3+0x92>
 8005fa0:	428a      	cmp	r2, r1
 8005fa2:	4615      	mov	r5, r2
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	d94f      	bls.n	8006048 <__udivdi3+0xb0>
 8005fa8:	fab2 f782 	clz	r7, r2
 8005fac:	460e      	mov	r6, r1
 8005fae:	b14f      	cbz	r7, 8005fc4 <__udivdi3+0x2c>
 8005fb0:	f1c7 0320 	rsb	r3, r7, #32
 8005fb4:	40b9      	lsls	r1, r7
 8005fb6:	fa20 f603 	lsr.w	r6, r0, r3
 8005fba:	fa02 f507 	lsl.w	r5, r2, r7
 8005fbe:	430e      	orrs	r6, r1
 8005fc0:	fa00 f407 	lsl.w	r4, r0, r7
 8005fc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005fc8:	0c23      	lsrs	r3, r4, #16
 8005fca:	fbb6 f0fe 	udiv	r0, r6, lr
 8005fce:	b2af      	uxth	r7, r5
 8005fd0:	fb0e 6110 	mls	r1, lr, r0, r6
 8005fd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005fd8:	fb07 f100 	mul.w	r1, r7, r0
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	d909      	bls.n	8005ff4 <__udivdi3+0x5c>
 8005fe0:	195b      	adds	r3, r3, r5
 8005fe2:	f100 32ff 	add.w	r2, r0, #4294967295
 8005fe6:	f080 80ec 	bcs.w	80061c2 <__udivdi3+0x22a>
 8005fea:	4299      	cmp	r1, r3
 8005fec:	f240 80e9 	bls.w	80061c2 <__udivdi3+0x22a>
 8005ff0:	3802      	subs	r0, #2
 8005ff2:	442b      	add	r3, r5
 8005ff4:	1a5a      	subs	r2, r3, r1
 8005ff6:	b2a4      	uxth	r4, r4
 8005ff8:	fbb2 f3fe 	udiv	r3, r2, lr
 8005ffc:	fb0e 2213 	mls	r2, lr, r3, r2
 8006000:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8006004:	fb07 f703 	mul.w	r7, r7, r3
 8006008:	4297      	cmp	r7, r2
 800600a:	d908      	bls.n	800601e <__udivdi3+0x86>
 800600c:	1952      	adds	r2, r2, r5
 800600e:	f103 31ff 	add.w	r1, r3, #4294967295
 8006012:	f080 80d8 	bcs.w	80061c6 <__udivdi3+0x22e>
 8006016:	4297      	cmp	r7, r2
 8006018:	f240 80d5 	bls.w	80061c6 <__udivdi3+0x22e>
 800601c:	3b02      	subs	r3, #2
 800601e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006022:	2600      	movs	r6, #0
 8006024:	4631      	mov	r1, r6
 8006026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800602a:	428b      	cmp	r3, r1
 800602c:	d847      	bhi.n	80060be <__udivdi3+0x126>
 800602e:	fab3 f683 	clz	r6, r3
 8006032:	2e00      	cmp	r6, #0
 8006034:	d148      	bne.n	80060c8 <__udivdi3+0x130>
 8006036:	428b      	cmp	r3, r1
 8006038:	d302      	bcc.n	8006040 <__udivdi3+0xa8>
 800603a:	4282      	cmp	r2, r0
 800603c:	f200 80cd 	bhi.w	80061da <__udivdi3+0x242>
 8006040:	2001      	movs	r0, #1
 8006042:	4631      	mov	r1, r6
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	b912      	cbnz	r2, 8006050 <__udivdi3+0xb8>
 800604a:	2501      	movs	r5, #1
 800604c:	fbb5 f5f2 	udiv	r5, r5, r2
 8006050:	fab5 f885 	clz	r8, r5
 8006054:	f1b8 0f00 	cmp.w	r8, #0
 8006058:	d177      	bne.n	800614a <__udivdi3+0x1b2>
 800605a:	1b4a      	subs	r2, r1, r5
 800605c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006060:	b2af      	uxth	r7, r5
 8006062:	2601      	movs	r6, #1
 8006064:	fbb2 f0fe 	udiv	r0, r2, lr
 8006068:	0c23      	lsrs	r3, r4, #16
 800606a:	fb0e 2110 	mls	r1, lr, r0, r2
 800606e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8006072:	fb07 f300 	mul.w	r3, r7, r0
 8006076:	428b      	cmp	r3, r1
 8006078:	d907      	bls.n	800608a <__udivdi3+0xf2>
 800607a:	1949      	adds	r1, r1, r5
 800607c:	f100 32ff 	add.w	r2, r0, #4294967295
 8006080:	d202      	bcs.n	8006088 <__udivdi3+0xf0>
 8006082:	428b      	cmp	r3, r1
 8006084:	f200 80ba 	bhi.w	80061fc <__udivdi3+0x264>
 8006088:	4610      	mov	r0, r2
 800608a:	1ac9      	subs	r1, r1, r3
 800608c:	b2a4      	uxth	r4, r4
 800608e:	fbb1 f3fe 	udiv	r3, r1, lr
 8006092:	fb0e 1113 	mls	r1, lr, r3, r1
 8006096:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800609a:	fb07 f703 	mul.w	r7, r7, r3
 800609e:	42a7      	cmp	r7, r4
 80060a0:	d908      	bls.n	80060b4 <__udivdi3+0x11c>
 80060a2:	1964      	adds	r4, r4, r5
 80060a4:	f103 32ff 	add.w	r2, r3, #4294967295
 80060a8:	f080 808f 	bcs.w	80061ca <__udivdi3+0x232>
 80060ac:	42a7      	cmp	r7, r4
 80060ae:	f240 808c 	bls.w	80061ca <__udivdi3+0x232>
 80060b2:	3b02      	subs	r3, #2
 80060b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80060b8:	4631      	mov	r1, r6
 80060ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060be:	2600      	movs	r6, #0
 80060c0:	4630      	mov	r0, r6
 80060c2:	4631      	mov	r1, r6
 80060c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c8:	f1c6 0420 	rsb	r4, r6, #32
 80060cc:	fa22 f504 	lsr.w	r5, r2, r4
 80060d0:	40b3      	lsls	r3, r6
 80060d2:	432b      	orrs	r3, r5
 80060d4:	fa20 fc04 	lsr.w	ip, r0, r4
 80060d8:	fa01 f706 	lsl.w	r7, r1, r6
 80060dc:	fa21 f504 	lsr.w	r5, r1, r4
 80060e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060e4:	ea4c 0707 	orr.w	r7, ip, r7
 80060e8:	fbb5 f8fe 	udiv	r8, r5, lr
 80060ec:	0c39      	lsrs	r1, r7, #16
 80060ee:	fb0e 5518 	mls	r5, lr, r8, r5
 80060f2:	fa1f fc83 	uxth.w	ip, r3
 80060f6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80060fa:	fb0c f108 	mul.w	r1, ip, r8
 80060fe:	42a9      	cmp	r1, r5
 8006100:	fa02 f206 	lsl.w	r2, r2, r6
 8006104:	d904      	bls.n	8006110 <__udivdi3+0x178>
 8006106:	18ed      	adds	r5, r5, r3
 8006108:	f108 34ff 	add.w	r4, r8, #4294967295
 800610c:	d367      	bcc.n	80061de <__udivdi3+0x246>
 800610e:	46a0      	mov	r8, r4
 8006110:	1a6d      	subs	r5, r5, r1
 8006112:	b2bf      	uxth	r7, r7
 8006114:	fbb5 f4fe 	udiv	r4, r5, lr
 8006118:	fb0e 5514 	mls	r5, lr, r4, r5
 800611c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8006120:	fb0c fc04 	mul.w	ip, ip, r4
 8006124:	458c      	cmp	ip, r1
 8006126:	d904      	bls.n	8006132 <__udivdi3+0x19a>
 8006128:	18c9      	adds	r1, r1, r3
 800612a:	f104 35ff 	add.w	r5, r4, #4294967295
 800612e:	d35c      	bcc.n	80061ea <__udivdi3+0x252>
 8006130:	462c      	mov	r4, r5
 8006132:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8006136:	ebcc 0101 	rsb	r1, ip, r1
 800613a:	fba4 2302 	umull	r2, r3, r4, r2
 800613e:	4299      	cmp	r1, r3
 8006140:	d348      	bcc.n	80061d4 <__udivdi3+0x23c>
 8006142:	d044      	beq.n	80061ce <__udivdi3+0x236>
 8006144:	4620      	mov	r0, r4
 8006146:	2600      	movs	r6, #0
 8006148:	e76c      	b.n	8006024 <__udivdi3+0x8c>
 800614a:	f1c8 0420 	rsb	r4, r8, #32
 800614e:	fa01 f308 	lsl.w	r3, r1, r8
 8006152:	fa05 f508 	lsl.w	r5, r5, r8
 8006156:	fa20 f704 	lsr.w	r7, r0, r4
 800615a:	40e1      	lsrs	r1, r4
 800615c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006160:	431f      	orrs	r7, r3
 8006162:	fbb1 f6fe 	udiv	r6, r1, lr
 8006166:	0c3a      	lsrs	r2, r7, #16
 8006168:	fb0e 1116 	mls	r1, lr, r6, r1
 800616c:	fa1f fc85 	uxth.w	ip, r5
 8006170:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8006174:	fb0c f206 	mul.w	r2, ip, r6
 8006178:	429a      	cmp	r2, r3
 800617a:	fa00 f408 	lsl.w	r4, r0, r8
 800617e:	d907      	bls.n	8006190 <__udivdi3+0x1f8>
 8006180:	195b      	adds	r3, r3, r5
 8006182:	f106 31ff 	add.w	r1, r6, #4294967295
 8006186:	d237      	bcs.n	80061f8 <__udivdi3+0x260>
 8006188:	429a      	cmp	r2, r3
 800618a:	d935      	bls.n	80061f8 <__udivdi3+0x260>
 800618c:	3e02      	subs	r6, #2
 800618e:	442b      	add	r3, r5
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	b2bf      	uxth	r7, r7
 8006194:	fbb3 f0fe 	udiv	r0, r3, lr
 8006198:	fb0e 3310 	mls	r3, lr, r0, r3
 800619c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80061a0:	fb0c f100 	mul.w	r1, ip, r0
 80061a4:	4299      	cmp	r1, r3
 80061a6:	d907      	bls.n	80061b8 <__udivdi3+0x220>
 80061a8:	195b      	adds	r3, r3, r5
 80061aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80061ae:	d221      	bcs.n	80061f4 <__udivdi3+0x25c>
 80061b0:	4299      	cmp	r1, r3
 80061b2:	d91f      	bls.n	80061f4 <__udivdi3+0x25c>
 80061b4:	3802      	subs	r0, #2
 80061b6:	442b      	add	r3, r5
 80061b8:	1a5a      	subs	r2, r3, r1
 80061ba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80061be:	4667      	mov	r7, ip
 80061c0:	e750      	b.n	8006064 <__udivdi3+0xcc>
 80061c2:	4610      	mov	r0, r2
 80061c4:	e716      	b.n	8005ff4 <__udivdi3+0x5c>
 80061c6:	460b      	mov	r3, r1
 80061c8:	e729      	b.n	800601e <__udivdi3+0x86>
 80061ca:	4613      	mov	r3, r2
 80061cc:	e772      	b.n	80060b4 <__udivdi3+0x11c>
 80061ce:	40b0      	lsls	r0, r6
 80061d0:	4290      	cmp	r0, r2
 80061d2:	d2b7      	bcs.n	8006144 <__udivdi3+0x1ac>
 80061d4:	1e60      	subs	r0, r4, #1
 80061d6:	2600      	movs	r6, #0
 80061d8:	e724      	b.n	8006024 <__udivdi3+0x8c>
 80061da:	4630      	mov	r0, r6
 80061dc:	e722      	b.n	8006024 <__udivdi3+0x8c>
 80061de:	42a9      	cmp	r1, r5
 80061e0:	d995      	bls.n	800610e <__udivdi3+0x176>
 80061e2:	f1a8 0802 	sub.w	r8, r8, #2
 80061e6:	441d      	add	r5, r3
 80061e8:	e792      	b.n	8006110 <__udivdi3+0x178>
 80061ea:	458c      	cmp	ip, r1
 80061ec:	d9a0      	bls.n	8006130 <__udivdi3+0x198>
 80061ee:	3c02      	subs	r4, #2
 80061f0:	4419      	add	r1, r3
 80061f2:	e79e      	b.n	8006132 <__udivdi3+0x19a>
 80061f4:	4610      	mov	r0, r2
 80061f6:	e7df      	b.n	80061b8 <__udivdi3+0x220>
 80061f8:	460e      	mov	r6, r1
 80061fa:	e7c9      	b.n	8006190 <__udivdi3+0x1f8>
 80061fc:	3802      	subs	r0, #2
 80061fe:	4429      	add	r1, r5
 8006200:	e743      	b.n	800608a <__udivdi3+0xf2>
 8006202:	bf00      	nop

08006204 <__errno>:
 8006204:	4b01      	ldr	r3, [pc, #4]	; (800620c <__errno+0x8>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000280 	.word	0x20000280

08006210 <__libc_init_array>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4b0e      	ldr	r3, [pc, #56]	; (800624c <__libc_init_array+0x3c>)
 8006214:	4c0e      	ldr	r4, [pc, #56]	; (8006250 <__libc_init_array+0x40>)
 8006216:	1ae4      	subs	r4, r4, r3
 8006218:	10a4      	asrs	r4, r4, #2
 800621a:	2500      	movs	r5, #0
 800621c:	461e      	mov	r6, r3
 800621e:	42a5      	cmp	r5, r4
 8006220:	d004      	beq.n	800622c <__libc_init_array+0x1c>
 8006222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006226:	4798      	blx	r3
 8006228:	3501      	adds	r5, #1
 800622a:	e7f8      	b.n	800621e <__libc_init_array+0xe>
 800622c:	f7fb fda0 	bl	8001d70 <_init>
 8006230:	4c08      	ldr	r4, [pc, #32]	; (8006254 <__libc_init_array+0x44>)
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <__libc_init_array+0x48>)
 8006234:	1ae4      	subs	r4, r4, r3
 8006236:	10a4      	asrs	r4, r4, #2
 8006238:	2500      	movs	r5, #0
 800623a:	461e      	mov	r6, r3
 800623c:	42a5      	cmp	r5, r4
 800623e:	d004      	beq.n	800624a <__libc_init_array+0x3a>
 8006240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006244:	4798      	blx	r3
 8006246:	3501      	adds	r5, #1
 8006248:	e7f8      	b.n	800623c <__libc_init_array+0x2c>
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	200002bc 	.word	0x200002bc
 8006250:	200002bc 	.word	0x200002bc
 8006254:	200002bc 	.word	0x200002bc
 8006258:	200002bc 	.word	0x200002bc

0800625c <memcpy>:
 800625c:	b510      	push	{r4, lr}
 800625e:	1e43      	subs	r3, r0, #1
 8006260:	440a      	add	r2, r1
 8006262:	4291      	cmp	r1, r2
 8006264:	d004      	beq.n	8006270 <memcpy+0x14>
 8006266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800626a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800626e:	e7f8      	b.n	8006262 <memcpy+0x6>
 8006270:	bd10      	pop	{r4, pc}

08006272 <memset>:
 8006272:	4402      	add	r2, r0
 8006274:	4603      	mov	r3, r0
 8006276:	4293      	cmp	r3, r2
 8006278:	d002      	beq.n	8006280 <memset+0xe>
 800627a:	f803 1b01 	strb.w	r1, [r3], #1
 800627e:	e7fa      	b.n	8006276 <memset+0x4>
 8006280:	4770      	bx	lr

08006282 <__cvt>:
 8006282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800628c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800628e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006290:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006294:	461d      	mov	r5, r3
 8006296:	bfb8      	it	lt
 8006298:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800629c:	f027 0720 	bic.w	r7, r7, #32
 80062a0:	bfb6      	itet	lt
 80062a2:	461d      	movlt	r5, r3
 80062a4:	2300      	movge	r3, #0
 80062a6:	232d      	movlt	r3, #45	; 0x2d
 80062a8:	4614      	mov	r4, r2
 80062aa:	bfb8      	it	lt
 80062ac:	4614      	movlt	r4, r2
 80062ae:	2f46      	cmp	r7, #70	; 0x46
 80062b0:	700b      	strb	r3, [r1, #0]
 80062b2:	d003      	beq.n	80062bc <__cvt+0x3a>
 80062b4:	2f45      	cmp	r7, #69	; 0x45
 80062b6:	d103      	bne.n	80062c0 <__cvt+0x3e>
 80062b8:	3601      	adds	r6, #1
 80062ba:	e001      	b.n	80062c0 <__cvt+0x3e>
 80062bc:	2303      	movs	r3, #3
 80062be:	e000      	b.n	80062c2 <__cvt+0x40>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 80062c6:	ab06      	add	r3, sp, #24
 80062c8:	9303      	str	r3, [sp, #12]
 80062ca:	ab07      	add	r3, sp, #28
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	4622      	mov	r2, r4
 80062d0:	462b      	mov	r3, r5
 80062d2:	f000 fd3d 	bl	8006d50 <_dtoa_r>
 80062d6:	2f47      	cmp	r7, #71	; 0x47
 80062d8:	4680      	mov	r8, r0
 80062da:	d102      	bne.n	80062e2 <__cvt+0x60>
 80062dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062de:	07db      	lsls	r3, r3, #31
 80062e0:	d526      	bpl.n	8006330 <__cvt+0xae>
 80062e2:	2f46      	cmp	r7, #70	; 0x46
 80062e4:	eb08 0906 	add.w	r9, r8, r6
 80062e8:	d111      	bne.n	800630e <__cvt+0x8c>
 80062ea:	f898 3000 	ldrb.w	r3, [r8]
 80062ee:	2b30      	cmp	r3, #48	; 0x30
 80062f0:	d10a      	bne.n	8006308 <__cvt+0x86>
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	2200      	movs	r2, #0
 80062f8:	2300      	movs	r3, #0
 80062fa:	f7ff fc3d 	bl	8005b78 <__aeabi_dcmpeq>
 80062fe:	b918      	cbnz	r0, 8006308 <__cvt+0x86>
 8006300:	f1c6 0601 	rsb	r6, r6, #1
 8006304:	f8ca 6000 	str.w	r6, [sl]
 8006308:	f8da 3000 	ldr.w	r3, [sl]
 800630c:	4499      	add	r9, r3
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	f7ff fc2f 	bl	8005b78 <__aeabi_dcmpeq>
 800631a:	b108      	cbz	r0, 8006320 <__cvt+0x9e>
 800631c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006320:	9b07      	ldr	r3, [sp, #28]
 8006322:	454b      	cmp	r3, r9
 8006324:	d204      	bcs.n	8006330 <__cvt+0xae>
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	9207      	str	r2, [sp, #28]
 800632a:	2230      	movs	r2, #48	; 0x30
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e7f7      	b.n	8006320 <__cvt+0x9e>
 8006330:	9b07      	ldr	r3, [sp, #28]
 8006332:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006334:	ebc8 0303 	rsb	r3, r8, r3
 8006338:	4640      	mov	r0, r8
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	b008      	add	sp, #32
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006342 <__exponent>:
 8006342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006344:	4603      	mov	r3, r0
 8006346:	2900      	cmp	r1, #0
 8006348:	bfb8      	it	lt
 800634a:	4249      	neglt	r1, r1
 800634c:	f803 2b02 	strb.w	r2, [r3], #2
 8006350:	bfb4      	ite	lt
 8006352:	222d      	movlt	r2, #45	; 0x2d
 8006354:	222b      	movge	r2, #43	; 0x2b
 8006356:	2909      	cmp	r1, #9
 8006358:	7042      	strb	r2, [r0, #1]
 800635a:	dd19      	ble.n	8006390 <__exponent+0x4e>
 800635c:	f10d 0407 	add.w	r4, sp, #7
 8006360:	4626      	mov	r6, r4
 8006362:	220a      	movs	r2, #10
 8006364:	fb91 f5f2 	sdiv	r5, r1, r2
 8006368:	fb02 1115 	mls	r1, r2, r5, r1
 800636c:	3130      	adds	r1, #48	; 0x30
 800636e:	2d09      	cmp	r5, #9
 8006370:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8006374:	4629      	mov	r1, r5
 8006376:	dcf4      	bgt.n	8006362 <__exponent+0x20>
 8006378:	3130      	adds	r1, #48	; 0x30
 800637a:	1e65      	subs	r5, r4, #1
 800637c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006380:	42b5      	cmp	r5, r6
 8006382:	461a      	mov	r2, r3
 8006384:	d20a      	bcs.n	800639c <__exponent+0x5a>
 8006386:	f815 2b01 	ldrb.w	r2, [r5], #1
 800638a:	f803 2b01 	strb.w	r2, [r3], #1
 800638e:	e7f7      	b.n	8006380 <__exponent+0x3e>
 8006390:	2430      	movs	r4, #48	; 0x30
 8006392:	461a      	mov	r2, r3
 8006394:	4421      	add	r1, r4
 8006396:	f802 4b02 	strb.w	r4, [r2], #2
 800639a:	7059      	strb	r1, [r3, #1]
 800639c:	1a10      	subs	r0, r2, r0
 800639e:	b002      	add	sp, #8
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080063a4 <_printf_float>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	b091      	sub	sp, #68	; 0x44
 80063aa:	468b      	mov	fp, r1
 80063ac:	4615      	mov	r5, r2
 80063ae:	461e      	mov	r6, r3
 80063b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80063b2:	4604      	mov	r4, r0
 80063b4:	f001 fa90 	bl	80078d8 <_localeconv_r>
 80063b8:	f8d0 a000 	ldr.w	sl, [r0]
 80063bc:	4650      	mov	r0, sl
 80063be:	f000 fc30 	bl	8006c22 <strlen>
 80063c2:	2300      	movs	r3, #0
 80063c4:	930e      	str	r3, [sp, #56]	; 0x38
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9009      	str	r0, [sp, #36]	; 0x24
 80063ca:	3307      	adds	r3, #7
 80063cc:	f023 0307 	bic.w	r3, r3, #7
 80063d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063d4:	f103 0208 	add.w	r2, r3, #8
 80063d8:	f89b 8018 	ldrb.w	r8, [fp, #24]
 80063dc:	603a      	str	r2, [r7, #0]
 80063de:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 80063e2:	f000 fbb3 	bl	8006b4c <__fpclassifyd>
 80063e6:	2801      	cmp	r0, #1
 80063e8:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80063ec:	d119      	bne.n	8006422 <_printf_float+0x7e>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	f7ff fbcb 	bl	8005b8c <__aeabi_dcmplt>
 80063f6:	b110      	cbz	r0, 80063fe <_printf_float+0x5a>
 80063f8:	232d      	movs	r3, #45	; 0x2d
 80063fa:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80063fe:	4ba0      	ldr	r3, [pc, #640]	; (8006680 <_printf_float+0x2dc>)
 8006400:	4fa0      	ldr	r7, [pc, #640]	; (8006684 <_printf_float+0x2e0>)
 8006402:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006406:	bf88      	it	hi
 8006408:	461f      	movhi	r7, r3
 800640a:	2303      	movs	r3, #3
 800640c:	f8cb 3010 	str.w	r3, [fp, #16]
 8006410:	f8db 3000 	ldr.w	r3, [fp]
 8006414:	f023 0304 	bic.w	r3, r3, #4
 8006418:	f8cb 3000 	str.w	r3, [fp]
 800641c:	f04f 0900 	mov.w	r9, #0
 8006420:	e0a1      	b.n	8006566 <_printf_float+0x1c2>
 8006422:	f000 fb93 	bl	8006b4c <__fpclassifyd>
 8006426:	f8db 3000 	ldr.w	r3, [fp]
 800642a:	b948      	cbnz	r0, 8006440 <_printf_float+0x9c>
 800642c:	4a96      	ldr	r2, [pc, #600]	; (8006688 <_printf_float+0x2e4>)
 800642e:	4f97      	ldr	r7, [pc, #604]	; (800668c <_printf_float+0x2e8>)
 8006430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006434:	bf88      	it	hi
 8006436:	4617      	movhi	r7, r2
 8006438:	2203      	movs	r2, #3
 800643a:	f8cb 2010 	str.w	r2, [fp, #16]
 800643e:	e7e9      	b.n	8006414 <_printf_float+0x70>
 8006440:	f8db 2004 	ldr.w	r2, [fp, #4]
 8006444:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 8006448:	1c57      	adds	r7, r2, #1
 800644a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800644e:	d101      	bne.n	8006454 <_printf_float+0xb0>
 8006450:	2206      	movs	r2, #6
 8006452:	e009      	b.n	8006468 <_printf_float+0xc4>
 8006454:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006458:	d002      	beq.n	8006460 <_printf_float+0xbc>
 800645a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800645e:	d105      	bne.n	800646c <_printf_float+0xc8>
 8006460:	2a00      	cmp	r2, #0
 8006462:	f040 81c7 	bne.w	80067f4 <_printf_float+0x450>
 8006466:	2201      	movs	r2, #1
 8006468:	f8cb 2004 	str.w	r2, [fp, #4]
 800646c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8006470:	f8cd 8010 	str.w	r8, [sp, #16]
 8006474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006478:	e88d 000c 	stmia.w	sp, {r2, r3}
 800647c:	f8cb 3000 	str.w	r3, [fp]
 8006480:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	ab0d      	add	r3, sp, #52	; 0x34
 8006488:	9303      	str	r3, [sp, #12]
 800648a:	ab0e      	add	r3, sp, #56	; 0x38
 800648c:	9305      	str	r3, [sp, #20]
 800648e:	2300      	movs	r3, #0
 8006490:	9306      	str	r3, [sp, #24]
 8006492:	4620      	mov	r0, r4
 8006494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006498:	f7ff fef3 	bl	8006282 <__cvt>
 800649c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80064a0:	2b47      	cmp	r3, #71	; 0x47
 80064a2:	4607      	mov	r7, r0
 80064a4:	d10a      	bne.n	80064bc <_printf_float+0x118>
 80064a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a8:	1cd8      	adds	r0, r3, #3
 80064aa:	db03      	blt.n	80064b4 <_printf_float+0x110>
 80064ac:	f8db 2004 	ldr.w	r2, [fp, #4]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	dd37      	ble.n	8006524 <_printf_float+0x180>
 80064b4:	f1a8 0802 	sub.w	r8, r8, #2
 80064b8:	fa5f f888 	uxtb.w	r8, r8
 80064bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80064c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064c2:	d815      	bhi.n	80064f0 <_printf_float+0x14c>
 80064c4:	3901      	subs	r1, #1
 80064c6:	4642      	mov	r2, r8
 80064c8:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 80064cc:	910d      	str	r1, [sp, #52]	; 0x34
 80064ce:	f7ff ff38 	bl	8006342 <__exponent>
 80064d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d4:	1883      	adds	r3, r0, r2
 80064d6:	2a01      	cmp	r2, #1
 80064d8:	4681      	mov	r9, r0
 80064da:	f8cb 3010 	str.w	r3, [fp, #16]
 80064de:	dc03      	bgt.n	80064e8 <_printf_float+0x144>
 80064e0:	f8db 2000 	ldr.w	r2, [fp]
 80064e4:	07d1      	lsls	r1, r2, #31
 80064e6:	d538      	bpl.n	800655a <_printf_float+0x1b6>
 80064e8:	3301      	adds	r3, #1
 80064ea:	f8cb 3010 	str.w	r3, [fp, #16]
 80064ee:	e034      	b.n	800655a <_printf_float+0x1b6>
 80064f0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80064f4:	d118      	bne.n	8006528 <_printf_float+0x184>
 80064f6:	2900      	cmp	r1, #0
 80064f8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80064fc:	dd09      	ble.n	8006512 <_printf_float+0x16e>
 80064fe:	f8cb 1010 	str.w	r1, [fp, #16]
 8006502:	b91b      	cbnz	r3, 800650c <_printf_float+0x168>
 8006504:	f8db 2000 	ldr.w	r2, [fp]
 8006508:	07d2      	lsls	r2, r2, #31
 800650a:	d521      	bpl.n	8006550 <_printf_float+0x1ac>
 800650c:	3301      	adds	r3, #1
 800650e:	440b      	add	r3, r1
 8006510:	e01c      	b.n	800654c <_printf_float+0x1a8>
 8006512:	b91b      	cbnz	r3, 800651c <_printf_float+0x178>
 8006514:	f8db 2000 	ldr.w	r2, [fp]
 8006518:	07d0      	lsls	r0, r2, #31
 800651a:	d501      	bpl.n	8006520 <_printf_float+0x17c>
 800651c:	3302      	adds	r3, #2
 800651e:	e015      	b.n	800654c <_printf_float+0x1a8>
 8006520:	2301      	movs	r3, #1
 8006522:	e013      	b.n	800654c <_printf_float+0x1a8>
 8006524:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800652c:	4293      	cmp	r3, r2
 800652e:	db07      	blt.n	8006540 <_printf_float+0x19c>
 8006530:	f8db 2000 	ldr.w	r2, [fp]
 8006534:	f8cb 3010 	str.w	r3, [fp, #16]
 8006538:	07d1      	lsls	r1, r2, #31
 800653a:	d509      	bpl.n	8006550 <_printf_float+0x1ac>
 800653c:	3301      	adds	r3, #1
 800653e:	e005      	b.n	800654c <_printf_float+0x1a8>
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfd4      	ite	le
 8006544:	f1c3 0302 	rsble	r3, r3, #2
 8006548:	2301      	movgt	r3, #1
 800654a:	4413      	add	r3, r2
 800654c:	f8cb 3010 	str.w	r3, [fp, #16]
 8006550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006552:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8006556:	f04f 0900 	mov.w	r9, #0
 800655a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800655e:	b113      	cbz	r3, 8006566 <_printf_float+0x1c2>
 8006560:	232d      	movs	r3, #45	; 0x2d
 8006562:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8006566:	9600      	str	r6, [sp, #0]
 8006568:	4620      	mov	r0, r4
 800656a:	4659      	mov	r1, fp
 800656c:	aa0f      	add	r2, sp, #60	; 0x3c
 800656e:	462b      	mov	r3, r5
 8006570:	f000 f95c 	bl	800682c <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	d102      	bne.n	800657e <_printf_float+0x1da>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e152      	b.n	8006824 <_printf_float+0x480>
 800657e:	f8db 3000 	ldr.w	r3, [fp]
 8006582:	055a      	lsls	r2, r3, #21
 8006584:	d405      	bmi.n	8006592 <_printf_float+0x1ee>
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	463a      	mov	r2, r7
 800658c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006590:	e108      	b.n	80067a4 <_printf_float+0x400>
 8006592:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006596:	f240 80d0 	bls.w	800673a <_printf_float+0x396>
 800659a:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	f7ff fae9 	bl	8005b78 <__aeabi_dcmpeq>
 80065a6:	b350      	cbz	r0, 80065fe <_printf_float+0x25a>
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	4a38      	ldr	r2, [pc, #224]	; (8006690 <_printf_float+0x2ec>)
 80065ae:	2301      	movs	r3, #1
 80065b0:	47b0      	blx	r6
 80065b2:	3001      	adds	r0, #1
 80065b4:	d0e0      	beq.n	8006578 <_printf_float+0x1d4>
 80065b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ba:	429a      	cmp	r2, r3
 80065bc:	db09      	blt.n	80065d2 <_printf_float+0x22e>
 80065be:	f8db 3000 	ldr.w	r3, [fp]
 80065c2:	07d8      	lsls	r0, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_printf_float+0x22e>
 80065c6:	f8db 3000 	ldr.w	r3, [fp]
 80065ca:	079f      	lsls	r7, r3, #30
 80065cc:	f100 8110 	bmi.w	80067f0 <_printf_float+0x44c>
 80065d0:	e107      	b.n	80067e2 <_printf_float+0x43e>
 80065d2:	4620      	mov	r0, r4
 80065d4:	4629      	mov	r1, r5
 80065d6:	4652      	mov	r2, sl
 80065d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065da:	47b0      	blx	r6
 80065dc:	3001      	adds	r0, #1
 80065de:	d0cb      	beq.n	8006578 <_printf_float+0x1d4>
 80065e0:	2700      	movs	r7, #0
 80065e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e4:	3b01      	subs	r3, #1
 80065e6:	429f      	cmp	r7, r3
 80065e8:	daed      	bge.n	80065c6 <_printf_float+0x222>
 80065ea:	4620      	mov	r0, r4
 80065ec:	4629      	mov	r1, r5
 80065ee:	f10b 021a 	add.w	r2, fp, #26
 80065f2:	2301      	movs	r3, #1
 80065f4:	47b0      	blx	r6
 80065f6:	3001      	adds	r0, #1
 80065f8:	d0be      	beq.n	8006578 <_printf_float+0x1d4>
 80065fa:	3701      	adds	r7, #1
 80065fc:	e7f1      	b.n	80065e2 <_printf_float+0x23e>
 80065fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc29      	bgt.n	8006658 <_printf_float+0x2b4>
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	4a21      	ldr	r2, [pc, #132]	; (8006690 <_printf_float+0x2ec>)
 800660a:	2301      	movs	r3, #1
 800660c:	47b0      	blx	r6
 800660e:	3001      	adds	r0, #1
 8006610:	d0b2      	beq.n	8006578 <_printf_float+0x1d4>
 8006612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006614:	b92b      	cbnz	r3, 8006622 <_printf_float+0x27e>
 8006616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006618:	b91b      	cbnz	r3, 8006622 <_printf_float+0x27e>
 800661a:	f8db 3000 	ldr.w	r3, [fp]
 800661e:	07d9      	lsls	r1, r3, #31
 8006620:	d5d1      	bpl.n	80065c6 <_printf_float+0x222>
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	4652      	mov	r2, sl
 8006628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662a:	47b0      	blx	r6
 800662c:	3001      	adds	r0, #1
 800662e:	d0a3      	beq.n	8006578 <_printf_float+0x1d4>
 8006630:	f04f 0800 	mov.w	r8, #0
 8006634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006636:	425b      	negs	r3, r3
 8006638:	4598      	cmp	r8, r3
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	da08      	bge.n	8006652 <_printf_float+0x2ae>
 8006640:	f10b 021a 	add.w	r2, fp, #26
 8006644:	2301      	movs	r3, #1
 8006646:	47b0      	blx	r6
 8006648:	3001      	adds	r0, #1
 800664a:	d095      	beq.n	8006578 <_printf_float+0x1d4>
 800664c:	f108 0801 	add.w	r8, r8, #1
 8006650:	e7f0      	b.n	8006634 <_printf_float+0x290>
 8006652:	463a      	mov	r2, r7
 8006654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006656:	e0a5      	b.n	80067a4 <_printf_float+0x400>
 8006658:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800665c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800665e:	429a      	cmp	r2, r3
 8006660:	bfa8      	it	ge
 8006662:	461a      	movge	r2, r3
 8006664:	2a00      	cmp	r2, #0
 8006666:	4691      	mov	r9, r2
 8006668:	dc02      	bgt.n	8006670 <_printf_float+0x2cc>
 800666a:	f04f 0800 	mov.w	r8, #0
 800666e:	e01c      	b.n	80066aa <_printf_float+0x306>
 8006670:	4620      	mov	r0, r4
 8006672:	4629      	mov	r1, r5
 8006674:	463a      	mov	r2, r7
 8006676:	464b      	mov	r3, r9
 8006678:	47b0      	blx	r6
 800667a:	3001      	adds	r0, #1
 800667c:	d1f5      	bne.n	800666a <_printf_float+0x2c6>
 800667e:	e77b      	b.n	8006578 <_printf_float+0x1d4>
 8006680:	080088ce 	.word	0x080088ce
 8006684:	080088ca 	.word	0x080088ca
 8006688:	080088d6 	.word	0x080088d6
 800668c:	080088d2 	.word	0x080088d2
 8006690:	080088da 	.word	0x080088da
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f10b 021a 	add.w	r2, fp, #26
 800669c:	2301      	movs	r3, #1
 800669e:	47b0      	blx	r6
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f af69 	beq.w	8006578 <_printf_float+0x1d4>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80066ae:	f1b9 0f00 	cmp.w	r9, #0
 80066b2:	bfac      	ite	ge
 80066b4:	ebc9 0203 	rsbge	r2, r9, r3
 80066b8:	461a      	movlt	r2, r3
 80066ba:	4590      	cmp	r8, r2
 80066bc:	dbea      	blt.n	8006694 <_printf_float+0x2f0>
 80066be:	eb07 0803 	add.w	r8, r7, r3
 80066c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066c6:	429a      	cmp	r2, r3
 80066c8:	db10      	blt.n	80066ec <_printf_float+0x348>
 80066ca:	f8db 3000 	ldr.w	r3, [fp]
 80066ce:	07da      	lsls	r2, r3, #31
 80066d0:	d40c      	bmi.n	80066ec <_printf_float+0x348>
 80066d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066d4:	4417      	add	r7, r2
 80066d6:	ebc8 0307 	rsb	r3, r8, r7
 80066da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80066dc:	1bd2      	subs	r2, r2, r7
 80066de:	4293      	cmp	r3, r2
 80066e0:	bfa8      	it	ge
 80066e2:	4613      	movge	r3, r2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	461f      	mov	r7, r3
 80066e8:	dc08      	bgt.n	80066fc <_printf_float+0x358>
 80066ea:	e00e      	b.n	800670a <_printf_float+0x366>
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	4652      	mov	r2, sl
 80066f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f4:	47b0      	blx	r6
 80066f6:	3001      	adds	r0, #1
 80066f8:	d1eb      	bne.n	80066d2 <_printf_float+0x32e>
 80066fa:	e73d      	b.n	8006578 <_printf_float+0x1d4>
 80066fc:	4620      	mov	r0, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	4642      	mov	r2, r8
 8006702:	47b0      	blx	r6
 8006704:	3001      	adds	r0, #1
 8006706:	f43f af37 	beq.w	8006578 <_printf_float+0x1d4>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	e00a      	b.n	8006726 <_printf_float+0x382>
 8006710:	4620      	mov	r0, r4
 8006712:	4629      	mov	r1, r5
 8006714:	f10b 021a 	add.w	r2, fp, #26
 8006718:	2301      	movs	r3, #1
 800671a:	47b0      	blx	r6
 800671c:	3001      	adds	r0, #1
 800671e:	f43f af2b 	beq.w	8006578 <_printf_float+0x1d4>
 8006722:	f108 0801 	add.w	r8, r8, #1
 8006726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800672a:	2f00      	cmp	r7, #0
 800672c:	eba3 0302 	sub.w	r3, r3, r2
 8006730:	bfa8      	it	ge
 8006732:	1bdb      	subge	r3, r3, r7
 8006734:	4598      	cmp	r8, r3
 8006736:	dbeb      	blt.n	8006710 <_printf_float+0x36c>
 8006738:	e745      	b.n	80065c6 <_printf_float+0x222>
 800673a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800673c:	2a01      	cmp	r2, #1
 800673e:	dc01      	bgt.n	8006744 <_printf_float+0x3a0>
 8006740:	07db      	lsls	r3, r3, #31
 8006742:	d536      	bpl.n	80067b2 <_printf_float+0x40e>
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	463a      	mov	r2, r7
 800674a:	2301      	movs	r3, #1
 800674c:	47b0      	blx	r6
 800674e:	3001      	adds	r0, #1
 8006750:	f43f af12 	beq.w	8006578 <_printf_float+0x1d4>
 8006754:	4620      	mov	r0, r4
 8006756:	4629      	mov	r1, r5
 8006758:	4652      	mov	r2, sl
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675c:	47b0      	blx	r6
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af0a 	beq.w	8006578 <_printf_float+0x1d4>
 8006764:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	f7ff fa04 	bl	8005b78 <__aeabi_dcmpeq>
 8006770:	b9e8      	cbnz	r0, 80067ae <_printf_float+0x40a>
 8006772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	1c7a      	adds	r2, r7, #1
 800677a:	3b01      	subs	r3, #1
 800677c:	e01d      	b.n	80067ba <_printf_float+0x416>
 800677e:	4620      	mov	r0, r4
 8006780:	4629      	mov	r1, r5
 8006782:	f10b 021a 	add.w	r2, fp, #26
 8006786:	2301      	movs	r3, #1
 8006788:	47b0      	blx	r6
 800678a:	3001      	adds	r0, #1
 800678c:	f43f aef4 	beq.w	8006578 <_printf_float+0x1d4>
 8006790:	3701      	adds	r7, #1
 8006792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006794:	3b01      	subs	r3, #1
 8006796:	429f      	cmp	r7, r3
 8006798:	dbf1      	blt.n	800677e <_printf_float+0x3da>
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 80067a2:	464b      	mov	r3, r9
 80067a4:	47b0      	blx	r6
 80067a6:	3001      	adds	r0, #1
 80067a8:	f47f af0d 	bne.w	80065c6 <_printf_float+0x222>
 80067ac:	e6e4      	b.n	8006578 <_printf_float+0x1d4>
 80067ae:	2700      	movs	r7, #0
 80067b0:	e7ef      	b.n	8006792 <_printf_float+0x3ee>
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	463a      	mov	r2, r7
 80067b8:	2301      	movs	r3, #1
 80067ba:	47b0      	blx	r6
 80067bc:	3001      	adds	r0, #1
 80067be:	d1ec      	bne.n	800679a <_printf_float+0x3f6>
 80067c0:	e6da      	b.n	8006578 <_printf_float+0x1d4>
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f10b 0219 	add.w	r2, fp, #25
 80067ca:	2301      	movs	r3, #1
 80067cc:	47b0      	blx	r6
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f aed2 	beq.w	8006578 <_printf_float+0x1d4>
 80067d4:	3701      	adds	r7, #1
 80067d6:	f8db 300c 	ldr.w	r3, [fp, #12]
 80067da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	429f      	cmp	r7, r3
 80067e0:	dbef      	blt.n	80067c2 <_printf_float+0x41e>
 80067e2:	f8db 000c 	ldr.w	r0, [fp, #12]
 80067e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e8:	4298      	cmp	r0, r3
 80067ea:	bfb8      	it	lt
 80067ec:	4618      	movlt	r0, r3
 80067ee:	e019      	b.n	8006824 <_printf_float+0x480>
 80067f0:	2700      	movs	r7, #0
 80067f2:	e7f0      	b.n	80067d6 <_printf_float+0x432>
 80067f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067f8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80067fc:	f8cb 3000 	str.w	r3, [fp]
 8006800:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006804:	9302      	str	r3, [sp, #8]
 8006806:	ab0d      	add	r3, sp, #52	; 0x34
 8006808:	9303      	str	r3, [sp, #12]
 800680a:	ab0e      	add	r3, sp, #56	; 0x38
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	2300      	movs	r3, #0
 8006810:	9306      	str	r3, [sp, #24]
 8006812:	f8cd 8010 	str.w	r8, [sp, #16]
 8006816:	4620      	mov	r0, r4
 8006818:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800681c:	f7ff fd31 	bl	8006282 <__cvt>
 8006820:	4607      	mov	r7, r0
 8006822:	e640      	b.n	80064a6 <_printf_float+0x102>
 8006824:	b011      	add	sp, #68	; 0x44
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682a:	bf00      	nop

0800682c <_printf_common>:
 800682c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006830:	4691      	mov	r9, r2
 8006832:	461f      	mov	r7, r3
 8006834:	688a      	ldr	r2, [r1, #8]
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800683c:	4293      	cmp	r3, r2
 800683e:	bfb8      	it	lt
 8006840:	4613      	movlt	r3, r2
 8006842:	f8c9 3000 	str.w	r3, [r9]
 8006846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684a:	4606      	mov	r6, r0
 800684c:	460c      	mov	r4, r1
 800684e:	b112      	cbz	r2, 8006856 <_printf_common+0x2a>
 8006850:	3301      	adds	r3, #1
 8006852:	f8c9 3000 	str.w	r3, [r9]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006860:	3302      	addmi	r3, #2
 8006862:	f8c9 3000 	strmi.w	r3, [r9]
 8006866:	6825      	ldr	r5, [r4, #0]
 8006868:	f015 0506 	ands.w	r5, r5, #6
 800686c:	d01c      	beq.n	80068a8 <_printf_common+0x7c>
 800686e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	3300      	adds	r3, #0
 8006876:	bf18      	it	ne
 8006878:	2301      	movne	r3, #1
 800687a:	0692      	lsls	r2, r2, #26
 800687c:	d51f      	bpl.n	80068be <_printf_common+0x92>
 800687e:	18e1      	adds	r1, r4, r3
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	2030      	movs	r0, #48	; 0x30
 8006884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006888:	4422      	add	r2, r4
 800688a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800688e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006892:	3302      	adds	r3, #2
 8006894:	e013      	b.n	80068be <_printf_common+0x92>
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f104 0219 	add.w	r2, r4, #25
 800689e:	2301      	movs	r3, #1
 80068a0:	47c0      	blx	r8
 80068a2:	3001      	adds	r0, #1
 80068a4:	d007      	beq.n	80068b6 <_printf_common+0x8a>
 80068a6:	3501      	adds	r5, #1
 80068a8:	68e3      	ldr	r3, [r4, #12]
 80068aa:	f8d9 2000 	ldr.w	r2, [r9]
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	429d      	cmp	r5, r3
 80068b2:	dbf0      	blt.n	8006896 <_printf_common+0x6a>
 80068b4:	e7db      	b.n	800686e <_printf_common+0x42>
 80068b6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068be:	4630      	mov	r0, r6
 80068c0:	4639      	mov	r1, r7
 80068c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c6:	47c0      	blx	r8
 80068c8:	3001      	adds	r0, #1
 80068ca:	d0f4      	beq.n	80068b6 <_printf_common+0x8a>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	f8d9 5000 	ldr.w	r5, [r9]
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	f002 0206 	and.w	r2, r2, #6
 80068d8:	2a04      	cmp	r2, #4
 80068da:	bf08      	it	eq
 80068dc:	1b5d      	subeq	r5, r3, r5
 80068de:	6922      	ldr	r2, [r4, #16]
 80068e0:	68a3      	ldr	r3, [r4, #8]
 80068e2:	bf0c      	ite	eq
 80068e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e8:	2500      	movne	r5, #0
 80068ea:	4293      	cmp	r3, r2
 80068ec:	bfc4      	itt	gt
 80068ee:	1a9b      	subgt	r3, r3, r2
 80068f0:	18ed      	addgt	r5, r5, r3
 80068f2:	f04f 0900 	mov.w	r9, #0
 80068f6:	45a9      	cmp	r9, r5
 80068f8:	da0a      	bge.n	8006910 <_printf_common+0xe4>
 80068fa:	4630      	mov	r0, r6
 80068fc:	4639      	mov	r1, r7
 80068fe:	f104 021a 	add.w	r2, r4, #26
 8006902:	2301      	movs	r3, #1
 8006904:	47c0      	blx	r8
 8006906:	3001      	adds	r0, #1
 8006908:	d0d5      	beq.n	80068b6 <_printf_common+0x8a>
 800690a:	f109 0901 	add.w	r9, r9, #1
 800690e:	e7f2      	b.n	80068f6 <_printf_common+0xca>
 8006910:	2000      	movs	r0, #0
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08006918 <_printf_i>:
 8006918:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	4617      	mov	r7, r2
 8006920:	7e22      	ldrb	r2, [r4, #24]
 8006922:	2a6e      	cmp	r2, #110	; 0x6e
 8006924:	4698      	mov	r8, r3
 8006926:	4606      	mov	r6, r0
 8006928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800692e:	f000 80a9 	beq.w	8006a84 <_printf_i+0x16c>
 8006932:	d812      	bhi.n	800695a <_printf_i+0x42>
 8006934:	2a63      	cmp	r2, #99	; 0x63
 8006936:	d023      	beq.n	8006980 <_printf_i+0x68>
 8006938:	d80a      	bhi.n	8006950 <_printf_i+0x38>
 800693a:	2a00      	cmp	r2, #0
 800693c:	f000 80b6 	beq.w	8006aac <_printf_i+0x194>
 8006940:	2a58      	cmp	r2, #88	; 0x58
 8006942:	f040 80c5 	bne.w	8006ad0 <_printf_i+0x1b8>
 8006946:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800694a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8006b44 <_printf_i+0x22c>
 800694e:	e051      	b.n	80069f4 <_printf_i+0xdc>
 8006950:	2a64      	cmp	r2, #100	; 0x64
 8006952:	d01e      	beq.n	8006992 <_printf_i+0x7a>
 8006954:	2a69      	cmp	r2, #105	; 0x69
 8006956:	d01c      	beq.n	8006992 <_printf_i+0x7a>
 8006958:	e0ba      	b.n	8006ad0 <_printf_i+0x1b8>
 800695a:	2a73      	cmp	r2, #115	; 0x73
 800695c:	f000 80aa 	beq.w	8006ab4 <_printf_i+0x19c>
 8006960:	d809      	bhi.n	8006976 <_printf_i+0x5e>
 8006962:	2a6f      	cmp	r2, #111	; 0x6f
 8006964:	d02b      	beq.n	80069be <_printf_i+0xa6>
 8006966:	2a70      	cmp	r2, #112	; 0x70
 8006968:	f040 80b2 	bne.w	8006ad0 <_printf_i+0x1b8>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	f042 0220 	orr.w	r2, r2, #32
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	e039      	b.n	80069ea <_printf_i+0xd2>
 8006976:	2a75      	cmp	r2, #117	; 0x75
 8006978:	d021      	beq.n	80069be <_printf_i+0xa6>
 800697a:	2a78      	cmp	r2, #120	; 0x78
 800697c:	d035      	beq.n	80069ea <_printf_i+0xd2>
 800697e:	e0a7      	b.n	8006ad0 <_printf_i+0x1b8>
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	1d11      	adds	r1, r2, #4
 8006984:	6019      	str	r1, [r3, #0]
 8006986:	6813      	ldr	r3, [r2, #0]
 8006988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800698c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006990:	e0a2      	b.n	8006ad8 <_printf_i+0x1c0>
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	f010 0f80 	tst.w	r0, #128	; 0x80
 800699a:	d003      	beq.n	80069a4 <_printf_i+0x8c>
 800699c:	1d10      	adds	r0, r2, #4
 800699e:	6018      	str	r0, [r3, #0]
 80069a0:	6813      	ldr	r3, [r2, #0]
 80069a2:	e005      	b.n	80069b0 <_printf_i+0x98>
 80069a4:	0645      	lsls	r5, r0, #25
 80069a6:	d5f9      	bpl.n	800699c <_printf_i+0x84>
 80069a8:	1d10      	adds	r0, r2, #4
 80069aa:	6018      	str	r0, [r3, #0]
 80069ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	da3b      	bge.n	8006a2c <_printf_i+0x114>
 80069b4:	222d      	movs	r2, #45	; 0x2d
 80069b6:	425b      	negs	r3, r3
 80069b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069bc:	e036      	b.n	8006a2c <_printf_i+0x114>
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80069c6:	d003      	beq.n	80069d0 <_printf_i+0xb8>
 80069c8:	1d10      	adds	r0, r2, #4
 80069ca:	6018      	str	r0, [r3, #0]
 80069cc:	6813      	ldr	r3, [r2, #0]
 80069ce:	e004      	b.n	80069da <_printf_i+0xc2>
 80069d0:	0640      	lsls	r0, r0, #25
 80069d2:	d5f9      	bpl.n	80069c8 <_printf_i+0xb0>
 80069d4:	1d10      	adds	r0, r2, #4
 80069d6:	6018      	str	r0, [r3, #0]
 80069d8:	8813      	ldrh	r3, [r2, #0]
 80069da:	7e22      	ldrb	r2, [r4, #24]
 80069dc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8006b44 <_printf_i+0x22c>
 80069e0:	2a6f      	cmp	r2, #111	; 0x6f
 80069e2:	bf0c      	ite	eq
 80069e4:	2208      	moveq	r2, #8
 80069e6:	220a      	movne	r2, #10
 80069e8:	e01c      	b.n	8006a24 <_printf_i+0x10c>
 80069ea:	2278      	movs	r2, #120	; 0x78
 80069ec:	f8df e158 	ldr.w	lr, [pc, #344]	; 8006b48 <_printf_i+0x230>
 80069f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80069fc:	f100 0504 	add.w	r5, r0, #4
 8006a00:	601d      	str	r5, [r3, #0]
 8006a02:	d001      	beq.n	8006a08 <_printf_i+0xf0>
 8006a04:	6803      	ldr	r3, [r0, #0]
 8006a06:	e002      	b.n	8006a0e <_printf_i+0xf6>
 8006a08:	0655      	lsls	r5, r2, #25
 8006a0a:	d5fb      	bpl.n	8006a04 <_printf_i+0xec>
 8006a0c:	8803      	ldrh	r3, [r0, #0]
 8006a0e:	07d0      	lsls	r0, r2, #31
 8006a10:	bf44      	itt	mi
 8006a12:	f042 0220 	orrmi.w	r2, r2, #32
 8006a16:	6022      	strmi	r2, [r4, #0]
 8006a18:	b91b      	cbnz	r3, 8006a22 <_printf_i+0x10a>
 8006a1a:	6822      	ldr	r2, [r4, #0]
 8006a1c:	f022 0220 	bic.w	r2, r2, #32
 8006a20:	6022      	str	r2, [r4, #0]
 8006a22:	2210      	movs	r2, #16
 8006a24:	2000      	movs	r0, #0
 8006a26:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006a2a:	e002      	b.n	8006a32 <_printf_i+0x11a>
 8006a2c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8006b44 <_printf_i+0x22c>
 8006a30:	220a      	movs	r2, #10
 8006a32:	6865      	ldr	r5, [r4, #4]
 8006a34:	60a5      	str	r5, [r4, #8]
 8006a36:	2d00      	cmp	r5, #0
 8006a38:	bfa2      	ittt	ge
 8006a3a:	6820      	ldrge	r0, [r4, #0]
 8006a3c:	f020 0004 	bicge.w	r0, r0, #4
 8006a40:	6020      	strge	r0, [r4, #0]
 8006a42:	b903      	cbnz	r3, 8006a46 <_printf_i+0x12e>
 8006a44:	b165      	cbz	r5, 8006a60 <_printf_i+0x148>
 8006a46:	460d      	mov	r5, r1
 8006a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a4c:	fb02 3310 	mls	r3, r2, r0, r3
 8006a50:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8006a54:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d1f4      	bne.n	8006a48 <_printf_i+0x130>
 8006a5e:	e000      	b.n	8006a62 <_printf_i+0x14a>
 8006a60:	460d      	mov	r5, r1
 8006a62:	2a08      	cmp	r2, #8
 8006a64:	d10b      	bne.n	8006a7e <_printf_i+0x166>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	07da      	lsls	r2, r3, #31
 8006a6a:	d508      	bpl.n	8006a7e <_printf_i+0x166>
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	6862      	ldr	r2, [r4, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	bfde      	ittt	le
 8006a74:	2330      	movle	r3, #48	; 0x30
 8006a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a7e:	1b49      	subs	r1, r1, r5
 8006a80:	6121      	str	r1, [r4, #16]
 8006a82:	e02e      	b.n	8006ae2 <_printf_i+0x1ca>
 8006a84:	6825      	ldr	r5, [r4, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	6960      	ldr	r0, [r4, #20]
 8006a8a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8006a8e:	d003      	beq.n	8006a98 <_printf_i+0x180>
 8006a90:	1d15      	adds	r5, r2, #4
 8006a92:	601d      	str	r5, [r3, #0]
 8006a94:	6813      	ldr	r3, [r2, #0]
 8006a96:	e008      	b.n	8006aaa <_printf_i+0x192>
 8006a98:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a9c:	f102 0504 	add.w	r5, r2, #4
 8006aa0:	601d      	str	r5, [r3, #0]
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	d001      	beq.n	8006aaa <_printf_i+0x192>
 8006aa6:	8018      	strh	r0, [r3, #0]
 8006aa8:	e000      	b.n	8006aac <_printf_i+0x194>
 8006aaa:	6018      	str	r0, [r3, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	e016      	b.n	8006ae2 <_printf_i+0x1ca>
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	1d11      	adds	r1, r2, #4
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	6815      	ldr	r5, [r2, #0]
 8006abc:	6862      	ldr	r2, [r4, #4]
 8006abe:	4628      	mov	r0, r5
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	f000 ff15 	bl	80078f0 <memchr>
 8006ac6:	b108      	cbz	r0, 8006acc <_printf_i+0x1b4>
 8006ac8:	1b40      	subs	r0, r0, r5
 8006aca:	6060      	str	r0, [r4, #4]
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	e004      	b.n	8006ada <_printf_i+0x1c2>
 8006ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006ad8:	2301      	movs	r3, #1
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	2300      	movs	r3, #0
 8006ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae2:	f8cd 8000 	str.w	r8, [sp]
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4621      	mov	r1, r4
 8006aea:	aa03      	add	r2, sp, #12
 8006aec:	463b      	mov	r3, r7
 8006aee:	f7ff fe9d 	bl	800682c <_printf_common>
 8006af2:	3001      	adds	r0, #1
 8006af4:	d102      	bne.n	8006afc <_printf_i+0x1e4>
 8006af6:	f04f 30ff 	mov.w	r0, #4294967295
 8006afa:	e01f      	b.n	8006b3c <_printf_i+0x224>
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	462a      	mov	r2, r5
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d0f5      	beq.n	8006af6 <_printf_i+0x1de>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	079b      	lsls	r3, r3, #30
 8006b0e:	d405      	bmi.n	8006b1c <_printf_i+0x204>
 8006b10:	68e0      	ldr	r0, [r4, #12]
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	4298      	cmp	r0, r3
 8006b16:	bfb8      	it	lt
 8006b18:	4618      	movlt	r0, r3
 8006b1a:	e00f      	b.n	8006b3c <_printf_i+0x224>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	9a03      	ldr	r2, [sp, #12]
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	429d      	cmp	r5, r3
 8006b26:	daf3      	bge.n	8006b10 <_printf_i+0x1f8>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f104 0219 	add.w	r2, r4, #25
 8006b30:	2301      	movs	r3, #1
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d0de      	beq.n	8006af6 <_printf_i+0x1de>
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7f0      	b.n	8006b1e <_printf_i+0x206>
 8006b3c:	b004      	add	sp, #16
 8006b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b42:	bf00      	nop
 8006b44:	080088dc 	.word	0x080088dc
 8006b48:	080088ed 	.word	0x080088ed

08006b4c <__fpclassifyd>:
 8006b4c:	460a      	mov	r2, r1
 8006b4e:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8006b52:	b510      	push	{r4, lr}
 8006b54:	4603      	mov	r3, r0
 8006b56:	d01b      	beq.n	8006b90 <__fpclassifyd+0x44>
 8006b58:	480f      	ldr	r0, [pc, #60]	; (8006b98 <__fpclassifyd+0x4c>)
 8006b5a:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 8006b5e:	4284      	cmp	r4, r0
 8006b60:	d910      	bls.n	8006b84 <__fpclassifyd+0x38>
 8006b62:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8006b66:	480c      	ldr	r0, [pc, #48]	; (8006b98 <__fpclassifyd+0x4c>)
 8006b68:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8006b6c:	4282      	cmp	r2, r0
 8006b6e:	d909      	bls.n	8006b84 <__fpclassifyd+0x38>
 8006b70:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006b74:	d308      	bcc.n	8006b88 <__fpclassifyd+0x3c>
 8006b76:	4a09      	ldr	r2, [pc, #36]	; (8006b9c <__fpclassifyd+0x50>)
 8006b78:	4291      	cmp	r1, r2
 8006b7a:	d107      	bne.n	8006b8c <__fpclassifyd+0x40>
 8006b7c:	fab3 f083 	clz	r0, r3
 8006b80:	0940      	lsrs	r0, r0, #5
 8006b82:	bd10      	pop	{r4, pc}
 8006b84:	2004      	movs	r0, #4
 8006b86:	bd10      	pop	{r4, pc}
 8006b88:	2003      	movs	r0, #3
 8006b8a:	bd10      	pop	{r4, pc}
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	bd10      	pop	{r4, pc}
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d1e6      	bne.n	8006b62 <__fpclassifyd+0x16>
 8006b94:	2002      	movs	r0, #2
 8006b96:	bd10      	pop	{r4, pc}
 8006b98:	7fdfffff 	.word	0x7fdfffff
 8006b9c:	7ff00000 	.word	0x7ff00000

08006ba0 <sniprintf>:
 8006ba0:	b40c      	push	{r2, r3}
 8006ba2:	b530      	push	{r4, r5, lr}
 8006ba4:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <sniprintf+0x60>)
 8006ba6:	1e0c      	subs	r4, r1, #0
 8006ba8:	b09d      	sub	sp, #116	; 0x74
 8006baa:	681d      	ldr	r5, [r3, #0]
 8006bac:	da04      	bge.n	8006bb8 <sniprintf+0x18>
 8006bae:	238b      	movs	r3, #139	; 0x8b
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb6:	e01e      	b.n	8006bf6 <sniprintf+0x56>
 8006bb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006bbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006bc0:	bf14      	ite	ne
 8006bc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bc6:	4623      	moveq	r3, r4
 8006bc8:	9304      	str	r3, [sp, #16]
 8006bca:	9307      	str	r3, [sp, #28]
 8006bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bd0:	9002      	str	r0, [sp, #8]
 8006bd2:	9006      	str	r0, [sp, #24]
 8006bd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006bd8:	4628      	mov	r0, r5
 8006bda:	ab21      	add	r3, sp, #132	; 0x84
 8006bdc:	a902      	add	r1, sp, #8
 8006bde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	f001 fa75 	bl	80080d0 <_svfiprintf_r>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	bfbc      	itt	lt
 8006bea:	238b      	movlt	r3, #139	; 0x8b
 8006bec:	602b      	strlt	r3, [r5, #0]
 8006bee:	b114      	cbz	r4, 8006bf6 <sniprintf+0x56>
 8006bf0:	9b02      	ldr	r3, [sp, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	b01d      	add	sp, #116	; 0x74
 8006bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bfc:	b002      	add	sp, #8
 8006bfe:	4770      	bx	lr
 8006c00:	20000280 	.word	0x20000280

08006c04 <strcat>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	4602      	mov	r2, r0
 8006c08:	4613      	mov	r3, r2
 8006c0a:	3201      	adds	r2, #1
 8006c0c:	781c      	ldrb	r4, [r3, #0]
 8006c0e:	2c00      	cmp	r4, #0
 8006c10:	d1fa      	bne.n	8006c08 <strcat+0x4>
 8006c12:	3b01      	subs	r3, #1
 8006c14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	d1f9      	bne.n	8006c14 <strcat+0x10>
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <strlen>:
 8006c22:	4603      	mov	r3, r0
 8006c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d1fb      	bne.n	8006c24 <strlen+0x2>
 8006c2c:	1a18      	subs	r0, r3, r0
 8006c2e:	3801      	subs	r0, #1
 8006c30:	4770      	bx	lr

08006c32 <quorem>:
 8006c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c36:	6903      	ldr	r3, [r0, #16]
 8006c38:	690c      	ldr	r4, [r1, #16]
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	f2c0 8081 	blt.w	8006d44 <quorem+0x112>
 8006c42:	3c01      	subs	r4, #1
 8006c44:	f101 0714 	add.w	r7, r1, #20
 8006c48:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006c4c:	f100 0614 	add.w	r6, r0, #20
 8006c50:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006c54:	eb06 030e 	add.w	r3, r6, lr
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	3501      	adds	r5, #1
 8006c5c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8006c60:	fbb3 f5f5 	udiv	r5, r3, r5
 8006c64:	eb07 090e 	add.w	r9, r7, lr
 8006c68:	b3c5      	cbz	r5, 8006cdc <quorem+0xaa>
 8006c6a:	f04f 0a00 	mov.w	sl, #0
 8006c6e:	4638      	mov	r0, r7
 8006c70:	46b4      	mov	ip, r6
 8006c72:	46d3      	mov	fp, sl
 8006c74:	f850 3b04 	ldr.w	r3, [r0], #4
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	fb02 a205 	mla	r2, r2, r5, sl
 8006c80:	436b      	muls	r3, r5
 8006c82:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006c86:	b292      	uxth	r2, r2
 8006c88:	ebc2 020b 	rsb	r2, r2, fp
 8006c8c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c94:	fa12 f28b 	uxtah	r2, r2, fp
 8006c98:	fa1f fb83 	uxth.w	fp, r3
 8006c9c:	f8dc 3000 	ldr.w	r3, [ip]
 8006ca0:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8006ca4:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cae:	4548      	cmp	r0, r9
 8006cb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cb4:	f84c 2b04 	str.w	r2, [ip], #4
 8006cb8:	d9dc      	bls.n	8006c74 <quorem+0x42>
 8006cba:	f856 300e 	ldr.w	r3, [r6, lr]
 8006cbe:	b96b      	cbnz	r3, 8006cdc <quorem+0xaa>
 8006cc0:	9b01      	ldr	r3, [sp, #4]
 8006cc2:	3b04      	subs	r3, #4
 8006cc4:	42b3      	cmp	r3, r6
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	d802      	bhi.n	8006cd0 <quorem+0x9e>
 8006cca:	f8c8 4010 	str.w	r4, [r8, #16]
 8006cce:	e005      	b.n	8006cdc <quorem+0xaa>
 8006cd0:	6812      	ldr	r2, [r2, #0]
 8006cd2:	3b04      	subs	r3, #4
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	d1f8      	bne.n	8006cca <quorem+0x98>
 8006cd8:	3c01      	subs	r4, #1
 8006cda:	e7f3      	b.n	8006cc4 <quorem+0x92>
 8006cdc:	4640      	mov	r0, r8
 8006cde:	f001 f828 	bl	8007d32 <__mcmp>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	db2c      	blt.n	8006d40 <quorem+0x10e>
 8006ce6:	3501      	adds	r5, #1
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f04f 0e00 	mov.w	lr, #0
 8006cee:	f857 1b04 	ldr.w	r1, [r7], #4
 8006cf2:	f8d0 c000 	ldr.w	ip, [r0]
 8006cf6:	b28a      	uxth	r2, r1
 8006cf8:	ebc2 030e 	rsb	r3, r2, lr
 8006cfc:	0c09      	lsrs	r1, r1, #16
 8006cfe:	fa13 f38c 	uxtah	r3, r3, ip
 8006d02:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8006d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d10:	454f      	cmp	r7, r9
 8006d12:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d16:	f840 3b04 	str.w	r3, [r0], #4
 8006d1a:	d9e8      	bls.n	8006cee <quorem+0xbc>
 8006d1c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006d20:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006d24:	b962      	cbnz	r2, 8006d40 <quorem+0x10e>
 8006d26:	3b04      	subs	r3, #4
 8006d28:	42b3      	cmp	r3, r6
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	d802      	bhi.n	8006d34 <quorem+0x102>
 8006d2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006d32:	e005      	b.n	8006d40 <quorem+0x10e>
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	3b04      	subs	r3, #4
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	d1f8      	bne.n	8006d2e <quorem+0xfc>
 8006d3c:	3c01      	subs	r4, #1
 8006d3e:	e7f3      	b.n	8006d28 <quorem+0xf6>
 8006d40:	4628      	mov	r0, r5
 8006d42:	e000      	b.n	8006d46 <quorem+0x114>
 8006d44:	2000      	movs	r0, #0
 8006d46:	b003      	add	sp, #12
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	0000      	movs	r0, r0
	...

08006d50 <_dtoa_r>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d56:	b097      	sub	sp, #92	; 0x5c
 8006d58:	4682      	mov	sl, r0
 8006d5a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8006d5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d60:	b945      	cbnz	r5, 8006d74 <_dtoa_r+0x24>
 8006d62:	2010      	movs	r0, #16
 8006d64:	f000 fdbc 	bl	80078e0 <malloc>
 8006d68:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8006d6c:	6045      	str	r5, [r0, #4]
 8006d6e:	6085      	str	r5, [r0, #8]
 8006d70:	6005      	str	r5, [r0, #0]
 8006d72:	60c5      	str	r5, [r0, #12]
 8006d74:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006d78:	6819      	ldr	r1, [r3, #0]
 8006d7a:	b159      	cbz	r1, 8006d94 <_dtoa_r+0x44>
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	604a      	str	r2, [r1, #4]
 8006d80:	2301      	movs	r3, #1
 8006d82:	4093      	lsls	r3, r2
 8006d84:	608b      	str	r3, [r1, #8]
 8006d86:	4650      	mov	r0, sl
 8006d88:	f000 fdf6 	bl	8007978 <_Bfree>
 8006d8c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	4aa2      	ldr	r2, [pc, #648]	; (8007020 <_dtoa_r+0x2d0>)
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfbf      	itttt	lt
 8006d9c:	2301      	movlt	r3, #1
 8006d9e:	6023      	strlt	r3, [r4, #0]
 8006da0:	9b03      	ldrlt	r3, [sp, #12]
 8006da2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006da6:	bfb8      	it	lt
 8006da8:	9303      	strlt	r3, [sp, #12]
 8006daa:	9f03      	ldr	r7, [sp, #12]
 8006dac:	bfa4      	itt	ge
 8006dae:	2300      	movge	r3, #0
 8006db0:	6023      	strge	r3, [r4, #0]
 8006db2:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8006db6:	0d1b      	lsrs	r3, r3, #20
 8006db8:	051b      	lsls	r3, r3, #20
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d11d      	bne.n	8006dfa <_dtoa_r+0xaa>
 8006dbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006dc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	b943      	cbnz	r3, 8006ddc <_dtoa_r+0x8c>
 8006dca:	4a96      	ldr	r2, [pc, #600]	; (8007024 <_dtoa_r+0x2d4>)
 8006dcc:	4b96      	ldr	r3, [pc, #600]	; (8007028 <_dtoa_r+0x2d8>)
 8006dce:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	bf14      	ite	ne
 8006dd6:	4618      	movne	r0, r3
 8006dd8:	4610      	moveq	r0, r2
 8006dda:	e000      	b.n	8006dde <_dtoa_r+0x8e>
 8006ddc:	4892      	ldr	r0, [pc, #584]	; (8007028 <_dtoa_r+0x2d8>)
 8006dde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8573 	beq.w	80078cc <_dtoa_r+0xb7c>
 8006de6:	78c3      	ldrb	r3, [r0, #3]
 8006de8:	b113      	cbz	r3, 8006df0 <_dtoa_r+0xa0>
 8006dea:	f100 0308 	add.w	r3, r0, #8
 8006dee:	e000      	b.n	8006df2 <_dtoa_r+0xa2>
 8006df0:	1cc3      	adds	r3, r0, #3
 8006df2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	f000 bd69 	b.w	80078cc <_dtoa_r+0xb7c>
 8006dfa:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4620      	mov	r0, r4
 8006e02:	4629      	mov	r1, r5
 8006e04:	2300      	movs	r3, #0
 8006e06:	f7fe feb7 	bl	8005b78 <__aeabi_dcmpeq>
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	b158      	cbz	r0, 8006e26 <_dtoa_r+0xd6>
 8006e0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e10:	2301      	movs	r3, #1
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8546 	beq.w	80078a8 <_dtoa_r+0xb58>
 8006e1c:	4883      	ldr	r0, [pc, #524]	; (800702c <_dtoa_r+0x2dc>)
 8006e1e:	6018      	str	r0, [r3, #0]
 8006e20:	3801      	subs	r0, #1
 8006e22:	f000 bd53 	b.w	80078cc <_dtoa_r+0xb7c>
 8006e26:	ab15      	add	r3, sp, #84	; 0x54
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	ab14      	add	r3, sp, #80	; 0x50
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	4650      	mov	r0, sl
 8006e30:	4622      	mov	r2, r4
 8006e32:	462b      	mov	r3, r5
 8006e34:	f000 fff8 	bl	8007e28 <__d2b>
 8006e38:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e3c:	9007      	str	r0, [sp, #28]
 8006e3e:	b15e      	cbz	r6, 8006e58 <_dtoa_r+0x108>
 8006e40:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e44:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006e4e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8006e52:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e56:	e01d      	b.n	8006e94 <_dtoa_r+0x144>
 8006e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e5a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006e5c:	441e      	add	r6, r3
 8006e5e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8006e62:	429e      	cmp	r6, r3
 8006e64:	bfad      	iteet	ge
 8006e66:	9a02      	ldrge	r2, [sp, #8]
 8006e68:	4b71      	ldrlt	r3, [pc, #452]	; (8007030 <_dtoa_r+0x2e0>)
 8006e6a:	9a02      	ldrlt	r2, [sp, #8]
 8006e6c:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 8006e70:	bfa3      	ittte	ge
 8006e72:	fa22 f003 	lsrge.w	r0, r2, r3
 8006e76:	4b6f      	ldrge	r3, [pc, #444]	; (8007034 <_dtoa_r+0x2e4>)
 8006e78:	1b9b      	subge	r3, r3, r6
 8006e7a:	1b9b      	sublt	r3, r3, r6
 8006e7c:	bfaa      	itet	ge
 8006e7e:	409f      	lslge	r7, r3
 8006e80:	fa02 f003 	lsllt.w	r0, r2, r3
 8006e84:	4338      	orrge	r0, r7
 8006e86:	f7fe fb99 	bl	80055bc <__aeabi_ui2d>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e90:	3e01      	subs	r6, #1
 8006e92:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e94:	2200      	movs	r2, #0
 8006e96:	4b68      	ldr	r3, [pc, #416]	; (8007038 <_dtoa_r+0x2e8>)
 8006e98:	f7fe fa52 	bl	8005340 <__aeabi_dsub>
 8006e9c:	a35a      	add	r3, pc, #360	; (adr r3, 8007008 <_dtoa_r+0x2b8>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7fe fc01 	bl	80056a8 <__aeabi_dmul>
 8006ea6:	a35a      	add	r3, pc, #360	; (adr r3, 8007010 <_dtoa_r+0x2c0>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7fe fa4a 	bl	8005344 <__adddf3>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	f7fe fb91 	bl	80055dc <__aeabi_i2d>
 8006eba:	a357      	add	r3, pc, #348	; (adr r3, 8007018 <_dtoa_r+0x2c8>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7fe fbf2 	bl	80056a8 <__aeabi_dmul>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f7fe fa3a 	bl	8005344 <__adddf3>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	f7fe fe82 	bl	8005bdc <__aeabi_d2iz>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4683      	mov	fp, r0
 8006edc:	2200      	movs	r2, #0
 8006ede:	4620      	mov	r0, r4
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f7fe fe53 	bl	8005b8c <__aeabi_dcmplt>
 8006ee6:	b158      	cbz	r0, 8006f00 <_dtoa_r+0x1b0>
 8006ee8:	4658      	mov	r0, fp
 8006eea:	f7fe fb77 	bl	80055dc <__aeabi_i2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7fe fe3f 	bl	8005b78 <__aeabi_dcmpeq>
 8006efa:	b908      	cbnz	r0, 8006f00 <_dtoa_r+0x1b0>
 8006efc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f00:	f1bb 0f16 	cmp.w	fp, #22
 8006f04:	d80d      	bhi.n	8006f22 <_dtoa_r+0x1d2>
 8006f06:	4b4d      	ldr	r3, [pc, #308]	; (800703c <_dtoa_r+0x2ec>)
 8006f08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f14:	f7fe fe58 	bl	8005bc8 <__aeabi_dcmpgt>
 8006f18:	b130      	cbz	r0, 8006f28 <_dtoa_r+0x1d8>
 8006f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <_dtoa_r+0x1d4>
 8006f22:	2301      	movs	r3, #1
 8006f24:	9312      	str	r3, [sp, #72]	; 0x48
 8006f26:	e000      	b.n	8006f2a <_dtoa_r+0x1da>
 8006f28:	9012      	str	r0, [sp, #72]	; 0x48
 8006f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f2c:	1b9e      	subs	r6, r3, r6
 8006f2e:	1e73      	subs	r3, r6, #1
 8006f30:	930a      	str	r3, [sp, #40]	; 0x28
 8006f32:	bf45      	ittet	mi
 8006f34:	425b      	negmi	r3, r3
 8006f36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f38:	2300      	movpl	r3, #0
 8006f3a:	2300      	movmi	r3, #0
 8006f3c:	bf4c      	ite	mi
 8006f3e:	930a      	strmi	r3, [sp, #40]	; 0x28
 8006f40:	9309      	strpl	r3, [sp, #36]	; 0x24
 8006f42:	f1bb 0f00 	cmp.w	fp, #0
 8006f46:	db07      	blt.n	8006f58 <_dtoa_r+0x208>
 8006f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006f4e:	445b      	add	r3, fp
 8006f50:	930a      	str	r3, [sp, #40]	; 0x28
 8006f52:	2300      	movs	r3, #0
 8006f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f56:	e008      	b.n	8006f6a <_dtoa_r+0x21a>
 8006f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5a:	ebcb 0303 	rsb	r3, fp, r3
 8006f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f60:	f1cb 0300 	rsb	r3, fp, #0
 8006f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f66:	2300      	movs	r3, #0
 8006f68:	930d      	str	r3, [sp, #52]	; 0x34
 8006f6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	d828      	bhi.n	8006fc2 <_dtoa_r+0x272>
 8006f70:	2b05      	cmp	r3, #5
 8006f72:	bfc4      	itt	gt
 8006f74:	3b04      	subgt	r3, #4
 8006f76:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006f78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f7a:	f1a3 0302 	sub.w	r3, r3, #2
 8006f7e:	bfcc      	ite	gt
 8006f80:	2500      	movgt	r5, #0
 8006f82:	2501      	movle	r5, #1
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d821      	bhi.n	8006fcc <_dtoa_r+0x27c>
 8006f88:	e8df f003 	tbb	[pc, r3]
 8006f8c:	10040e02 	.word	0x10040e02
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <_dtoa_r+0x246>
 8006f94:	2301      	movs	r3, #1
 8006f96:	930c      	str	r3, [sp, #48]	; 0x30
 8006f98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	dc20      	bgt.n	8006fe0 <_dtoa_r+0x290>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	9306      	str	r3, [sp, #24]
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	e019      	b.n	8006fdc <_dtoa_r+0x28c>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <_dtoa_r+0x25e>
 8006fac:	2301      	movs	r3, #1
 8006fae:	930c      	str	r3, [sp, #48]	; 0x30
 8006fb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fb2:	445b      	add	r3, fp
 8006fb4:	9306      	str	r3, [sp, #24]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	bfb8      	it	lt
 8006fbe:	2301      	movlt	r3, #1
 8006fc0:	e011      	b.n	8006fe6 <_dtoa_r+0x296>
 8006fc2:	2501      	movs	r5, #1
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9320      	str	r3, [sp, #128]	; 0x80
 8006fc8:	950c      	str	r5, [sp, #48]	; 0x30
 8006fca:	e001      	b.n	8006fd0 <_dtoa_r+0x280>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	930c      	str	r3, [sp, #48]	; 0x30
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	9306      	str	r3, [sp, #24]
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2312      	movs	r3, #18
 8006fdc:	9221      	str	r2, [sp, #132]	; 0x84
 8006fde:	e002      	b.n	8006fe6 <_dtoa_r+0x296>
 8006fe0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe2:	9306      	str	r3, [sp, #24]
 8006fe4:	9305      	str	r3, [sp, #20]
 8006fe6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8006fea:	2200      	movs	r2, #0
 8006fec:	6062      	str	r2, [r4, #4]
 8006fee:	2104      	movs	r1, #4
 8006ff0:	f101 0214 	add.w	r2, r1, #20
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d823      	bhi.n	8007040 <_dtoa_r+0x2f0>
 8006ff8:	6862      	ldr	r2, [r4, #4]
 8006ffa:	3201      	adds	r2, #1
 8006ffc:	6062      	str	r2, [r4, #4]
 8006ffe:	0049      	lsls	r1, r1, #1
 8007000:	e7f6      	b.n	8006ff0 <_dtoa_r+0x2a0>
 8007002:	bf00      	nop
 8007004:	f3af 8000 	nop.w
 8007008:	636f4361 	.word	0x636f4361
 800700c:	3fd287a7 	.word	0x3fd287a7
 8007010:	8b60c8b3 	.word	0x8b60c8b3
 8007014:	3fc68a28 	.word	0x3fc68a28
 8007018:	509f79fb 	.word	0x509f79fb
 800701c:	3fd34413 	.word	0x3fd34413
 8007020:	7ff00000 	.word	0x7ff00000
 8007024:	080088fe 	.word	0x080088fe
 8007028:	08008907 	.word	0x08008907
 800702c:	080088db 	.word	0x080088db
 8007030:	fffffbee 	.word	0xfffffbee
 8007034:	fffffc0e 	.word	0xfffffc0e
 8007038:	3ff80000 	.word	0x3ff80000
 800703c:	08008918 	.word	0x08008918
 8007040:	4650      	mov	r0, sl
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	f000 fc63 	bl	800790e <_Balloc>
 8007048:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800704c:	6020      	str	r0, [r4, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	9308      	str	r3, [sp, #32]
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	2b0e      	cmp	r3, #14
 8007056:	f200 814b 	bhi.w	80072f0 <_dtoa_r+0x5a0>
 800705a:	2d00      	cmp	r5, #0
 800705c:	f000 8148 	beq.w	80072f0 <_dtoa_r+0x5a0>
 8007060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800706c:	dd31      	ble.n	80070d2 <_dtoa_r+0x382>
 800706e:	4ab3      	ldr	r2, [pc, #716]	; (800733c <_dtoa_r+0x5ec>)
 8007070:	f00b 030f 	and.w	r3, fp, #15
 8007074:	ea4f 172b 	mov.w	r7, fp, asr #4
 8007078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800707c:	06f8      	lsls	r0, r7, #27
 800707e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007082:	d50c      	bpl.n	800709e <_dtoa_r+0x34e>
 8007084:	4bae      	ldr	r3, [pc, #696]	; (8007340 <_dtoa_r+0x5f0>)
 8007086:	ec51 0b17 	vmov	r0, r1, d7
 800708a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800708e:	f7fe fc35 	bl	80058fc <__aeabi_ddiv>
 8007092:	f007 070f 	and.w	r7, r7, #15
 8007096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800709a:	2603      	movs	r6, #3
 800709c:	e000      	b.n	80070a0 <_dtoa_r+0x350>
 800709e:	2602      	movs	r6, #2
 80070a0:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8007340 <_dtoa_r+0x5f0>
 80070a4:	b177      	cbz	r7, 80070c4 <_dtoa_r+0x374>
 80070a6:	07f9      	lsls	r1, r7, #31
 80070a8:	d508      	bpl.n	80070bc <_dtoa_r+0x36c>
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	e9d8 2300 	ldrd	r2, r3, [r8]
 80070b2:	f7fe faf9 	bl	80056a8 <__aeabi_dmul>
 80070b6:	3601      	adds	r6, #1
 80070b8:	4604      	mov	r4, r0
 80070ba:	460d      	mov	r5, r1
 80070bc:	107f      	asrs	r7, r7, #1
 80070be:	f108 0808 	add.w	r8, r8, #8
 80070c2:	e7ef      	b.n	80070a4 <_dtoa_r+0x354>
 80070c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c8:	4622      	mov	r2, r4
 80070ca:	462b      	mov	r3, r5
 80070cc:	f7fe fc16 	bl	80058fc <__aeabi_ddiv>
 80070d0:	e01b      	b.n	800710a <_dtoa_r+0x3ba>
 80070d2:	f1cb 0400 	rsb	r4, fp, #0
 80070d6:	b1dc      	cbz	r4, 8007110 <_dtoa_r+0x3c0>
 80070d8:	4b98      	ldr	r3, [pc, #608]	; (800733c <_dtoa_r+0x5ec>)
 80070da:	4d99      	ldr	r5, [pc, #612]	; (8007340 <_dtoa_r+0x5f0>)
 80070dc:	f004 020f 	and.w	r2, r4, #15
 80070e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f7fe fadc 	bl	80056a8 <__aeabi_dmul>
 80070f0:	1124      	asrs	r4, r4, #4
 80070f2:	2602      	movs	r6, #2
 80070f4:	b14c      	cbz	r4, 800710a <_dtoa_r+0x3ba>
 80070f6:	07e2      	lsls	r2, r4, #31
 80070f8:	d504      	bpl.n	8007104 <_dtoa_r+0x3b4>
 80070fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070fe:	3601      	adds	r6, #1
 8007100:	f7fe fad2 	bl	80056a8 <__aeabi_dmul>
 8007104:	1064      	asrs	r4, r4, #1
 8007106:	3508      	adds	r5, #8
 8007108:	e7f4      	b.n	80070f4 <_dtoa_r+0x3a4>
 800710a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800710e:	e000      	b.n	8007112 <_dtoa_r+0x3c2>
 8007110:	2602      	movs	r6, #2
 8007112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007114:	b1db      	cbz	r3, 800714e <_dtoa_r+0x3fe>
 8007116:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	4620      	mov	r0, r4
 800711e:	4629      	mov	r1, r5
 8007120:	4b88      	ldr	r3, [pc, #544]	; (8007344 <_dtoa_r+0x5f4>)
 8007122:	f7fe fd33 	bl	8005b8c <__aeabi_dcmplt>
 8007126:	b190      	cbz	r0, 800714e <_dtoa_r+0x3fe>
 8007128:	9b05      	ldr	r3, [sp, #20]
 800712a:	b183      	cbz	r3, 800714e <_dtoa_r+0x3fe>
 800712c:	9b06      	ldr	r3, [sp, #24]
 800712e:	2b00      	cmp	r3, #0
 8007130:	f340 80da 	ble.w	80072e8 <_dtoa_r+0x598>
 8007134:	4629      	mov	r1, r5
 8007136:	4620      	mov	r0, r4
 8007138:	2200      	movs	r2, #0
 800713a:	4b83      	ldr	r3, [pc, #524]	; (8007348 <_dtoa_r+0x5f8>)
 800713c:	f7fe fab4 	bl	80056a8 <__aeabi_dmul>
 8007140:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007148:	3601      	adds	r6, #1
 800714a:	9d06      	ldr	r5, [sp, #24]
 800714c:	e001      	b.n	8007152 <_dtoa_r+0x402>
 800714e:	9d05      	ldr	r5, [sp, #20]
 8007150:	465f      	mov	r7, fp
 8007152:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007156:	4630      	mov	r0, r6
 8007158:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800715c:	f7fe fa3e 	bl	80055dc <__aeabi_i2d>
 8007160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007164:	f7fe faa0 	bl	80056a8 <__aeabi_dmul>
 8007168:	2200      	movs	r2, #0
 800716a:	4b78      	ldr	r3, [pc, #480]	; (800734c <_dtoa_r+0x5fc>)
 800716c:	f7fe f8ea 	bl	8005344 <__adddf3>
 8007170:	4680      	mov	r8, r0
 8007172:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8007176:	b9cd      	cbnz	r5, 80071ac <_dtoa_r+0x45c>
 8007178:	2200      	movs	r2, #0
 800717a:	4b75      	ldr	r3, [pc, #468]	; (8007350 <_dtoa_r+0x600>)
 800717c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007180:	f7fe f8de 	bl	8005340 <__aeabi_dsub>
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800718c:	f7fe fd1c 	bl	8005bc8 <__aeabi_dcmpgt>
 8007190:	2800      	cmp	r0, #0
 8007192:	f040 8246 	bne.w	8007622 <_dtoa_r+0x8d2>
 8007196:	4642      	mov	r2, r8
 8007198:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800719c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a0:	f7fe fcf4 	bl	8005b8c <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 8236 	bne.w	8007616 <_dtoa_r+0x8c6>
 80071aa:	e09d      	b.n	80072e8 <_dtoa_r+0x598>
 80071ac:	4b63      	ldr	r3, [pc, #396]	; (800733c <_dtoa_r+0x5ec>)
 80071ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071b0:	1e6a      	subs	r2, r5, #1
 80071b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b6:	2900      	cmp	r1, #0
 80071b8:	d049      	beq.n	800724e <_dtoa_r+0x4fe>
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	2000      	movs	r0, #0
 80071c0:	4964      	ldr	r1, [pc, #400]	; (8007354 <_dtoa_r+0x604>)
 80071c2:	f7fe fb9b 	bl	80058fc <__aeabi_ddiv>
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	f7fe f8b9 	bl	8005340 <__aeabi_dsub>
 80071ce:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80071d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d6:	9c08      	ldr	r4, [sp, #32]
 80071d8:	4649      	mov	r1, r9
 80071da:	4640      	mov	r0, r8
 80071dc:	f7fe fcfe 	bl	8005bdc <__aeabi_d2iz>
 80071e0:	4606      	mov	r6, r0
 80071e2:	f7fe f9fb 	bl	80055dc <__aeabi_i2d>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4640      	mov	r0, r8
 80071ec:	4649      	mov	r1, r9
 80071ee:	f7fe f8a7 	bl	8005340 <__aeabi_dsub>
 80071f2:	3630      	adds	r6, #48	; 0x30
 80071f4:	f804 6b01 	strb.w	r6, [r4], #1
 80071f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071fc:	4680      	mov	r8, r0
 80071fe:	4689      	mov	r9, r1
 8007200:	f7fe fcc4 	bl	8005b8c <__aeabi_dcmplt>
 8007204:	2800      	cmp	r0, #0
 8007206:	f040 8340 	bne.w	800788a <_dtoa_r+0xb3a>
 800720a:	4642      	mov	r2, r8
 800720c:	464b      	mov	r3, r9
 800720e:	2000      	movs	r0, #0
 8007210:	494c      	ldr	r1, [pc, #304]	; (8007344 <_dtoa_r+0x5f4>)
 8007212:	f7fe f895 	bl	8005340 <__aeabi_dsub>
 8007216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800721a:	f7fe fcb7 	bl	8005b8c <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	f040 80d3 	bne.w	80073ca <_dtoa_r+0x67a>
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	1ae3      	subs	r3, r4, r3
 8007228:	42ab      	cmp	r3, r5
 800722a:	da5d      	bge.n	80072e8 <_dtoa_r+0x598>
 800722c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	4b45      	ldr	r3, [pc, #276]	; (8007348 <_dtoa_r+0x5f8>)
 8007234:	f7fe fa38 	bl	80056a8 <__aeabi_dmul>
 8007238:	2200      	movs	r2, #0
 800723a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800723e:	4b42      	ldr	r3, [pc, #264]	; (8007348 <_dtoa_r+0x5f8>)
 8007240:	4640      	mov	r0, r8
 8007242:	4649      	mov	r1, r9
 8007244:	f7fe fa30 	bl	80056a8 <__aeabi_dmul>
 8007248:	4680      	mov	r8, r0
 800724a:	4689      	mov	r9, r1
 800724c:	e7c4      	b.n	80071d8 <_dtoa_r+0x488>
 800724e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007252:	4642      	mov	r2, r8
 8007254:	464b      	mov	r3, r9
 8007256:	f7fe fa27 	bl	80056a8 <__aeabi_dmul>
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007260:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007264:	195c      	adds	r4, r3, r5
 8007266:	461d      	mov	r5, r3
 8007268:	4649      	mov	r1, r9
 800726a:	4640      	mov	r0, r8
 800726c:	f7fe fcb6 	bl	8005bdc <__aeabi_d2iz>
 8007270:	4606      	mov	r6, r0
 8007272:	f7fe f9b3 	bl	80055dc <__aeabi_i2d>
 8007276:	3630      	adds	r6, #48	; 0x30
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4640      	mov	r0, r8
 800727e:	4649      	mov	r1, r9
 8007280:	f7fe f85e 	bl	8005340 <__aeabi_dsub>
 8007284:	f805 6b01 	strb.w	r6, [r5], #1
 8007288:	42a5      	cmp	r5, r4
 800728a:	4680      	mov	r8, r0
 800728c:	4689      	mov	r9, r1
 800728e:	d124      	bne.n	80072da <_dtoa_r+0x58a>
 8007290:	2200      	movs	r2, #0
 8007292:	4b30      	ldr	r3, [pc, #192]	; (8007354 <_dtoa_r+0x604>)
 8007294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007298:	f7fe f854 	bl	8005344 <__adddf3>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7fe fc90 	bl	8005bc8 <__aeabi_dcmpgt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f040 808e 	bne.w	80073ca <_dtoa_r+0x67a>
 80072ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072b2:	2000      	movs	r0, #0
 80072b4:	4927      	ldr	r1, [pc, #156]	; (8007354 <_dtoa_r+0x604>)
 80072b6:	f7fe f843 	bl	8005340 <__aeabi_dsub>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f7fe fc63 	bl	8005b8c <__aeabi_dcmplt>
 80072c6:	b178      	cbz	r0, 80072e8 <_dtoa_r+0x598>
 80072c8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80072cc:	2b30      	cmp	r3, #48	; 0x30
 80072ce:	f104 32ff 	add.w	r2, r4, #4294967295
 80072d2:	f040 82da 	bne.w	800788a <_dtoa_r+0xb3a>
 80072d6:	4614      	mov	r4, r2
 80072d8:	e7f6      	b.n	80072c8 <_dtoa_r+0x578>
 80072da:	2200      	movs	r2, #0
 80072dc:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <_dtoa_r+0x5f8>)
 80072de:	f7fe f9e3 	bl	80056a8 <__aeabi_dmul>
 80072e2:	4680      	mov	r8, r0
 80072e4:	4689      	mov	r9, r1
 80072e6:	e7bf      	b.n	8007268 <_dtoa_r+0x518>
 80072e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f2c0 808b 	blt.w	800740e <_dtoa_r+0x6be>
 80072f8:	f1bb 0f0e 	cmp.w	fp, #14
 80072fc:	f300 8087 	bgt.w	800740e <_dtoa_r+0x6be>
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <_dtoa_r+0x5ec>)
 8007302:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007306:	e9d3 6700 	ldrd	r6, r7, [r3]
 800730a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800730c:	2b00      	cmp	r3, #0
 800730e:	da23      	bge.n	8007358 <_dtoa_r+0x608>
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	dc20      	bgt.n	8007358 <_dtoa_r+0x608>
 8007316:	f040 817d 	bne.w	8007614 <_dtoa_r+0x8c4>
 800731a:	4630      	mov	r0, r6
 800731c:	2200      	movs	r2, #0
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <_dtoa_r+0x600>)
 8007320:	4639      	mov	r1, r7
 8007322:	f7fe f9c1 	bl	80056a8 <__aeabi_dmul>
 8007326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800732a:	f7fe fc43 	bl	8005bb4 <__aeabi_dcmpge>
 800732e:	9d05      	ldr	r5, [sp, #20]
 8007330:	462e      	mov	r6, r5
 8007332:	2800      	cmp	r0, #0
 8007334:	f040 8170 	bne.w	8007618 <_dtoa_r+0x8c8>
 8007338:	e175      	b.n	8007626 <_dtoa_r+0x8d6>
 800733a:	bf00      	nop
 800733c:	08008918 	.word	0x08008918
 8007340:	080089e0 	.word	0x080089e0
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	40240000 	.word	0x40240000
 800734c:	401c0000 	.word	0x401c0000
 8007350:	40140000 	.word	0x40140000
 8007354:	3fe00000 	.word	0x3fe00000
 8007358:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800735c:	9c08      	ldr	r4, [sp, #32]
 800735e:	4632      	mov	r2, r6
 8007360:	463b      	mov	r3, r7
 8007362:	4640      	mov	r0, r8
 8007364:	4649      	mov	r1, r9
 8007366:	f7fe fac9 	bl	80058fc <__aeabi_ddiv>
 800736a:	f7fe fc37 	bl	8005bdc <__aeabi_d2iz>
 800736e:	4605      	mov	r5, r0
 8007370:	f7fe f934 	bl	80055dc <__aeabi_i2d>
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	f7fe f996 	bl	80056a8 <__aeabi_dmul>
 800737c:	460b      	mov	r3, r1
 800737e:	4602      	mov	r2, r0
 8007380:	4649      	mov	r1, r9
 8007382:	4640      	mov	r0, r8
 8007384:	f7fd ffdc 	bl	8005340 <__aeabi_dsub>
 8007388:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	f804 eb01 	strb.w	lr, [r4], #1
 8007392:	ebc3 0e04 	rsb	lr, r3, r4
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	459e      	cmp	lr, r3
 800739a:	d12b      	bne.n	80073f4 <_dtoa_r+0x6a4>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	f7fd ffd0 	bl	8005344 <__adddf3>
 80073a4:	4632      	mov	r2, r6
 80073a6:	463b      	mov	r3, r7
 80073a8:	4680      	mov	r8, r0
 80073aa:	4689      	mov	r9, r1
 80073ac:	f7fe fc0c 	bl	8005bc8 <__aeabi_dcmpgt>
 80073b0:	b970      	cbnz	r0, 80073d0 <_dtoa_r+0x680>
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	4632      	mov	r2, r6
 80073b8:	463b      	mov	r3, r7
 80073ba:	f7fe fbdd 	bl	8005b78 <__aeabi_dcmpeq>
 80073be:	2800      	cmp	r0, #0
 80073c0:	f000 8264 	beq.w	800788c <_dtoa_r+0xb3c>
 80073c4:	07eb      	lsls	r3, r5, #31
 80073c6:	d403      	bmi.n	80073d0 <_dtoa_r+0x680>
 80073c8:	e260      	b.n	800788c <_dtoa_r+0xb3c>
 80073ca:	46bb      	mov	fp, r7
 80073cc:	e000      	b.n	80073d0 <_dtoa_r+0x680>
 80073ce:	461c      	mov	r4, r3
 80073d0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80073d4:	2a39      	cmp	r2, #57	; 0x39
 80073d6:	f104 33ff 	add.w	r3, r4, #4294967295
 80073da:	d107      	bne.n	80073ec <_dtoa_r+0x69c>
 80073dc:	9a08      	ldr	r2, [sp, #32]
 80073de:	4293      	cmp	r3, r2
 80073e0:	d1f5      	bne.n	80073ce <_dtoa_r+0x67e>
 80073e2:	2330      	movs	r3, #48	; 0x30
 80073e4:	7013      	strb	r3, [r2, #0]
 80073e6:	f10b 0b01 	add.w	fp, fp, #1
 80073ea:	4613      	mov	r3, r2
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	3201      	adds	r2, #1
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	e24b      	b.n	800788c <_dtoa_r+0xb3c>
 80073f4:	2200      	movs	r2, #0
 80073f6:	4ba4      	ldr	r3, [pc, #656]	; (8007688 <_dtoa_r+0x938>)
 80073f8:	f7fe f956 	bl	80056a8 <__aeabi_dmul>
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	4680      	mov	r8, r0
 8007402:	4689      	mov	r9, r1
 8007404:	f7fe fbb8 	bl	8005b78 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d0a8      	beq.n	800735e <_dtoa_r+0x60e>
 800740c:	e23e      	b.n	800788c <_dtoa_r+0xb3c>
 800740e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007410:	2a00      	cmp	r2, #0
 8007412:	d032      	beq.n	800747a <_dtoa_r+0x72a>
 8007414:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007416:	2a01      	cmp	r2, #1
 8007418:	dc0a      	bgt.n	8007430 <_dtoa_r+0x6e0>
 800741a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800741c:	b112      	cbz	r2, 8007424 <_dtoa_r+0x6d4>
 800741e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007422:	e002      	b.n	800742a <_dtoa_r+0x6da>
 8007424:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800742a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800742c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800742e:	e018      	b.n	8007462 <_dtoa_r+0x712>
 8007430:	9b05      	ldr	r3, [sp, #20]
 8007432:	1e5d      	subs	r5, r3, #1
 8007434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007436:	42ab      	cmp	r3, r5
 8007438:	bfbf      	itttt	lt
 800743a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800743c:	950b      	strlt	r5, [sp, #44]	; 0x2c
 800743e:	1aea      	sublt	r2, r5, r3
 8007440:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007442:	bfb6      	itet	lt
 8007444:	189b      	addlt	r3, r3, r2
 8007446:	1b5d      	subge	r5, r3, r5
 8007448:	930d      	strlt	r3, [sp, #52]	; 0x34
 800744a:	9b05      	ldr	r3, [sp, #20]
 800744c:	bfb8      	it	lt
 800744e:	2500      	movlt	r5, #0
 8007450:	2b00      	cmp	r3, #0
 8007452:	bfb9      	ittee	lt
 8007454:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8007456:	9a05      	ldrlt	r2, [sp, #20]
 8007458:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800745a:	9b05      	ldrge	r3, [sp, #20]
 800745c:	bfbc      	itt	lt
 800745e:	1a9c      	sublt	r4, r3, r2
 8007460:	2300      	movlt	r3, #0
 8007462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007464:	441a      	add	r2, r3
 8007466:	9209      	str	r2, [sp, #36]	; 0x24
 8007468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800746a:	4650      	mov	r0, sl
 800746c:	441a      	add	r2, r3
 800746e:	2101      	movs	r1, #1
 8007470:	920a      	str	r2, [sp, #40]	; 0x28
 8007472:	f000 fb23 	bl	8007abc <__i2b>
 8007476:	4606      	mov	r6, r0
 8007478:	e002      	b.n	8007480 <_dtoa_r+0x730>
 800747a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800747c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800747e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007480:	b164      	cbz	r4, 800749c <_dtoa_r+0x74c>
 8007482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd09      	ble.n	800749c <_dtoa_r+0x74c>
 8007488:	42a3      	cmp	r3, r4
 800748a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800748c:	bfa8      	it	ge
 800748e:	4623      	movge	r3, r4
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	9209      	str	r2, [sp, #36]	; 0x24
 8007494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007496:	1ae4      	subs	r4, r4, r3
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	930a      	str	r3, [sp, #40]	; 0x28
 800749c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd20      	ble.n	80074e4 <_dtoa_r+0x794>
 80074a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074a4:	b1c3      	cbz	r3, 80074d8 <_dtoa_r+0x788>
 80074a6:	2d00      	cmp	r5, #0
 80074a8:	dd10      	ble.n	80074cc <_dtoa_r+0x77c>
 80074aa:	4631      	mov	r1, r6
 80074ac:	462a      	mov	r2, r5
 80074ae:	4650      	mov	r0, sl
 80074b0:	f000 fb9e 	bl	8007bf0 <__pow5mult>
 80074b4:	4606      	mov	r6, r0
 80074b6:	4631      	mov	r1, r6
 80074b8:	9a07      	ldr	r2, [sp, #28]
 80074ba:	4650      	mov	r0, sl
 80074bc:	f000 fb07 	bl	8007ace <__multiply>
 80074c0:	9907      	ldr	r1, [sp, #28]
 80074c2:	4607      	mov	r7, r0
 80074c4:	4650      	mov	r0, sl
 80074c6:	f000 fa57 	bl	8007978 <_Bfree>
 80074ca:	9707      	str	r7, [sp, #28]
 80074cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ce:	1b5a      	subs	r2, r3, r5
 80074d0:	d008      	beq.n	80074e4 <_dtoa_r+0x794>
 80074d2:	4650      	mov	r0, sl
 80074d4:	9907      	ldr	r1, [sp, #28]
 80074d6:	e002      	b.n	80074de <_dtoa_r+0x78e>
 80074d8:	9907      	ldr	r1, [sp, #28]
 80074da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074dc:	4650      	mov	r0, sl
 80074de:	f000 fb87 	bl	8007bf0 <__pow5mult>
 80074e2:	9007      	str	r0, [sp, #28]
 80074e4:	4650      	mov	r0, sl
 80074e6:	2101      	movs	r1, #1
 80074e8:	f000 fae8 	bl	8007abc <__i2b>
 80074ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	4605      	mov	r5, r0
 80074f2:	dd0a      	ble.n	800750a <_dtoa_r+0x7ba>
 80074f4:	4629      	mov	r1, r5
 80074f6:	461a      	mov	r2, r3
 80074f8:	4650      	mov	r0, sl
 80074fa:	f000 fb79 	bl	8007bf0 <__pow5mult>
 80074fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007500:	2b01      	cmp	r3, #1
 8007502:	4605      	mov	r5, r0
 8007504:	dd04      	ble.n	8007510 <_dtoa_r+0x7c0>
 8007506:	2700      	movs	r7, #0
 8007508:	e01b      	b.n	8007542 <_dtoa_r+0x7f2>
 800750a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800750c:	2b01      	cmp	r3, #1
 800750e:	dc13      	bgt.n	8007538 <_dtoa_r+0x7e8>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	b98b      	cbnz	r3, 8007538 <_dtoa_r+0x7e8>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800751a:	b97b      	cbnz	r3, 800753c <_dtoa_r+0x7ec>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007522:	0d3f      	lsrs	r7, r7, #20
 8007524:	053f      	lsls	r7, r7, #20
 8007526:	b157      	cbz	r7, 800753e <_dtoa_r+0x7ee>
 8007528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752a:	3301      	adds	r3, #1
 800752c:	9309      	str	r3, [sp, #36]	; 0x24
 800752e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007530:	3301      	adds	r3, #1
 8007532:	930a      	str	r3, [sp, #40]	; 0x28
 8007534:	2701      	movs	r7, #1
 8007536:	e002      	b.n	800753e <_dtoa_r+0x7ee>
 8007538:	2700      	movs	r7, #0
 800753a:	e000      	b.n	800753e <_dtoa_r+0x7ee>
 800753c:	9f02      	ldr	r7, [sp, #8]
 800753e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007540:	b143      	cbz	r3, 8007554 <_dtoa_r+0x804>
 8007542:	692b      	ldr	r3, [r5, #16]
 8007544:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007548:	6918      	ldr	r0, [r3, #16]
 800754a:	f000 fa6a 	bl	8007a22 <__hi0bits>
 800754e:	f1c0 0020 	rsb	r0, r0, #32
 8007552:	e000      	b.n	8007556 <_dtoa_r+0x806>
 8007554:	2001      	movs	r0, #1
 8007556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007558:	4418      	add	r0, r3
 800755a:	f010 001f 	ands.w	r0, r0, #31
 800755e:	d008      	beq.n	8007572 <_dtoa_r+0x822>
 8007560:	f1c0 0320 	rsb	r3, r0, #32
 8007564:	2b04      	cmp	r3, #4
 8007566:	dd02      	ble.n	800756e <_dtoa_r+0x81e>
 8007568:	f1c0 001c 	rsb	r0, r0, #28
 800756c:	e002      	b.n	8007574 <_dtoa_r+0x824>
 800756e:	d008      	beq.n	8007582 <_dtoa_r+0x832>
 8007570:	4618      	mov	r0, r3
 8007572:	301c      	adds	r0, #28
 8007574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007576:	4403      	add	r3, r0
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757c:	4403      	add	r3, r0
 800757e:	4404      	add	r4, r0
 8007580:	930a      	str	r3, [sp, #40]	; 0x28
 8007582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd05      	ble.n	8007594 <_dtoa_r+0x844>
 8007588:	4650      	mov	r0, sl
 800758a:	9907      	ldr	r1, [sp, #28]
 800758c:	461a      	mov	r2, r3
 800758e:	f000 fb7d 	bl	8007c8c <__lshift>
 8007592:	9007      	str	r0, [sp, #28]
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd05      	ble.n	80075a6 <_dtoa_r+0x856>
 800759a:	4629      	mov	r1, r5
 800759c:	4650      	mov	r0, sl
 800759e:	461a      	mov	r2, r3
 80075a0:	f000 fb74 	bl	8007c8c <__lshift>
 80075a4:	4605      	mov	r5, r0
 80075a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075a8:	b1eb      	cbz	r3, 80075e6 <_dtoa_r+0x896>
 80075aa:	9807      	ldr	r0, [sp, #28]
 80075ac:	4629      	mov	r1, r5
 80075ae:	f000 fbc0 	bl	8007d32 <__mcmp>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	da17      	bge.n	80075e6 <_dtoa_r+0x896>
 80075b6:	2300      	movs	r3, #0
 80075b8:	4650      	mov	r0, sl
 80075ba:	9907      	ldr	r1, [sp, #28]
 80075bc:	220a      	movs	r2, #10
 80075be:	f000 f9f2 	bl	80079a6 <__multadd>
 80075c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075c4:	9007      	str	r0, [sp, #28]
 80075c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 8170 	beq.w	80078b0 <_dtoa_r+0xb60>
 80075d0:	4631      	mov	r1, r6
 80075d2:	2300      	movs	r3, #0
 80075d4:	4650      	mov	r0, sl
 80075d6:	220a      	movs	r2, #10
 80075d8:	f000 f9e5 	bl	80079a6 <__multadd>
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	4606      	mov	r6, r0
 80075e2:	dc33      	bgt.n	800764c <_dtoa_r+0x8fc>
 80075e4:	e16d      	b.n	80078c2 <_dtoa_r+0xb72>
 80075e6:	9b05      	ldr	r3, [sp, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dc26      	bgt.n	800763a <_dtoa_r+0x8ea>
 80075ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	dd23      	ble.n	800763a <_dtoa_r+0x8ea>
 80075f2:	9b05      	ldr	r3, [sp, #20]
 80075f4:	9306      	str	r3, [sp, #24]
 80075f6:	9b06      	ldr	r3, [sp, #24]
 80075f8:	b973      	cbnz	r3, 8007618 <_dtoa_r+0x8c8>
 80075fa:	4629      	mov	r1, r5
 80075fc:	2205      	movs	r2, #5
 80075fe:	4650      	mov	r0, sl
 8007600:	f000 f9d1 	bl	80079a6 <__multadd>
 8007604:	4605      	mov	r5, r0
 8007606:	4629      	mov	r1, r5
 8007608:	9807      	ldr	r0, [sp, #28]
 800760a:	f000 fb92 	bl	8007d32 <__mcmp>
 800760e:	2800      	cmp	r0, #0
 8007610:	dc09      	bgt.n	8007626 <_dtoa_r+0x8d6>
 8007612:	e001      	b.n	8007618 <_dtoa_r+0x8c8>
 8007614:	2500      	movs	r5, #0
 8007616:	462e      	mov	r6, r5
 8007618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800761a:	9c08      	ldr	r4, [sp, #32]
 800761c:	ea6f 0b03 	mvn.w	fp, r3
 8007620:	e008      	b.n	8007634 <_dtoa_r+0x8e4>
 8007622:	46bb      	mov	fp, r7
 8007624:	462e      	mov	r6, r5
 8007626:	9b08      	ldr	r3, [sp, #32]
 8007628:	9a08      	ldr	r2, [sp, #32]
 800762a:	1c5c      	adds	r4, r3, #1
 800762c:	2331      	movs	r3, #49	; 0x31
 800762e:	7013      	strb	r3, [r2, #0]
 8007630:	f10b 0b01 	add.w	fp, fp, #1
 8007634:	46b1      	mov	r9, r6
 8007636:	2600      	movs	r6, #0
 8007638:	e114      	b.n	8007864 <_dtoa_r+0xb14>
 800763a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800763c:	b923      	cbnz	r3, 8007648 <_dtoa_r+0x8f8>
 800763e:	9b05      	ldr	r3, [sp, #20]
 8007640:	9306      	str	r3, [sp, #24]
 8007642:	9f08      	ldr	r7, [sp, #32]
 8007644:	9c07      	ldr	r4, [sp, #28]
 8007646:	e0cc      	b.n	80077e2 <_dtoa_r+0xa92>
 8007648:	9b05      	ldr	r3, [sp, #20]
 800764a:	9306      	str	r3, [sp, #24]
 800764c:	2c00      	cmp	r4, #0
 800764e:	dd05      	ble.n	800765c <_dtoa_r+0x90c>
 8007650:	4631      	mov	r1, r6
 8007652:	4650      	mov	r0, sl
 8007654:	4622      	mov	r2, r4
 8007656:	f000 fb19 	bl	8007c8c <__lshift>
 800765a:	4606      	mov	r6, r0
 800765c:	b1b7      	cbz	r7, 800768c <_dtoa_r+0x93c>
 800765e:	6871      	ldr	r1, [r6, #4]
 8007660:	4650      	mov	r0, sl
 8007662:	f000 f954 	bl	800790e <_Balloc>
 8007666:	6932      	ldr	r2, [r6, #16]
 8007668:	3202      	adds	r2, #2
 800766a:	4604      	mov	r4, r0
 800766c:	f106 010c 	add.w	r1, r6, #12
 8007670:	0092      	lsls	r2, r2, #2
 8007672:	300c      	adds	r0, #12
 8007674:	f7fe fdf2 	bl	800625c <memcpy>
 8007678:	4650      	mov	r0, sl
 800767a:	4621      	mov	r1, r4
 800767c:	2201      	movs	r2, #1
 800767e:	f000 fb05 	bl	8007c8c <__lshift>
 8007682:	4681      	mov	r9, r0
 8007684:	e003      	b.n	800768e <_dtoa_r+0x93e>
 8007686:	bf00      	nop
 8007688:	40240000 	.word	0x40240000
 800768c:	46b1      	mov	r9, r6
 800768e:	9f08      	ldr	r7, [sp, #32]
 8007690:	9c07      	ldr	r4, [sp, #28]
 8007692:	4629      	mov	r1, r5
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff facc 	bl	8006c32 <quorem>
 800769a:	4631      	mov	r1, r6
 800769c:	9009      	str	r0, [sp, #36]	; 0x24
 800769e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fb45 	bl	8007d32 <__mcmp>
 80076a8:	464a      	mov	r2, r9
 80076aa:	9005      	str	r0, [sp, #20]
 80076ac:	4629      	mov	r1, r5
 80076ae:	4650      	mov	r0, sl
 80076b0:	f000 fb5b 	bl	8007d6a <__mdiff>
 80076b4:	68c2      	ldr	r2, [r0, #12]
 80076b6:	4603      	mov	r3, r0
 80076b8:	b93a      	cbnz	r2, 80076ca <_dtoa_r+0x97a>
 80076ba:	4619      	mov	r1, r3
 80076bc:	4620      	mov	r0, r4
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f000 fb37 	bl	8007d32 <__mcmp>
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	4602      	mov	r2, r0
 80076c8:	e000      	b.n	80076cc <_dtoa_r+0x97c>
 80076ca:	2201      	movs	r2, #1
 80076cc:	4650      	mov	r0, sl
 80076ce:	4619      	mov	r1, r3
 80076d0:	9207      	str	r2, [sp, #28]
 80076d2:	f000 f951 	bl	8007978 <_Bfree>
 80076d6:	9a07      	ldr	r2, [sp, #28]
 80076d8:	b9a2      	cbnz	r2, 8007704 <_dtoa_r+0x9b4>
 80076da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80076dc:	b993      	cbnz	r3, 8007704 <_dtoa_r+0x9b4>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	b973      	cbnz	r3, 8007704 <_dtoa_r+0x9b4>
 80076e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076ea:	463b      	mov	r3, r7
 80076ec:	9407      	str	r4, [sp, #28]
 80076ee:	d040      	beq.n	8007772 <_dtoa_r+0xa22>
 80076f0:	9b05      	ldr	r3, [sp, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfc8      	it	gt
 80076f6:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 80076f8:	f107 0401 	add.w	r4, r7, #1
 80076fc:	bfc8      	it	gt
 80076fe:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8007702:	e03d      	b.n	8007780 <_dtoa_r+0xa30>
 8007704:	9b05      	ldr	r3, [sp, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	da04      	bge.n	8007714 <_dtoa_r+0x9c4>
 800770a:	2a00      	cmp	r2, #0
 800770c:	46c4      	mov	ip, r8
 800770e:	9407      	str	r4, [sp, #28]
 8007710:	dc08      	bgt.n	8007724 <_dtoa_r+0x9d4>
 8007712:	e021      	b.n	8007758 <_dtoa_r+0xa08>
 8007714:	d124      	bne.n	8007760 <_dtoa_r+0xa10>
 8007716:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007718:	bb13      	cbnz	r3, 8007760 <_dtoa_r+0xa10>
 800771a:	9b02      	ldr	r3, [sp, #8]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	b9f3      	cbnz	r3, 8007760 <_dtoa_r+0xa10>
 8007722:	e7f2      	b.n	800770a <_dtoa_r+0x9ba>
 8007724:	4621      	mov	r1, r4
 8007726:	2201      	movs	r2, #1
 8007728:	4650      	mov	r0, sl
 800772a:	9705      	str	r7, [sp, #20]
 800772c:	f8cd 8008 	str.w	r8, [sp, #8]
 8007730:	f000 faac 	bl	8007c8c <__lshift>
 8007734:	4629      	mov	r1, r5
 8007736:	9007      	str	r0, [sp, #28]
 8007738:	f000 fafb 	bl	8007d32 <__mcmp>
 800773c:	2800      	cmp	r0, #0
 800773e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007742:	9b05      	ldr	r3, [sp, #20]
 8007744:	dc03      	bgt.n	800774e <_dtoa_r+0x9fe>
 8007746:	d107      	bne.n	8007758 <_dtoa_r+0xa08>
 8007748:	f018 0f01 	tst.w	r8, #1
 800774c:	d004      	beq.n	8007758 <_dtoa_r+0xa08>
 800774e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007752:	d00e      	beq.n	8007772 <_dtoa_r+0xa22>
 8007754:	f108 0c01 	add.w	ip, r8, #1
 8007758:	1c7c      	adds	r4, r7, #1
 800775a:	f887 c000 	strb.w	ip, [r7]
 800775e:	e081      	b.n	8007864 <_dtoa_r+0xb14>
 8007760:	2a00      	cmp	r2, #0
 8007762:	f107 0201 	add.w	r2, r7, #1
 8007766:	dd0e      	ble.n	8007786 <_dtoa_r+0xa36>
 8007768:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800776c:	463b      	mov	r3, r7
 800776e:	9407      	str	r4, [sp, #28]
 8007770:	d103      	bne.n	800777a <_dtoa_r+0xa2a>
 8007772:	2239      	movs	r2, #57	; 0x39
 8007774:	3701      	adds	r7, #1
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e057      	b.n	800782a <_dtoa_r+0xada>
 800777a:	4614      	mov	r4, r2
 800777c:	f108 0801 	add.w	r8, r8, #1
 8007780:	f887 8000 	strb.w	r8, [r7]
 8007784:	e06e      	b.n	8007864 <_dtoa_r+0xb14>
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	f802 8c01 	strb.w	r8, [r2, #-1]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	4617      	mov	r7, r2
 8007790:	9a06      	ldr	r2, [sp, #24]
 8007792:	4293      	cmp	r3, r2
 8007794:	d03a      	beq.n	800780c <_dtoa_r+0xabc>
 8007796:	4621      	mov	r1, r4
 8007798:	220a      	movs	r2, #10
 800779a:	2300      	movs	r3, #0
 800779c:	4650      	mov	r0, sl
 800779e:	f000 f902 	bl	80079a6 <__multadd>
 80077a2:	454e      	cmp	r6, r9
 80077a4:	4604      	mov	r4, r0
 80077a6:	4631      	mov	r1, r6
 80077a8:	4650      	mov	r0, sl
 80077aa:	f04f 020a 	mov.w	r2, #10
 80077ae:	f04f 0300 	mov.w	r3, #0
 80077b2:	d104      	bne.n	80077be <_dtoa_r+0xa6e>
 80077b4:	f000 f8f7 	bl	80079a6 <__multadd>
 80077b8:	4606      	mov	r6, r0
 80077ba:	4681      	mov	r9, r0
 80077bc:	e769      	b.n	8007692 <_dtoa_r+0x942>
 80077be:	f000 f8f2 	bl	80079a6 <__multadd>
 80077c2:	4649      	mov	r1, r9
 80077c4:	4606      	mov	r6, r0
 80077c6:	220a      	movs	r2, #10
 80077c8:	4650      	mov	r0, sl
 80077ca:	2300      	movs	r3, #0
 80077cc:	f000 f8eb 	bl	80079a6 <__multadd>
 80077d0:	4681      	mov	r9, r0
 80077d2:	e75e      	b.n	8007692 <_dtoa_r+0x942>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4650      	mov	r0, sl
 80077d8:	220a      	movs	r2, #10
 80077da:	2300      	movs	r3, #0
 80077dc:	f000 f8e3 	bl	80079a6 <__multadd>
 80077e0:	4604      	mov	r4, r0
 80077e2:	4620      	mov	r0, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	f7ff fa24 	bl	8006c32 <quorem>
 80077ea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80077ee:	f807 8b01 	strb.w	r8, [r7], #1
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	9a06      	ldr	r2, [sp, #24]
 80077f6:	1afb      	subs	r3, r7, r3
 80077f8:	4293      	cmp	r3, r2
 80077fa:	dbeb      	blt.n	80077d4 <_dtoa_r+0xa84>
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	2a01      	cmp	r2, #1
 8007800:	bfac      	ite	ge
 8007802:	189b      	addge	r3, r3, r2
 8007804:	3301      	addlt	r3, #1
 8007806:	46b1      	mov	r9, r6
 8007808:	461f      	mov	r7, r3
 800780a:	2600      	movs	r6, #0
 800780c:	4621      	mov	r1, r4
 800780e:	2201      	movs	r2, #1
 8007810:	4650      	mov	r0, sl
 8007812:	f000 fa3b 	bl	8007c8c <__lshift>
 8007816:	4629      	mov	r1, r5
 8007818:	9007      	str	r0, [sp, #28]
 800781a:	f000 fa8a 	bl	8007d32 <__mcmp>
 800781e:	2800      	cmp	r0, #0
 8007820:	dc03      	bgt.n	800782a <_dtoa_r+0xada>
 8007822:	d116      	bne.n	8007852 <_dtoa_r+0xb02>
 8007824:	f018 0f01 	tst.w	r8, #1
 8007828:	d013      	beq.n	8007852 <_dtoa_r+0xb02>
 800782a:	463c      	mov	r4, r7
 800782c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8007830:	2b39      	cmp	r3, #57	; 0x39
 8007832:	f104 32ff 	add.w	r2, r4, #4294967295
 8007836:	d109      	bne.n	800784c <_dtoa_r+0xafc>
 8007838:	9b08      	ldr	r3, [sp, #32]
 800783a:	429a      	cmp	r2, r3
 800783c:	d104      	bne.n	8007848 <_dtoa_r+0xaf8>
 800783e:	f10b 0b01 	add.w	fp, fp, #1
 8007842:	2331      	movs	r3, #49	; 0x31
 8007844:	9a08      	ldr	r2, [sp, #32]
 8007846:	e002      	b.n	800784e <_dtoa_r+0xafe>
 8007848:	4614      	mov	r4, r2
 800784a:	e7ef      	b.n	800782c <_dtoa_r+0xadc>
 800784c:	3301      	adds	r3, #1
 800784e:	7013      	strb	r3, [r2, #0]
 8007850:	e008      	b.n	8007864 <_dtoa_r+0xb14>
 8007852:	463c      	mov	r4, r7
 8007854:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8007858:	2b30      	cmp	r3, #48	; 0x30
 800785a:	f104 32ff 	add.w	r2, r4, #4294967295
 800785e:	d101      	bne.n	8007864 <_dtoa_r+0xb14>
 8007860:	4614      	mov	r4, r2
 8007862:	e7f7      	b.n	8007854 <_dtoa_r+0xb04>
 8007864:	4650      	mov	r0, sl
 8007866:	4629      	mov	r1, r5
 8007868:	f000 f886 	bl	8007978 <_Bfree>
 800786c:	f1b9 0f00 	cmp.w	r9, #0
 8007870:	d00c      	beq.n	800788c <_dtoa_r+0xb3c>
 8007872:	b12e      	cbz	r6, 8007880 <_dtoa_r+0xb30>
 8007874:	454e      	cmp	r6, r9
 8007876:	d003      	beq.n	8007880 <_dtoa_r+0xb30>
 8007878:	4650      	mov	r0, sl
 800787a:	4631      	mov	r1, r6
 800787c:	f000 f87c 	bl	8007978 <_Bfree>
 8007880:	4650      	mov	r0, sl
 8007882:	4649      	mov	r1, r9
 8007884:	f000 f878 	bl	8007978 <_Bfree>
 8007888:	e000      	b.n	800788c <_dtoa_r+0xb3c>
 800788a:	46bb      	mov	fp, r7
 800788c:	4650      	mov	r0, sl
 800788e:	9907      	ldr	r1, [sp, #28]
 8007890:	f000 f872 	bl	8007978 <_Bfree>
 8007894:	2300      	movs	r3, #0
 8007896:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007898:	7023      	strb	r3, [r4, #0]
 800789a:	f10b 0301 	add.w	r3, fp, #1
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078a2:	b11b      	cbz	r3, 80078ac <_dtoa_r+0xb5c>
 80078a4:	601c      	str	r4, [r3, #0]
 80078a6:	e001      	b.n	80078ac <_dtoa_r+0xb5c>
 80078a8:	480a      	ldr	r0, [pc, #40]	; (80078d4 <_dtoa_r+0xb84>)
 80078aa:	e00f      	b.n	80078cc <_dtoa_r+0xb7c>
 80078ac:	9808      	ldr	r0, [sp, #32]
 80078ae:	e00d      	b.n	80078cc <_dtoa_r+0xb7c>
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f73f aec5 	bgt.w	8007642 <_dtoa_r+0x8f2>
 80078b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	f73f ae9b 	bgt.w	80075f6 <_dtoa_r+0x8a6>
 80078c0:	e6bf      	b.n	8007642 <_dtoa_r+0x8f2>
 80078c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	f73f ae96 	bgt.w	80075f6 <_dtoa_r+0x8a6>
 80078ca:	e6bf      	b.n	800764c <_dtoa_r+0x8fc>
 80078cc:	b017      	add	sp, #92	; 0x5c
 80078ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d2:	bf00      	nop
 80078d4:	080088da 	.word	0x080088da

080078d8 <_localeconv_r>:
 80078d8:	4800      	ldr	r0, [pc, #0]	; (80078dc <_localeconv_r+0x4>)
 80078da:	4770      	bx	lr
 80078dc:	20000284 	.word	0x20000284

080078e0 <malloc>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <malloc+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f000 bb43 	b.w	8007f70 <_malloc_r>
 80078ea:	bf00      	nop
 80078ec:	20000280 	.word	0x20000280

080078f0 <memchr>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	b2c9      	uxtb	r1, r1
 80078f4:	4402      	add	r2, r0
 80078f6:	4290      	cmp	r0, r2
 80078f8:	4603      	mov	r3, r0
 80078fa:	d006      	beq.n	800790a <memchr+0x1a>
 80078fc:	781c      	ldrb	r4, [r3, #0]
 80078fe:	428c      	cmp	r4, r1
 8007900:	f100 0001 	add.w	r0, r0, #1
 8007904:	d1f7      	bne.n	80078f6 <memchr+0x6>
 8007906:	4618      	mov	r0, r3
 8007908:	bd10      	pop	{r4, pc}
 800790a:	2000      	movs	r0, #0
 800790c:	bd10      	pop	{r4, pc}

0800790e <_Balloc>:
 800790e:	b570      	push	{r4, r5, r6, lr}
 8007910:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007912:	4604      	mov	r4, r0
 8007914:	460e      	mov	r6, r1
 8007916:	b93d      	cbnz	r5, 8007928 <_Balloc+0x1a>
 8007918:	2010      	movs	r0, #16
 800791a:	f7ff ffe1 	bl	80078e0 <malloc>
 800791e:	6260      	str	r0, [r4, #36]	; 0x24
 8007920:	6045      	str	r5, [r0, #4]
 8007922:	6085      	str	r5, [r0, #8]
 8007924:	6005      	str	r5, [r0, #0]
 8007926:	60c5      	str	r5, [r0, #12]
 8007928:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800792a:	68eb      	ldr	r3, [r5, #12]
 800792c:	b143      	cbz	r3, 8007940 <_Balloc+0x32>
 800792e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007936:	b178      	cbz	r0, 8007958 <_Balloc+0x4a>
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800793e:	e017      	b.n	8007970 <_Balloc+0x62>
 8007940:	4620      	mov	r0, r4
 8007942:	2104      	movs	r1, #4
 8007944:	2221      	movs	r2, #33	; 0x21
 8007946:	f000 fac1 	bl	8007ecc <_calloc_r>
 800794a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800794c:	60e8      	str	r0, [r5, #12]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1ec      	bne.n	800792e <_Balloc+0x20>
 8007954:	2000      	movs	r0, #0
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	2101      	movs	r1, #1
 800795a:	fa01 f506 	lsl.w	r5, r1, r6
 800795e:	1d6a      	adds	r2, r5, #5
 8007960:	4620      	mov	r0, r4
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	f000 fab2 	bl	8007ecc <_calloc_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d0f3      	beq.n	8007954 <_Balloc+0x46>
 800796c:	6046      	str	r6, [r0, #4]
 800796e:	6085      	str	r5, [r0, #8]
 8007970:	2300      	movs	r3, #0
 8007972:	6103      	str	r3, [r0, #16]
 8007974:	60c3      	str	r3, [r0, #12]
 8007976:	bd70      	pop	{r4, r5, r6, pc}

08007978 <_Bfree>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800797c:	4606      	mov	r6, r0
 800797e:	460d      	mov	r5, r1
 8007980:	b93c      	cbnz	r4, 8007992 <_Bfree+0x1a>
 8007982:	2010      	movs	r0, #16
 8007984:	f7ff ffac 	bl	80078e0 <malloc>
 8007988:	6270      	str	r0, [r6, #36]	; 0x24
 800798a:	6044      	str	r4, [r0, #4]
 800798c:	6084      	str	r4, [r0, #8]
 800798e:	6004      	str	r4, [r0, #0]
 8007990:	60c4      	str	r4, [r0, #12]
 8007992:	b13d      	cbz	r5, 80079a4 <_Bfree+0x2c>
 8007994:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007996:	686a      	ldr	r2, [r5, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800799e:	6029      	str	r1, [r5, #0]
 80079a0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80079a4:	bd70      	pop	{r4, r5, r6, pc}

080079a6 <__multadd>:
 80079a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079aa:	690f      	ldr	r7, [r1, #16]
 80079ac:	4698      	mov	r8, r3
 80079ae:	4606      	mov	r6, r0
 80079b0:	460c      	mov	r4, r1
 80079b2:	f101 0e14 	add.w	lr, r1, #20
 80079b6:	2300      	movs	r3, #0
 80079b8:	f8de 0000 	ldr.w	r0, [lr]
 80079bc:	b285      	uxth	r5, r0
 80079be:	0c01      	lsrs	r1, r0, #16
 80079c0:	fb02 8505 	mla	r5, r2, r5, r8
 80079c4:	4351      	muls	r1, r2
 80079c6:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 80079ca:	3301      	adds	r3, #1
 80079cc:	b2ad      	uxth	r5, r5
 80079ce:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 80079d8:	f84e 1b04 	str.w	r1, [lr], #4
 80079dc:	dbec      	blt.n	80079b8 <__multadd+0x12>
 80079de:	f1b8 0f00 	cmp.w	r8, #0
 80079e2:	d01b      	beq.n	8007a1c <__multadd+0x76>
 80079e4:	68a3      	ldr	r3, [r4, #8]
 80079e6:	429f      	cmp	r7, r3
 80079e8:	db12      	blt.n	8007a10 <__multadd+0x6a>
 80079ea:	6861      	ldr	r1, [r4, #4]
 80079ec:	4630      	mov	r0, r6
 80079ee:	3101      	adds	r1, #1
 80079f0:	f7ff ff8d 	bl	800790e <_Balloc>
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	3202      	adds	r2, #2
 80079f8:	f104 010c 	add.w	r1, r4, #12
 80079fc:	4605      	mov	r5, r0
 80079fe:	0092      	lsls	r2, r2, #2
 8007a00:	300c      	adds	r0, #12
 8007a02:	f7fe fc2b 	bl	800625c <memcpy>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7ff ffb5 	bl	8007978 <_Bfree>
 8007a0e:	462c      	mov	r4, r5
 8007a10:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8007a14:	3701      	adds	r7, #1
 8007a16:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a1a:	6127      	str	r7, [r4, #16]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a22 <__hi0bits>:
 8007a22:	0c03      	lsrs	r3, r0, #16
 8007a24:	041b      	lsls	r3, r3, #16
 8007a26:	b913      	cbnz	r3, 8007a2e <__hi0bits+0xc>
 8007a28:	0400      	lsls	r0, r0, #16
 8007a2a:	2310      	movs	r3, #16
 8007a2c:	e000      	b.n	8007a30 <__hi0bits+0xe>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a34:	bf04      	itt	eq
 8007a36:	0200      	lsleq	r0, r0, #8
 8007a38:	3308      	addeq	r3, #8
 8007a3a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a3e:	bf04      	itt	eq
 8007a40:	0100      	lsleq	r0, r0, #4
 8007a42:	3304      	addeq	r3, #4
 8007a44:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a48:	bf04      	itt	eq
 8007a4a:	0080      	lsleq	r0, r0, #2
 8007a4c:	3302      	addeq	r3, #2
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	db03      	blt.n	8007a5a <__hi0bits+0x38>
 8007a52:	0042      	lsls	r2, r0, #1
 8007a54:	d503      	bpl.n	8007a5e <__hi0bits+0x3c>
 8007a56:	1c58      	adds	r0, r3, #1
 8007a58:	4770      	bx	lr
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	4770      	bx	lr
 8007a5e:	2020      	movs	r0, #32
 8007a60:	4770      	bx	lr

08007a62 <__lo0bits>:
 8007a62:	6803      	ldr	r3, [r0, #0]
 8007a64:	f013 0207 	ands.w	r2, r3, #7
 8007a68:	d00b      	beq.n	8007a82 <__lo0bits+0x20>
 8007a6a:	07d9      	lsls	r1, r3, #31
 8007a6c:	d422      	bmi.n	8007ab4 <__lo0bits+0x52>
 8007a6e:	079a      	lsls	r2, r3, #30
 8007a70:	bf4b      	itete	mi
 8007a72:	085b      	lsrmi	r3, r3, #1
 8007a74:	089b      	lsrpl	r3, r3, #2
 8007a76:	6003      	strmi	r3, [r0, #0]
 8007a78:	6003      	strpl	r3, [r0, #0]
 8007a7a:	bf4c      	ite	mi
 8007a7c:	2001      	movmi	r0, #1
 8007a7e:	2002      	movpl	r0, #2
 8007a80:	4770      	bx	lr
 8007a82:	b299      	uxth	r1, r3
 8007a84:	b909      	cbnz	r1, 8007a8a <__lo0bits+0x28>
 8007a86:	0c1b      	lsrs	r3, r3, #16
 8007a88:	2210      	movs	r2, #16
 8007a8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a8e:	bf04      	itt	eq
 8007a90:	0a1b      	lsreq	r3, r3, #8
 8007a92:	3208      	addeq	r2, #8
 8007a94:	0719      	lsls	r1, r3, #28
 8007a96:	bf04      	itt	eq
 8007a98:	091b      	lsreq	r3, r3, #4
 8007a9a:	3204      	addeq	r2, #4
 8007a9c:	0799      	lsls	r1, r3, #30
 8007a9e:	bf04      	itt	eq
 8007aa0:	089b      	lsreq	r3, r3, #2
 8007aa2:	3202      	addeq	r2, #2
 8007aa4:	07d9      	lsls	r1, r3, #31
 8007aa6:	d402      	bmi.n	8007aae <__lo0bits+0x4c>
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	d005      	beq.n	8007ab8 <__lo0bits+0x56>
 8007aac:	3201      	adds	r2, #1
 8007aae:	6003      	str	r3, [r0, #0]
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4770      	bx	lr
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	4770      	bx	lr
 8007ab8:	2020      	movs	r0, #32
 8007aba:	4770      	bx	lr

08007abc <__i2b>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	f7ff ff24 	bl	800790e <_Balloc>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	6144      	str	r4, [r0, #20]
 8007aca:	6102      	str	r2, [r0, #16]
 8007acc:	bd10      	pop	{r4, pc}

08007ace <__multiply>:
 8007ace:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	690a      	ldr	r2, [r1, #16]
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	bfb8      	it	lt
 8007adc:	460b      	movlt	r3, r1
 8007ade:	4688      	mov	r8, r1
 8007ae0:	bfbc      	itt	lt
 8007ae2:	46a0      	movlt	r8, r4
 8007ae4:	461c      	movlt	r4, r3
 8007ae6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007aea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007aee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007af2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007af6:	eb07 0609 	add.w	r6, r7, r9
 8007afa:	429e      	cmp	r6, r3
 8007afc:	bfc8      	it	gt
 8007afe:	3101      	addgt	r1, #1
 8007b00:	f7ff ff05 	bl	800790e <_Balloc>
 8007b04:	f100 0514 	add.w	r5, r0, #20
 8007b08:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	4563      	cmp	r3, ip
 8007b10:	d203      	bcs.n	8007b1a <__multiply+0x4c>
 8007b12:	2200      	movs	r2, #0
 8007b14:	f843 2b04 	str.w	r2, [r3], #4
 8007b18:	e7f9      	b.n	8007b0e <__multiply+0x40>
 8007b1a:	f104 0214 	add.w	r2, r4, #20
 8007b1e:	f108 0114 	add.w	r1, r8, #20
 8007b22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007b26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	9b00      	ldr	r3, [sp, #0]
 8007b2e:	9201      	str	r2, [sp, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d257      	bcs.n	8007be4 <__multiply+0x116>
 8007b34:	f8b2 b000 	ldrh.w	fp, [r2]
 8007b38:	f1bb 0f00 	cmp.w	fp, #0
 8007b3c:	d023      	beq.n	8007b86 <__multiply+0xb8>
 8007b3e:	4689      	mov	r9, r1
 8007b40:	46ae      	mov	lr, r5
 8007b42:	f04f 0800 	mov.w	r8, #0
 8007b46:	f859 4b04 	ldr.w	r4, [r9], #4
 8007b4a:	f8be a000 	ldrh.w	sl, [lr]
 8007b4e:	b2a3      	uxth	r3, r4
 8007b50:	fb0b a303 	mla	r3, fp, r3, sl
 8007b54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b58:	f8de 4000 	ldr.w	r4, [lr]
 8007b5c:	4443      	add	r3, r8
 8007b5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b62:	fb0b 840a 	mla	r4, fp, sl, r8
 8007b66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007b6a:	46f2      	mov	sl, lr
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b72:	454f      	cmp	r7, r9
 8007b74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007b78:	f84a 3b04 	str.w	r3, [sl], #4
 8007b7c:	d901      	bls.n	8007b82 <__multiply+0xb4>
 8007b7e:	46d6      	mov	lr, sl
 8007b80:	e7e1      	b.n	8007b46 <__multiply+0x78>
 8007b82:	f8ce 8004 	str.w	r8, [lr, #4]
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b8c:	3204      	adds	r2, #4
 8007b8e:	f1ba 0f00 	cmp.w	sl, #0
 8007b92:	d021      	beq.n	8007bd8 <__multiply+0x10a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	462c      	mov	r4, r5
 8007b98:	4689      	mov	r9, r1
 8007b9a:	f04f 0800 	mov.w	r8, #0
 8007b9e:	f8b9 e000 	ldrh.w	lr, [r9]
 8007ba2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8007ba6:	fb0a be0e 	mla	lr, sl, lr, fp
 8007baa:	44f0      	add	r8, lr
 8007bac:	46a3      	mov	fp, r4
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007bb4:	f84b 3b04 	str.w	r3, [fp], #4
 8007bb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bbc:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	fb0a e303 	mla	r3, sl, r3, lr
 8007bc6:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8007bca:	45b9      	cmp	r9, r7
 8007bcc:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007bd0:	d201      	bcs.n	8007bd6 <__multiply+0x108>
 8007bd2:	465c      	mov	r4, fp
 8007bd4:	e7e3      	b.n	8007b9e <__multiply+0xd0>
 8007bd6:	6063      	str	r3, [r4, #4]
 8007bd8:	3504      	adds	r5, #4
 8007bda:	e7a7      	b.n	8007b2c <__multiply+0x5e>
 8007bdc:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007be0:	b913      	cbnz	r3, 8007be8 <__multiply+0x11a>
 8007be2:	3e01      	subs	r6, #1
 8007be4:	2e00      	cmp	r6, #0
 8007be6:	dcf9      	bgt.n	8007bdc <__multiply+0x10e>
 8007be8:	6106      	str	r6, [r0, #16]
 8007bea:	b003      	add	sp, #12
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bf0 <__pow5mult>:
 8007bf0:	f012 0303 	ands.w	r3, r2, #3
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	d007      	beq.n	8007c10 <__pow5mult+0x20>
 8007c00:	3b01      	subs	r3, #1
 8007c02:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <__pow5mult+0x98>)
 8007c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f7ff fecc 	bl	80079a6 <__multadd>
 8007c0e:	4607      	mov	r7, r0
 8007c10:	10ad      	asrs	r5, r5, #2
 8007c12:	d035      	beq.n	8007c80 <__pow5mult+0x90>
 8007c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c16:	b93c      	cbnz	r4, 8007c28 <__pow5mult+0x38>
 8007c18:	2010      	movs	r0, #16
 8007c1a:	f7ff fe61 	bl	80078e0 <malloc>
 8007c1e:	6270      	str	r0, [r6, #36]	; 0x24
 8007c20:	6044      	str	r4, [r0, #4]
 8007c22:	6084      	str	r4, [r0, #8]
 8007c24:	6004      	str	r4, [r0, #0]
 8007c26:	60c4      	str	r4, [r0, #12]
 8007c28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c30:	b97c      	cbnz	r4, 8007c52 <__pow5mult+0x62>
 8007c32:	4630      	mov	r0, r6
 8007c34:	f240 2171 	movw	r1, #625	; 0x271
 8007c38:	f7ff ff40 	bl	8007abc <__i2b>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c42:	4604      	mov	r4, r0
 8007c44:	6003      	str	r3, [r0, #0]
 8007c46:	e004      	b.n	8007c52 <__pow5mult+0x62>
 8007c48:	106d      	asrs	r5, r5, #1
 8007c4a:	d019      	beq.n	8007c80 <__pow5mult+0x90>
 8007c4c:	6820      	ldr	r0, [r4, #0]
 8007c4e:	b170      	cbz	r0, 8007c6e <__pow5mult+0x7e>
 8007c50:	4604      	mov	r4, r0
 8007c52:	07eb      	lsls	r3, r5, #31
 8007c54:	d5f8      	bpl.n	8007c48 <__pow5mult+0x58>
 8007c56:	4639      	mov	r1, r7
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff ff37 	bl	8007ace <__multiply>
 8007c60:	4639      	mov	r1, r7
 8007c62:	4680      	mov	r8, r0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff fe87 	bl	8007978 <_Bfree>
 8007c6a:	4647      	mov	r7, r8
 8007c6c:	e7ec      	b.n	8007c48 <__pow5mult+0x58>
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4621      	mov	r1, r4
 8007c72:	4622      	mov	r2, r4
 8007c74:	f7ff ff2b 	bl	8007ace <__multiply>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	6020      	str	r0, [r4, #0]
 8007c7c:	6003      	str	r3, [r0, #0]
 8007c7e:	e7e7      	b.n	8007c50 <__pow5mult+0x60>
 8007c80:	4638      	mov	r0, r7
 8007c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c86:	bf00      	nop
 8007c88:	08008a08 	.word	0x08008a08

08007c8c <__lshift>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	460c      	mov	r4, r1
 8007c92:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	6849      	ldr	r1, [r1, #4]
 8007c9a:	eb0a 0903 	add.w	r9, sl, r3
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	4616      	mov	r6, r2
 8007ca4:	f109 0501 	add.w	r5, r9, #1
 8007ca8:	429d      	cmp	r5, r3
 8007caa:	dd02      	ble.n	8007cb2 <__lshift+0x26>
 8007cac:	3101      	adds	r1, #1
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	e7fa      	b.n	8007ca8 <__lshift+0x1c>
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f7ff fe2b 	bl	800790e <_Balloc>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4680      	mov	r8, r0
 8007cbc:	f100 0114 	add.w	r1, r0, #20
 8007cc0:	4553      	cmp	r3, sl
 8007cc2:	da04      	bge.n	8007cce <__lshift+0x42>
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	e7f8      	b.n	8007cc0 <__lshift+0x34>
 8007cce:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007cd2:	6920      	ldr	r0, [r4, #16]
 8007cd4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007cd8:	f016 021f 	ands.w	r2, r6, #31
 8007cdc:	f104 0114 	add.w	r1, r4, #20
 8007ce0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007ce4:	d014      	beq.n	8007d10 <__lshift+0x84>
 8007ce6:	f1c2 0c20 	rsb	ip, r2, #32
 8007cea:	2000      	movs	r0, #0
 8007cec:	680e      	ldr	r6, [r1, #0]
 8007cee:	4096      	lsls	r6, r2
 8007cf0:	4330      	orrs	r0, r6
 8007cf2:	469a      	mov	sl, r3
 8007cf4:	f843 0b04 	str.w	r0, [r3], #4
 8007cf8:	f851 0b04 	ldr.w	r0, [r1], #4
 8007cfc:	4571      	cmp	r1, lr
 8007cfe:	fa20 f00c 	lsr.w	r0, r0, ip
 8007d02:	d3f3      	bcc.n	8007cec <__lshift+0x60>
 8007d04:	f8ca 0004 	str.w	r0, [sl, #4]
 8007d08:	b148      	cbz	r0, 8007d1e <__lshift+0x92>
 8007d0a:	f109 0502 	add.w	r5, r9, #2
 8007d0e:	e006      	b.n	8007d1e <__lshift+0x92>
 8007d10:	3b04      	subs	r3, #4
 8007d12:	f851 2b04 	ldr.w	r2, [r1], #4
 8007d16:	f843 2f04 	str.w	r2, [r3, #4]!
 8007d1a:	4571      	cmp	r1, lr
 8007d1c:	d3f9      	bcc.n	8007d12 <__lshift+0x86>
 8007d1e:	3d01      	subs	r5, #1
 8007d20:	4638      	mov	r0, r7
 8007d22:	f8c8 5010 	str.w	r5, [r8, #16]
 8007d26:	4621      	mov	r1, r4
 8007d28:	f7ff fe26 	bl	8007978 <_Bfree>
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d32 <__mcmp>:
 8007d32:	6903      	ldr	r3, [r0, #16]
 8007d34:	690a      	ldr	r2, [r1, #16]
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	d111      	bne.n	8007d60 <__mcmp+0x2e>
 8007d3c:	0092      	lsls	r2, r2, #2
 8007d3e:	3014      	adds	r0, #20
 8007d40:	3114      	adds	r1, #20
 8007d42:	1883      	adds	r3, r0, r2
 8007d44:	440a      	add	r2, r1
 8007d46:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007d4a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007d4e:	428c      	cmp	r4, r1
 8007d50:	d002      	beq.n	8007d58 <__mcmp+0x26>
 8007d52:	d307      	bcc.n	8007d64 <__mcmp+0x32>
 8007d54:	2001      	movs	r0, #1
 8007d56:	bd10      	pop	{r4, pc}
 8007d58:	4283      	cmp	r3, r0
 8007d5a:	d8f4      	bhi.n	8007d46 <__mcmp+0x14>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	bd10      	pop	{r4, pc}
 8007d60:	4618      	mov	r0, r3
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	bd10      	pop	{r4, pc}

08007d6a <__mdiff>:
 8007d6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6e:	4607      	mov	r7, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	4608      	mov	r0, r1
 8007d74:	4611      	mov	r1, r2
 8007d76:	4615      	mov	r5, r2
 8007d78:	f7ff ffdb 	bl	8007d32 <__mcmp>
 8007d7c:	1e06      	subs	r6, r0, #0
 8007d7e:	d108      	bne.n	8007d92 <__mdiff+0x28>
 8007d80:	4638      	mov	r0, r7
 8007d82:	4631      	mov	r1, r6
 8007d84:	f7ff fdc3 	bl	800790e <_Balloc>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	6103      	str	r3, [r0, #16]
 8007d8c:	6146      	str	r6, [r0, #20]
 8007d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d92:	bfbc      	itt	lt
 8007d94:	4623      	movlt	r3, r4
 8007d96:	462c      	movlt	r4, r5
 8007d98:	4638      	mov	r0, r7
 8007d9a:	6861      	ldr	r1, [r4, #4]
 8007d9c:	bfba      	itte	lt
 8007d9e:	461d      	movlt	r5, r3
 8007da0:	2601      	movlt	r6, #1
 8007da2:	2600      	movge	r6, #0
 8007da4:	f7ff fdb3 	bl	800790e <_Balloc>
 8007da8:	692b      	ldr	r3, [r5, #16]
 8007daa:	60c6      	str	r6, [r0, #12]
 8007dac:	6926      	ldr	r6, [r4, #16]
 8007dae:	f105 0914 	add.w	r9, r5, #20
 8007db2:	3414      	adds	r4, #20
 8007db4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8007db8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007dbc:	f100 0514 	add.w	r5, r0, #20
 8007dc0:	f04f 0c00 	mov.w	ip, #0
 8007dc4:	f854 3b04 	ldr.w	r3, [r4], #4
 8007dc8:	f859 2b04 	ldr.w	r2, [r9], #4
 8007dcc:	fa1c f183 	uxtah	r1, ip, r3
 8007dd0:	fa1f fe82 	uxth.w	lr, r2
 8007dd4:	0c12      	lsrs	r2, r2, #16
 8007dd6:	ebce 0101 	rsb	r1, lr, r1
 8007dda:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8007dde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007de2:	b289      	uxth	r1, r1
 8007de4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007de8:	45c8      	cmp	r8, r9
 8007dea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007dee:	46a6      	mov	lr, r4
 8007df0:	f845 3b04 	str.w	r3, [r5], #4
 8007df4:	d8e6      	bhi.n	8007dc4 <__mdiff+0x5a>
 8007df6:	45be      	cmp	lr, r7
 8007df8:	d20e      	bcs.n	8007e18 <__mdiff+0xae>
 8007dfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007dfe:	fa1c f482 	uxtah	r4, ip, r2
 8007e02:	0c12      	lsrs	r2, r2, #16
 8007e04:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8007e08:	b2a4      	uxth	r4, r4
 8007e0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e0e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8007e12:	f845 2b04 	str.w	r2, [r5], #4
 8007e16:	e7ee      	b.n	8007df6 <__mdiff+0x8c>
 8007e18:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007e1c:	b90b      	cbnz	r3, 8007e22 <__mdiff+0xb8>
 8007e1e:	3e01      	subs	r6, #1
 8007e20:	e7fa      	b.n	8007e18 <__mdiff+0xae>
 8007e22:	6106      	str	r6, [r0, #16]
 8007e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007e28 <__d2b>:
 8007e28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	461d      	mov	r5, r3
 8007e30:	9f08      	ldr	r7, [sp, #32]
 8007e32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e34:	4614      	mov	r4, r2
 8007e36:	f7ff fd6a 	bl	800790e <_Balloc>
 8007e3a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007e3e:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007e42:	4680      	mov	r8, r0
 8007e44:	b10d      	cbz	r5, 8007e4a <__d2b+0x22>
 8007e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	b1ec      	cbz	r4, 8007e8a <__d2b+0x62>
 8007e4e:	a802      	add	r0, sp, #8
 8007e50:	f840 4d08 	str.w	r4, [r0, #-8]!
 8007e54:	f7ff fe05 	bl	8007a62 <__lo0bits>
 8007e58:	9b00      	ldr	r3, [sp, #0]
 8007e5a:	b150      	cbz	r0, 8007e72 <__d2b+0x4a>
 8007e5c:	9a01      	ldr	r2, [sp, #4]
 8007e5e:	f1c0 0120 	rsb	r1, r0, #32
 8007e62:	fa02 f101 	lsl.w	r1, r2, r1
 8007e66:	430b      	orrs	r3, r1
 8007e68:	40c2      	lsrs	r2, r0
 8007e6a:	f8c8 3014 	str.w	r3, [r8, #20]
 8007e6e:	9201      	str	r2, [sp, #4]
 8007e70:	e001      	b.n	8007e76 <__d2b+0x4e>
 8007e72:	f8c8 3014 	str.w	r3, [r8, #20]
 8007e76:	9b01      	ldr	r3, [sp, #4]
 8007e78:	f8c8 3018 	str.w	r3, [r8, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2402      	movne	r4, #2
 8007e82:	2401      	moveq	r4, #1
 8007e84:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e88:	e009      	b.n	8007e9e <__d2b+0x76>
 8007e8a:	a801      	add	r0, sp, #4
 8007e8c:	f7ff fde9 	bl	8007a62 <__lo0bits>
 8007e90:	2401      	movs	r4, #1
 8007e92:	9b01      	ldr	r3, [sp, #4]
 8007e94:	f8c8 3014 	str.w	r3, [r8, #20]
 8007e98:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e9c:	3020      	adds	r0, #32
 8007e9e:	b135      	cbz	r5, 8007eae <__d2b+0x86>
 8007ea0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ea4:	4405      	add	r5, r0
 8007ea6:	603d      	str	r5, [r7, #0]
 8007ea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eac:	e009      	b.n	8007ec2 <__d2b+0x9a>
 8007eae:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007eb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007eb6:	6038      	str	r0, [r7, #0]
 8007eb8:	6918      	ldr	r0, [r3, #16]
 8007eba:	f7ff fdb2 	bl	8007a22 <__hi0bits>
 8007ebe:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8007ec2:	6030      	str	r0, [r6, #0]
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	b002      	add	sp, #8
 8007ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ecc <_calloc_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	fb02 f401 	mul.w	r4, r2, r1
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	f000 f84c 	bl	8007f70 <_malloc_r>
 8007ed8:	4605      	mov	r5, r0
 8007eda:	b118      	cbz	r0, 8007ee4 <_calloc_r+0x18>
 8007edc:	2100      	movs	r1, #0
 8007ede:	4622      	mov	r2, r4
 8007ee0:	f7fe f9c7 	bl	8006272 <memset>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}

08007ee8 <_free_r>:
 8007ee8:	b530      	push	{r4, r5, lr}
 8007eea:	2900      	cmp	r1, #0
 8007eec:	d03d      	beq.n	8007f6a <_free_r+0x82>
 8007eee:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8007ef2:	1f0b      	subs	r3, r1, #4
 8007ef4:	491d      	ldr	r1, [pc, #116]	; (8007f6c <_free_r+0x84>)
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	bfb8      	it	lt
 8007efa:	189b      	addlt	r3, r3, r2
 8007efc:	680a      	ldr	r2, [r1, #0]
 8007efe:	460c      	mov	r4, r1
 8007f00:	b912      	cbnz	r2, 8007f08 <_free_r+0x20>
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	600b      	str	r3, [r1, #0]
 8007f06:	bd30      	pop	{r4, r5, pc}
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d20d      	bcs.n	8007f28 <_free_r+0x40>
 8007f0c:	6819      	ldr	r1, [r3, #0]
 8007f0e:	1858      	adds	r0, r3, r1
 8007f10:	4290      	cmp	r0, r2
 8007f12:	bf01      	itttt	eq
 8007f14:	585a      	ldreq	r2, [r3, r1]
 8007f16:	1852      	addeq	r2, r2, r1
 8007f18:	601a      	streq	r2, [r3, #0]
 8007f1a:	6842      	ldreq	r2, [r0, #4]
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	bd30      	pop	{r4, r5, pc}
 8007f22:	4299      	cmp	r1, r3
 8007f24:	d803      	bhi.n	8007f2e <_free_r+0x46>
 8007f26:	460a      	mov	r2, r1
 8007f28:	6851      	ldr	r1, [r2, #4]
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	d1f9      	bne.n	8007f22 <_free_r+0x3a>
 8007f2e:	6814      	ldr	r4, [r2, #0]
 8007f30:	1915      	adds	r5, r2, r4
 8007f32:	429d      	cmp	r5, r3
 8007f34:	d10a      	bne.n	8007f4c <_free_r+0x64>
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4423      	add	r3, r4
 8007f3a:	18d0      	adds	r0, r2, r3
 8007f3c:	4288      	cmp	r0, r1
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	d113      	bne.n	8007f6a <_free_r+0x82>
 8007f42:	6808      	ldr	r0, [r1, #0]
 8007f44:	4403      	add	r3, r0
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	684b      	ldr	r3, [r1, #4]
 8007f4a:	e00d      	b.n	8007f68 <_free_r+0x80>
 8007f4c:	d902      	bls.n	8007f54 <_free_r+0x6c>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	bd30      	pop	{r4, r5, pc}
 8007f54:	681c      	ldr	r4, [r3, #0]
 8007f56:	1918      	adds	r0, r3, r4
 8007f58:	4288      	cmp	r0, r1
 8007f5a:	bf04      	itt	eq
 8007f5c:	6808      	ldreq	r0, [r1, #0]
 8007f5e:	6849      	ldreq	r1, [r1, #4]
 8007f60:	6059      	str	r1, [r3, #4]
 8007f62:	bf04      	itt	eq
 8007f64:	1900      	addeq	r0, r0, r4
 8007f66:	6018      	streq	r0, [r3, #0]
 8007f68:	6053      	str	r3, [r2, #4]
 8007f6a:	bd30      	pop	{r4, r5, pc}
 8007f6c:	200002fc 	.word	0x200002fc

08007f70 <_malloc_r>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	1ccc      	adds	r4, r1, #3
 8007f74:	f024 0403 	bic.w	r4, r4, #3
 8007f78:	3408      	adds	r4, #8
 8007f7a:	2c0c      	cmp	r4, #12
 8007f7c:	bf38      	it	cc
 8007f7e:	240c      	movcc	r4, #12
 8007f80:	2c00      	cmp	r4, #0
 8007f82:	4606      	mov	r6, r0
 8007f84:	da03      	bge.n	8007f8e <_malloc_r+0x1e>
 8007f86:	230c      	movs	r3, #12
 8007f88:	6033      	str	r3, [r6, #0]
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	428c      	cmp	r4, r1
 8007f90:	d3f9      	bcc.n	8007f86 <_malloc_r+0x16>
 8007f92:	4a20      	ldr	r2, [pc, #128]	; (8008014 <_malloc_r+0xa4>)
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	b1a1      	cbz	r1, 8007fc6 <_malloc_r+0x56>
 8007f9c:	680a      	ldr	r2, [r1, #0]
 8007f9e:	1b12      	subs	r2, r2, r4
 8007fa0:	d40e      	bmi.n	8007fc0 <_malloc_r+0x50>
 8007fa2:	2a0b      	cmp	r2, #11
 8007fa4:	d903      	bls.n	8007fae <_malloc_r+0x3e>
 8007fa6:	600a      	str	r2, [r1, #0]
 8007fa8:	188b      	adds	r3, r1, r2
 8007faa:	508c      	str	r4, [r1, r2]
 8007fac:	e01f      	b.n	8007fee <_malloc_r+0x7e>
 8007fae:	428b      	cmp	r3, r1
 8007fb0:	bf0d      	iteet	eq
 8007fb2:	685a      	ldreq	r2, [r3, #4]
 8007fb4:	684a      	ldrne	r2, [r1, #4]
 8007fb6:	605a      	strne	r2, [r3, #4]
 8007fb8:	6002      	streq	r2, [r0, #0]
 8007fba:	bf18      	it	ne
 8007fbc:	460b      	movne	r3, r1
 8007fbe:	e016      	b.n	8007fee <_malloc_r+0x7e>
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	6849      	ldr	r1, [r1, #4]
 8007fc4:	e7e9      	b.n	8007f9a <_malloc_r+0x2a>
 8007fc6:	4d14      	ldr	r5, [pc, #80]	; (8008018 <_malloc_r+0xa8>)
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b91b      	cbnz	r3, 8007fd4 <_malloc_r+0x64>
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f000 f971 	bl	80082b4 <_sbrk_r>
 8007fd2:	6028      	str	r0, [r5, #0]
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	f000 f96c 	bl	80082b4 <_sbrk_r>
 8007fdc:	1c42      	adds	r2, r0, #1
 8007fde:	4603      	mov	r3, r0
 8007fe0:	d0d1      	beq.n	8007f86 <_malloc_r+0x16>
 8007fe2:	1cc5      	adds	r5, r0, #3
 8007fe4:	f025 0503 	bic.w	r5, r5, #3
 8007fe8:	4285      	cmp	r5, r0
 8007fea:	d10a      	bne.n	8008002 <_malloc_r+0x92>
 8007fec:	601c      	str	r4, [r3, #0]
 8007fee:	f103 000b 	add.w	r0, r3, #11
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	f020 0007 	bic.w	r0, r0, #7
 8007ff8:	1a82      	subs	r2, r0, r2
 8007ffa:	d00a      	beq.n	8008012 <_malloc_r+0xa2>
 8007ffc:	4251      	negs	r1, r2
 8007ffe:	5099      	str	r1, [r3, r2]
 8008000:	bd70      	pop	{r4, r5, r6, pc}
 8008002:	4630      	mov	r0, r6
 8008004:	1ae9      	subs	r1, r5, r3
 8008006:	f000 f955 	bl	80082b4 <_sbrk_r>
 800800a:	3001      	adds	r0, #1
 800800c:	d0bb      	beq.n	8007f86 <_malloc_r+0x16>
 800800e:	462b      	mov	r3, r5
 8008010:	e7ec      	b.n	8007fec <_malloc_r+0x7c>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	200002fc 	.word	0x200002fc
 8008018:	200002f8 	.word	0x200002f8

0800801c <__ssputs_r>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	688e      	ldr	r6, [r1, #8]
 8008022:	42b3      	cmp	r3, r6
 8008024:	4682      	mov	sl, r0
 8008026:	460c      	mov	r4, r1
 8008028:	4690      	mov	r8, r2
 800802a:	4699      	mov	r9, r3
 800802c:	d340      	bcc.n	80080b0 <__ssputs_r+0x94>
 800802e:	898a      	ldrh	r2, [r1, #12]
 8008030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008034:	d03a      	beq.n	80080ac <__ssputs_r+0x90>
 8008036:	6825      	ldr	r5, [r4, #0]
 8008038:	6909      	ldr	r1, [r1, #16]
 800803a:	1a6f      	subs	r7, r5, r1
 800803c:	6965      	ldr	r5, [r4, #20]
 800803e:	2302      	movs	r3, #2
 8008040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008044:	fb95 f5f3 	sdiv	r5, r5, r3
 8008048:	1c7b      	adds	r3, r7, #1
 800804a:	444b      	add	r3, r9
 800804c:	429d      	cmp	r5, r3
 800804e:	bf38      	it	cc
 8008050:	461d      	movcc	r5, r3
 8008052:	0553      	lsls	r3, r2, #21
 8008054:	d50f      	bpl.n	8008076 <__ssputs_r+0x5a>
 8008056:	4629      	mov	r1, r5
 8008058:	f7ff ff8a 	bl	8007f70 <_malloc_r>
 800805c:	4606      	mov	r6, r0
 800805e:	b198      	cbz	r0, 8008088 <__ssputs_r+0x6c>
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	463a      	mov	r2, r7
 8008064:	f7fe f8fa 	bl	800625c <memcpy>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800806e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	e013      	b.n	800809e <__ssputs_r+0x82>
 8008076:	462a      	mov	r2, r5
 8008078:	f000 f947 	bl	800830a <_realloc_r>
 800807c:	4606      	mov	r6, r0
 800807e:	b970      	cbnz	r0, 800809e <__ssputs_r+0x82>
 8008080:	4650      	mov	r0, sl
 8008082:	6921      	ldr	r1, [r4, #16]
 8008084:	f7ff ff30 	bl	8007ee8 <_free_r>
 8008088:	230c      	movs	r3, #12
 800808a:	f8ca 3000 	str.w	r3, [sl]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809e:	6126      	str	r6, [r4, #16]
 80080a0:	6165      	str	r5, [r4, #20]
 80080a2:	443e      	add	r6, r7
 80080a4:	1bed      	subs	r5, r5, r7
 80080a6:	6026      	str	r6, [r4, #0]
 80080a8:	60a5      	str	r5, [r4, #8]
 80080aa:	464e      	mov	r6, r9
 80080ac:	45b1      	cmp	r9, r6
 80080ae:	d200      	bcs.n	80080b2 <__ssputs_r+0x96>
 80080b0:	464e      	mov	r6, r9
 80080b2:	4632      	mov	r2, r6
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	4641      	mov	r1, r8
 80080b8:	f000 f90c 	bl	80082d4 <memmove>
 80080bc:	68a3      	ldr	r3, [r4, #8]
 80080be:	1b9b      	subs	r3, r3, r6
 80080c0:	60a3      	str	r3, [r4, #8]
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	441e      	add	r6, r3
 80080c6:	6026      	str	r6, [r4, #0]
 80080c8:	2000      	movs	r0, #0
 80080ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080080d0 <_svfiprintf_r>:
 80080d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080d4:	b09d      	sub	sp, #116	; 0x74
 80080d6:	4606      	mov	r6, r0
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	898b      	ldrh	r3, [r1, #12]
 80080dc:	061c      	lsls	r4, r3, #24
 80080de:	460d      	mov	r5, r1
 80080e0:	4690      	mov	r8, r2
 80080e2:	d50c      	bpl.n	80080fe <_svfiprintf_r+0x2e>
 80080e4:	690b      	ldr	r3, [r1, #16]
 80080e6:	b953      	cbnz	r3, 80080fe <_svfiprintf_r+0x2e>
 80080e8:	2140      	movs	r1, #64	; 0x40
 80080ea:	f7ff ff41 	bl	8007f70 <_malloc_r>
 80080ee:	6028      	str	r0, [r5, #0]
 80080f0:	6128      	str	r0, [r5, #16]
 80080f2:	b910      	cbnz	r0, 80080fa <_svfiprintf_r+0x2a>
 80080f4:	230c      	movs	r3, #12
 80080f6:	6033      	str	r3, [r6, #0]
 80080f8:	e0cc      	b.n	8008294 <_svfiprintf_r+0x1c4>
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	616b      	str	r3, [r5, #20]
 80080fe:	2300      	movs	r3, #0
 8008100:	9309      	str	r3, [sp, #36]	; 0x24
 8008102:	2320      	movs	r3, #32
 8008104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008108:	2330      	movs	r3, #48	; 0x30
 800810a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800810e:	4643      	mov	r3, r8
 8008110:	461c      	mov	r4, r3
 8008112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008116:	b91a      	cbnz	r2, 8008120 <_svfiprintf_r+0x50>
 8008118:	ebb4 0908 	subs.w	r9, r4, r8
 800811c:	d00f      	beq.n	800813e <_svfiprintf_r+0x6e>
 800811e:	e002      	b.n	8008126 <_svfiprintf_r+0x56>
 8008120:	2a25      	cmp	r2, #37	; 0x25
 8008122:	d1f5      	bne.n	8008110 <_svfiprintf_r+0x40>
 8008124:	e7f8      	b.n	8008118 <_svfiprintf_r+0x48>
 8008126:	4630      	mov	r0, r6
 8008128:	4629      	mov	r1, r5
 800812a:	4642      	mov	r2, r8
 800812c:	464b      	mov	r3, r9
 800812e:	f7ff ff75 	bl	800801c <__ssputs_r>
 8008132:	3001      	adds	r0, #1
 8008134:	f000 80a9 	beq.w	800828a <_svfiprintf_r+0x1ba>
 8008138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813a:	444b      	add	r3, r9
 800813c:	9309      	str	r3, [sp, #36]	; 0x24
 800813e:	7823      	ldrb	r3, [r4, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 80a2 	beq.w	800828a <_svfiprintf_r+0x1ba>
 8008146:	2300      	movs	r3, #0
 8008148:	f04f 32ff 	mov.w	r2, #4294967295
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	9205      	str	r2, [sp, #20]
 8008152:	9306      	str	r3, [sp, #24]
 8008154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008158:	931a      	str	r3, [sp, #104]	; 0x68
 800815a:	f104 0801 	add.w	r8, r4, #1
 800815e:	4644      	mov	r4, r8
 8008160:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80082ac <_svfiprintf_r+0x1dc>
 8008164:	7821      	ldrb	r1, [r4, #0]
 8008166:	4648      	mov	r0, r9
 8008168:	2205      	movs	r2, #5
 800816a:	f7ff fbc1 	bl	80078f0 <memchr>
 800816e:	f108 0801 	add.w	r8, r8, #1
 8008172:	9b04      	ldr	r3, [sp, #16]
 8008174:	b130      	cbz	r0, 8008184 <_svfiprintf_r+0xb4>
 8008176:	ebc9 0000 	rsb	r0, r9, r0
 800817a:	2201      	movs	r2, #1
 800817c:	4082      	lsls	r2, r0
 800817e:	4313      	orrs	r3, r2
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	e7ec      	b.n	800815e <_svfiprintf_r+0x8e>
 8008184:	06d8      	lsls	r0, r3, #27
 8008186:	bf44      	itt	mi
 8008188:	2220      	movmi	r2, #32
 800818a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800818e:	0719      	lsls	r1, r3, #28
 8008190:	bf44      	itt	mi
 8008192:	222b      	movmi	r2, #43	; 0x2b
 8008194:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008198:	7822      	ldrb	r2, [r4, #0]
 800819a:	2a2a      	cmp	r2, #42	; 0x2a
 800819c:	d002      	beq.n	80081a4 <_svfiprintf_r+0xd4>
 800819e:	9907      	ldr	r1, [sp, #28]
 80081a0:	4623      	mov	r3, r4
 80081a2:	e00e      	b.n	80081c2 <_svfiprintf_r+0xf2>
 80081a4:	9a03      	ldr	r2, [sp, #12]
 80081a6:	1d11      	adds	r1, r2, #4
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	9103      	str	r1, [sp, #12]
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	bfbb      	ittet	lt
 80081b0:	4252      	neglt	r2, r2
 80081b2:	f043 0302 	orrlt.w	r3, r3, #2
 80081b6:	9207      	strge	r2, [sp, #28]
 80081b8:	9207      	strlt	r2, [sp, #28]
 80081ba:	bfb8      	it	lt
 80081bc:	9304      	strlt	r3, [sp, #16]
 80081be:	3401      	adds	r4, #1
 80081c0:	e00a      	b.n	80081d8 <_svfiprintf_r+0x108>
 80081c2:	461c      	mov	r4, r3
 80081c4:	3301      	adds	r3, #1
 80081c6:	7822      	ldrb	r2, [r4, #0]
 80081c8:	3a30      	subs	r2, #48	; 0x30
 80081ca:	2a09      	cmp	r2, #9
 80081cc:	d803      	bhi.n	80081d6 <_svfiprintf_r+0x106>
 80081ce:	200a      	movs	r0, #10
 80081d0:	fb00 2101 	mla	r1, r0, r1, r2
 80081d4:	e7f5      	b.n	80081c2 <_svfiprintf_r+0xf2>
 80081d6:	9107      	str	r1, [sp, #28]
 80081d8:	7823      	ldrb	r3, [r4, #0]
 80081da:	2b2e      	cmp	r3, #46	; 0x2e
 80081dc:	d11a      	bne.n	8008214 <_svfiprintf_r+0x144>
 80081de:	7863      	ldrb	r3, [r4, #1]
 80081e0:	2b2a      	cmp	r3, #42	; 0x2a
 80081e2:	d10a      	bne.n	80081fa <_svfiprintf_r+0x12a>
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	9203      	str	r2, [sp, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfb8      	it	lt
 80081f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081f4:	3402      	adds	r4, #2
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	e00c      	b.n	8008214 <_svfiprintf_r+0x144>
 80081fa:	1c61      	adds	r1, r4, #1
 80081fc:	2200      	movs	r2, #0
 80081fe:	460c      	mov	r4, r1
 8008200:	3101      	adds	r1, #1
 8008202:	7823      	ldrb	r3, [r4, #0]
 8008204:	3b30      	subs	r3, #48	; 0x30
 8008206:	2b09      	cmp	r3, #9
 8008208:	d803      	bhi.n	8008212 <_svfiprintf_r+0x142>
 800820a:	200a      	movs	r0, #10
 800820c:	fb00 3202 	mla	r2, r0, r2, r3
 8008210:	e7f5      	b.n	80081fe <_svfiprintf_r+0x12e>
 8008212:	9205      	str	r2, [sp, #20]
 8008214:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80082b0 <_svfiprintf_r+0x1e0>
 8008218:	7821      	ldrb	r1, [r4, #0]
 800821a:	4640      	mov	r0, r8
 800821c:	2203      	movs	r2, #3
 800821e:	f7ff fb67 	bl	80078f0 <memchr>
 8008222:	b138      	cbz	r0, 8008234 <_svfiprintf_r+0x164>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	ebc8 0000 	rsb	r0, r8, r0
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	4083      	lsls	r3, r0
 800822e:	4313      	orrs	r3, r2
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	3401      	adds	r4, #1
 8008234:	7821      	ldrb	r1, [r4, #0]
 8008236:	481a      	ldr	r0, [pc, #104]	; (80082a0 <_svfiprintf_r+0x1d0>)
 8008238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800823c:	2206      	movs	r2, #6
 800823e:	f104 0801 	add.w	r8, r4, #1
 8008242:	f7ff fb55 	bl	80078f0 <memchr>
 8008246:	b188      	cbz	r0, 800826c <_svfiprintf_r+0x19c>
 8008248:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <_svfiprintf_r+0x1d4>)
 800824a:	b933      	cbnz	r3, 800825a <_svfiprintf_r+0x18a>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	3307      	adds	r3, #7
 8008250:	f023 0307 	bic.w	r3, r3, #7
 8008254:	3308      	adds	r3, #8
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	e013      	b.n	8008282 <_svfiprintf_r+0x1b2>
 800825a:	ab03      	add	r3, sp, #12
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	4630      	mov	r0, r6
 8008260:	a904      	add	r1, sp, #16
 8008262:	462a      	mov	r2, r5
 8008264:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <_svfiprintf_r+0x1d8>)
 8008266:	f7fe f89d 	bl	80063a4 <_printf_float>
 800826a:	e007      	b.n	800827c <_svfiprintf_r+0x1ac>
 800826c:	ab03      	add	r3, sp, #12
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4630      	mov	r0, r6
 8008272:	a904      	add	r1, sp, #16
 8008274:	462a      	mov	r2, r5
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <_svfiprintf_r+0x1d8>)
 8008278:	f7fe fb4e 	bl	8006918 <_printf_i>
 800827c:	1c42      	adds	r2, r0, #1
 800827e:	4607      	mov	r7, r0
 8008280:	d003      	beq.n	800828a <_svfiprintf_r+0x1ba>
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	443b      	add	r3, r7
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	e741      	b.n	800810e <_svfiprintf_r+0x3e>
 800828a:	89ab      	ldrh	r3, [r5, #12]
 800828c:	065b      	lsls	r3, r3, #25
 800828e:	d401      	bmi.n	8008294 <_svfiprintf_r+0x1c4>
 8008290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008292:	e001      	b.n	8008298 <_svfiprintf_r+0x1c8>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	b01d      	add	sp, #116	; 0x74
 800829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800829e:	bf00      	nop
 80082a0:	08008a1e 	.word	0x08008a1e
 80082a4:	080063a5 	.word	0x080063a5
 80082a8:	0800801d 	.word	0x0800801d
 80082ac:	08008a14 	.word	0x08008a14
 80082b0:	08008a1a 	.word	0x08008a1a

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4c06      	ldr	r4, [pc, #24]	; (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4605      	mov	r5, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	f7f9 fd22 	bl	8001d08 <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20000b58 	.word	0x20000b58

080082d4 <memmove>:
 80082d4:	4281      	cmp	r1, r0
 80082d6:	b510      	push	{r4, lr}
 80082d8:	eb01 0302 	add.w	r3, r1, r2
 80082dc:	d301      	bcc.n	80082e2 <memmove+0xe>
 80082de:	1e42      	subs	r2, r0, #1
 80082e0:	e00b      	b.n	80082fa <memmove+0x26>
 80082e2:	4298      	cmp	r0, r3
 80082e4:	d2fb      	bcs.n	80082de <memmove+0xa>
 80082e6:	1881      	adds	r1, r0, r2
 80082e8:	1ad2      	subs	r2, r2, r3
 80082ea:	42d3      	cmn	r3, r2
 80082ec:	d004      	beq.n	80082f8 <memmove+0x24>
 80082ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80082f6:	e7f8      	b.n	80082ea <memmove+0x16>
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d004      	beq.n	8008308 <memmove+0x34>
 80082fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008302:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008306:	e7f8      	b.n	80082fa <memmove+0x26>
 8008308:	bd10      	pop	{r4, pc}

0800830a <_realloc_r>:
 800830a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830c:	4607      	mov	r7, r0
 800830e:	4615      	mov	r5, r2
 8008310:	460e      	mov	r6, r1
 8008312:	b921      	cbnz	r1, 800831e <_realloc_r+0x14>
 8008314:	4611      	mov	r1, r2
 8008316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800831a:	f7ff be29 	b.w	8007f70 <_malloc_r>
 800831e:	b91a      	cbnz	r2, 8008328 <_realloc_r+0x1e>
 8008320:	f7ff fde2 	bl	8007ee8 <_free_r>
 8008324:	4628      	mov	r0, r5
 8008326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008328:	f000 f815 	bl	8008356 <_malloc_usable_size_r>
 800832c:	42a8      	cmp	r0, r5
 800832e:	d20e      	bcs.n	800834e <_realloc_r+0x44>
 8008330:	4638      	mov	r0, r7
 8008332:	4629      	mov	r1, r5
 8008334:	f7ff fe1c 	bl	8007f70 <_malloc_r>
 8008338:	4604      	mov	r4, r0
 800833a:	b150      	cbz	r0, 8008352 <_realloc_r+0x48>
 800833c:	4631      	mov	r1, r6
 800833e:	462a      	mov	r2, r5
 8008340:	f7fd ff8c 	bl	800625c <memcpy>
 8008344:	4638      	mov	r0, r7
 8008346:	4631      	mov	r1, r6
 8008348:	f7ff fdce 	bl	8007ee8 <_free_r>
 800834c:	e001      	b.n	8008352 <_realloc_r+0x48>
 800834e:	4630      	mov	r0, r6
 8008350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008352:	4620      	mov	r0, r4
 8008354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008356 <_malloc_usable_size_r>:
 8008356:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800835a:	2800      	cmp	r0, #0
 800835c:	bfbe      	ittt	lt
 800835e:	1809      	addlt	r1, r1, r0
 8008360:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8008364:	18c0      	addlt	r0, r0, r3
 8008366:	3804      	subs	r0, #4
 8008368:	4770      	bx	lr
	...

0800836c <g_xmc_vadc_group_array>:
 800836c:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

0800837c <PWM_CCU8_0_timer_handle>:
 800837c:	0001 0000 0000 0000 0014 0000 0000 0000     ................

0800838c <PWM_CCU8_0_event0_config>:
 800838c:	0000 0001                                   ....

08008390 <PWM_CCU8_0_event1_config>:
 8008390:	0000 0001                                   ....

08008394 <PWM_CCU8_0_event2_config>:
 8008394:	0000 0001                                   ....

08008398 <PWM_CCU8_0_dt_config>:
 8008398:	004d 0000 b4b4 0000 0000 0000               M...........

080083a4 <PWM_CCU8_0_ch1_out0_config>:
 80083a4:	0098 0000 0000 0001 0000 0000               ............

080083b0 <PWM_CCU8_0_ch1_out1_config>:
 80083b0:	0098 0000 0000 0001 0000 0000               ............

080083bc <PWM_CCU8_0_config_handle>:
 80083bc:	0000 ea5f 7530 7514 0000 0000 0000 0000     .._.0u.u........
	...
 80083d8:	838c 0800 8390 0800 8394 0800 0000 0000     ................
	...
 80083f4:	0001 0000 0000 0400 8398 0800 837c 0800     ............|...
 8008404:	0001 0000 8000 4802 0005 0000 83a4 0800     .......H........
 8008414:	0001 0000 8000 4802 0002 0000 83b0 0800     .......H........
	...
 8008444:	00fc 2000                                   ... 

08008448 <PWM_CCU8_1_timer_handle>:
 8008448:	0001 0000 0000 0000 0014 0000 0000 0000     ................

08008458 <PWM_CCU8_1_event0_config>:
 8008458:	0000 0001                                   ....

0800845c <PWM_CCU8_1_event1_config>:
 800845c:	0000 0001                                   ....

08008460 <PWM_CCU8_1_event2_config>:
 8008460:	0000 0001                                   ....

08008464 <PWM_CCU8_1_dt_config>:
 8008464:	004d 0000 b4b4 0000 0000 0000               M...........

08008470 <PWM_CCU8_1_ch1_out0_config>:
 8008470:	0098 0000 0000 0001 0000 0000               ............

0800847c <PWM_CCU8_1_ch1_out1_config>:
 800847c:	0098 0000 0000 0001 0000 0000               ............

08008488 <PWM_CCU8_1_config_handle>:
 8008488:	0000 ea5f 7530 7514 0000 0000 0000 0000     .._.0u.u........
	...
 80084a4:	8458 0800 845c 0800 8460 0800 0000 0000     X...\...`.......
	...
 80084c0:	0001 0000 0000 0800 8464 0800 8448 0800     ........d...H...
 80084d0:	0001 0000 8000 4802 0004 0000 8470 0800     .......H....p...
 80084e0:	0001 0000 8000 4802 0001 0000 847c 0800     .......H....|...
	...
 8008510:	00fc 2000                                   ... 

08008514 <PWM_CCU8_2_timer_handle>:
 8008514:	0001 0000 0000 0000 0014 0000 0000 0000     ................

08008524 <PWM_CCU8_2_event0_config>:
 8008524:	0000 0001                                   ....

08008528 <PWM_CCU8_2_event1_config>:
 8008528:	0000 0001                                   ....

0800852c <PWM_CCU8_2_event2_config>:
 800852c:	0000 0001                                   ....

08008530 <PWM_CCU8_2_dt_config>:
 8008530:	004d 0000 b4b4 0000 0000 0000               M...........

0800853c <PWM_CCU8_2_ch1_out0_config>:
 800853c:	0098 0000 0000 0001 0000 0000               ............

08008548 <PWM_CCU8_2_ch1_out1_config>:
 8008548:	0098 0000 0000 0001 0000 0000               ............

08008554 <PWM_CCU8_2_config_handle>:
 8008554:	0000 ea5f 7530 7514 0000 0000 0000 0000     .._.0u.u........
	...
 8008570:	8524 0800 8528 0800 852c 0800 0000 0000     $...(...,.......
	...
 800858c:	0001 0000 0000 1000 8530 0800 8514 0800     ........0.......
 800859c:	0001 0000 8000 4802 0003 0000 853c 0800     .......H....<...
 80085ac:	0001 0000 8000 4802 0000 0000 8548 0800     .......H....H...
	...
 80085dc:	00fc 2000                                   ... 

080085e0 <PIN_INTERRUPT_0>:
 80085e0:	4800 5000 8100 4802 0000 0000 0000 0000     .H.P...H........
	...
 80085f8:	0135 0000 3d04 0300 0003 0001               5....=......

08008604 <PIN_INTERRUPT_1>:
 8008604:	4000 4004 8100 4802 0000 0000 0000 0000     .@.@...H........
	...
 800861c:	0035 0000 3b08 0100 0f03 0001               5....;......

08008628 <PIN_INTERRUPT_2>:
 8008628:	4000 4004 8100 4802 0000 0000 0000 0000     .@.@...H........
	...
 8008640:	000d 0000 3c05 0000 0500 0001               .....<......

0800864c <INTERRUPT_0>:
 800864c:	3f39 0100                                   9?..

08008650 <group_init_handle0>:
	...

08008664 <group_init_handle1>:
	...

08008678 <group_init_handle2>:
	...

0800868c <group_init_handle3>:
	...

080086a0 <global_config>:
 80086a0:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...
 80086b8:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 80086c8:	0101 0101                                   ....

080086cc <global_iclass_config>:
 80086cc:	0100 0000                                   ....

080086d0 <backgnd_rs_intr_handle>:
 80086d0:	0010 0000 003e 0000 0000 0000               ....>.......

080086dc <backgnd_config>:
 80086dc:	0005 0000 4500 0000 000c 0000 6625 0000     .....E......%f..

080086ec <npio2_hw>:
 80086ec:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80086fc:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 800870c:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 800871c:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 800872c:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 800873c:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 800874c:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 800875c:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0800876c <two_over_pi>:
 800876c:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 800877c:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 800878c:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 800879c:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80087ac:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80087bc:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80087cc:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80087dc:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80087ec:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80087fc:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 800880c:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 800881c:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 800882c:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 800883c:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 800884c:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 800885c:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 800886c:	e27b 0060 8c6b 00c0                         {.`.k...

08008874 <init_jk>:
 8008874:	0002 0000 0003 0000 0004 0000 0006 0000     ................
 8008884:	0000 0000                                   ....

08008888 <PIo2>:
 8008888:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 8008898:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80088a8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80088b8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5
 80088c8:	0043 4e49 0046 6e69 0066 414e 004e 616e     C.INF.inf.NAN.na
 80088d8:	006e 0030 3130 3332 3534 3736 3938 4241     n.0.0123456789AB
 80088e8:	4443 4645 3000 3231 3433 3635 3837 6139     CDEF.0123456789a
 80088f8:	6362 6564 0066 6e49 6966 696e 7974 4e00     bcdef.Infinity.N
 8008908:	4e61 5000 534f 5849 2e00 0000 0000 0000     aN.POSIX........

08008918 <__mprec_tens>:
 8008918:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008928:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008938:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008948:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008958:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008968:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008978:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008988:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008998:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80089a8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80089b8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80089c8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80089d8:	9db4 79d9 7843 44ea                         ...yCx.D

080089e0 <__mprec_bigtens>:
 80089e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80089f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008a00:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008a08 <p05.5277>:
 8008a08:	0005 0000 0019 0000 007d 0000 2d23 2b30     ........}...#-0+
 8008a18:	0020 6c68 004c 6665 4567 4746 0000 0000      .hlL.efgEFG....
